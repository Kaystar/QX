{
  "matchValue" : "",
  "code" : "Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICAxMTXovazlrZjliqnmiYt1aeS8mOWMlueJiDMuNeaUuS1Gb3hva+WFvOWuueeJiAovLyBAbmFtZTp6aCAgICAgIDExNei9rOWtmOWKqeaJi3Vp5LyY5YyW54mIMy415pS5LUZveG9r5YW85a6554mICi8vIEBkZXNjcmlwdGlvbiAgMjAyMi4wNC4wMiDmm7TmlrDvvIwxMTXovazlrZjliqnmiYt1aeS8mOWMlueJiCB2My415pS5ICgxNDMuMjAyMi4wNDAyLjEpKGJhc2VkIG9uIEZha2UxMTVVcGxvYWQgMS40LjMgQFQzcnJ5KQovLyBAYXV0aG9yICAgICAgIE5ldmVyNEV2ZXIKLy8gQG5hbWVzcGFjZSAgICBGYWtlMTE1VXBsb2FkQE5ldmVyNEV2ZXIKLy8gQHZlcnNpb24gICAgICAxNDMuMjAyMi4wNDAyLjEKLy8gQGluY2x1ZGUgICAgICBodHRwKjovLyouMTE1LmNvbS8qCi8vIEBpbmNsdWRlICAgICAgaHR0cCo6Ly8xMTUuY29tLyoKCi8vIEBncmFudCAgICAgICAgR01feG1saHR0cFJlcXVlc3QKLy8gQGdyYW50ICAgICAgICBHTV9sb2cKLy8gQGdyYW50ICAgICAgICBHTV9zZXRWYWx1ZQovLyBAZ3JhbnQgICAgICAgIEdNX2dldFZhbHVlCi8vIEBncmFudCAgICAgICAgR01fc2V0Q2xpcGJvYXJkCi8vIEBncmFudCAgICAgICAgdW5zYWZlV2luZG93Ci8vIEBncmFudCAgICAgICAgR01fcmVnaXN0ZXJNZW51Q29tbWFuZAovLyBAZ3JhbnQgICAgICAgIEdNX2FkZFN0eWxlCi8vIEBncmFudCAgICAgICAgR01faW5mbwoKLy8gQGNvbm5lY3QgICAgICBwcm9hcGkuMTE1LmNvbQovLyBAY29ubmVjdCAgICAgIHdlYmFwaS4xMTUuY29tCi8vIEBjb25uZWN0ICAgICAgMTE1LmNvbQoKLy8gQHJlcXVpcmUgICAgICBodHRwczovL3VucGtnLnpoaW1nLmNvbS91bmRlcnNjb3JlQDEuMTIuMC91bmRlcnNjb3JlLW1pbi5qcwovLyBAcmVxdWlyZSAgICAgIGh0dHBzOi8vdW5wa2cuemhpbWcuY29tL3N3ZWV0YWxlcnQyQDExLjMuMAovLyBAcmVxdWlyZSAgICAgIGh0dHBzOi8vdW5wa2cuemhpbWcuY29tL25vZGUtZm9yZ2VAMC4xMC4wL2Rpc3QvZm9yZ2UubWluLmpzCi8vIEByZXF1aXJlICAgICAgaHR0cHM6Ly91bnBrZy56aGltZy5jb20vZW1vdXRpbHNAMi4wLjAvZGlzdC91bWQvZW1vdXRpbHMubWluLmpzCi8vIEByZXF1aXJlICAgICAgaHR0cHM6Ly9jZG4uYm9vdGNzcy5jb20vYmx1ZWltcC1tZDUvMi4xMC4wL2pzL21kNS5taW4uanMKLy8gQHJlcXVpcmUgICAgICBodHRwczovL3BldGVyb2xzb24uZ2l0aHViLmlvL0JpZ0ludGVnZXIuanMvQmlnSW50ZWdlci5taW4uanMKLy8gPT0vVXNlclNjcmlwdD09CgoKLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgror7fku47ku6XkuIvojrflj5bmnIDmlrDniYjvvIzmiJbogIXpgYfliLDpl67popjljrvmraTlj43ppojvvIzmhJ\\/IDMgOiAwOwogICAgICAgIGZvciAoZyA9IDA7IGcgPCBuOyBnICs9IDMpCiAgICAgICAgICAgIGZvciAoZCA9IGcgKyAxIDwgbiA\/IGNbZyArIDEgPj4+IDJdIDogMCwgcCA9IGcgKyAyIDwgbiA\/IGNbZyArIDIgPj4+IDJdIDogMCwgcCA9IChjW2cgPj4+IDJdID4+PiA4ICogKGYgKyBnICUgNCAqIGIpICYgMjU1KSA8PCAxNiB8IChkID4+PiA4ICogKGYgKyAoZyArIDEpICUgNCAqIGIpICYgMjU1KSA8PCA4IHwgcCA+Pj4gOCAqIChmICsKICAgICAgICAgICAgICAgICAgICAoZyArIDIpICUgNCAqIGIpICYgMjU1LCBkID0gMDsgNCA+IGQ7IGQgKz0gMSkgOCAqIGcgKyA2ICogZCA8PSBhID8gaCArPSAiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLyIuY2hhckF0KHAgPj4+IDYgKiAoMyAtIGQpICYgNjMpIDogaCArPSBlLmI2NFBhZDsKICAgICAgICByZXR1cm4gaAogICAgfQoKICAgIGZ1bmN0aW9uIFEoYywgYSwgYikgewogICAgICAgIHZhciBlID0gIiI7CiAgICAgICAgYSAvPSA4OwogICAgICAgIHZhciBoLCBkLCBnOwogICAgICAgIGcgPSAtMSA9PT0gYiA\/IDMgOiAwOwogICAgICAgIGZvciAoaCA9IDA7IGggPCBhOyBoICs9IDEpIGQgPSBjW2ggPj4+IDJdID4+PiA4ICogKGcgKyBoICUgNCAqIGIpICYgMjU1LCBlICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoZCk7CiAgICAgICAgcmV0dXJuIGUKICAgIH0KCiAgICBmdW5jdGlvbiBSKGMsIGEsIGIpIHsKICAgICAgICBhIC89IDg7CiAgICAgICAgdmFyIGUsIGggPSBuZXcgQXJyYXlCdWZmZXIoYSksCiAgICAgICAgICAgIGQsIGc7CiAgICAgICAgZyA9IG5ldyBVaW50OEFycmF5KGgpOwogICAgICAgIGQgPSAtMSA9PT0gYiA\/IDMgOiAwOwogICAgICAgIGZvciAoZSA9IDA7IGUgPCBhOyBlICs9IDEpIGdbZV0gPSBjW2UgPj4+IDJdID4+PiA4ICogKGQgKyBlICUgNCAqIGIpICYgMjU1OwogICAgICAgIHJldHVybiBoCiAgICB9CgogICAgZnVuY3Rpb24gTihjKSB7CiAgICAgICAgdmFyIGEgPSB7CiAgICAgICAgICAgIG91dHB1dFVwcGVyOiAhMSwKICAgICAgICAgICAgYjY0UGFkOiAiPSIsCiAgICAgICAgICAgIHNoYWtlTGVuOiAtMQogICAgICAgIH07CiAgICAgICAgYyA9IGMgfHwge307CiAgICAgICAgYS5vdXRwdXRVcHBlciA9IGMub3V0cHV0VXBwZXIgfHwgITE7CiAgICAgICAgITAgPT09IGMuaGFzT3duUHJvcGVydHkoImI2NFBhZCIpICYmIChhLmI2NFBhZCA9IGMuYjY0UGFkKTsKICAgICAgICBpZiAoITAgPT09IGMuaGFzT3duUHJvcGVydHkoInNoYWtlTGVuIikpIHsKICAgICAgICAgICAgaWYgKDAgIT09IGMuc2hha2VMZW4gJSA4KSB0aHJvdyBFcnJvcigic2hha2VMZW4gbXVzdCBiZSBhIG11bHRpcGxlIG9mIDgiKTsKICAgICAgICAgICAgYS5zaGFrZUxlbiA9IGMuc2hha2VMZW4KICAgICAgICB9CiAgICAgICAgaWYgKCJib29sZWFuIiAhPT0gdHlwZW9mIGEub3V0cHV0VXBwZXIpIHRocm93IEVycm9yKCJJbnZhbGlkIG91dHB1dFVwcGVyIGZvcm1hdHRpbmcgb3B0aW9uIik7CiAgICAgICAgaWYgKCJzdHJpbmciICE9PSB0eXBlb2YgYS5iNjRQYWQpIHRocm93IEVycm9yKCJJbnZhbGlkIGI2NFBhZCBmb3JtYXR0aW5nIG9wdGlvbiIpOwogICAgICAgIHJldHVybiBhCiAgICB9CgogICAgZnVuY3Rpb24gTShjLCBhLCBiKSB7CiAgICAgICAgc3dpdGNoIChhKSB7CiAgICAgICAgICAgIGNhc2UgIlVURjgiOgogICAgICAgICAgICBjYXNlICJVVEYxNkJFIjoKICAgICAgICAgICAgY2FzZSAiVVRGMTZMRSI6CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgICAgIHRocm93IEVycm9yKCJlbmNvZGluZyBtdXN0IGJlIFVURjgsIFVURjE2QkUsIG9yIFVURjE2TEUiKTsKICAgICAgICB9CiAgICAgICAgc3dpdGNoIChjKSB7CiAgICAgICAgICAgIGNhc2UgIkhFWCI6CiAgICAgICAgICAgICAgICBjID0gZnVuY3Rpb24gKGEsIGMsIGQpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgZyA9IGEubGVuZ3RoLAogICAgICAgICAgICAgICAgICAgICAgICBsLCBwLCBmLCBtLCBxLCB1OwogICAgICAgICAgICAgICAgICAgIGlmICgwICE9PSBnICUgMikgdGhyb3cgRXJyb3IoIlN0cmluZyBvZiBIRVggdHlwZSBtdXN0IGJlIGluIGJ5dGUgaW5jcmVtZW50cyIpOwogICAgICAgICAgICAgICAgICAgIGMgPSBjIHx8IFswXTsKICAgICAgICAgICAgICAgICAgICBkID0gZCB8fCAwOwogICAgICAgICAgICAgICAgICAgIHEgPSBkID4+PiAzOwogICAgICAgICAgICAgICAgICAgIHUgPSAtMSA9PT0gYiA\/IDMgOiAwOwogICAgICAgICAgICAgICAgICAgIGZvciAobCA9IDA7IGwgPCBnOyBsICs9IDIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcCA9IHBhcnNlSW50KGEuc3Vic3RyKGwsIDIpLCAxNik7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc05hTihwKSkgdGhyb3cgRXJyb3IoIlN0cmluZyBvZiBIRVggdHlwZSBjb250YWlucyBpbnZhbGlkIGNoYXJhY3RlcnMiKTsKICAgICAgICAgICAgICAgICAgICAgICAgbSA9IChsID4+PiAxKSArIHE7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoZiA9IG0gPj4+IDI7IGMubGVuZ3RoIDw9IGY7KSBjLnB1c2goMCk7CiAgICAgICAgICAgICAgICAgICAgICAgIGNbZl0gfD0gcCA8PCA4ICogKHUgKyBtICUgNCAqIGIpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBjLAogICAgICAgICAgICAgICAgICAgICAgICBiaW5MZW46IDQgKiBnICsgZAogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgY2FzZSAiVEVYVCI6CiAgICAgICAgICAgICAgICBjID0gZnVuY3Rpb24gKGMsIGgsIGQpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgZywgbCwgcCA9IDAsCiAgICAgICAgICAgICAgICAgICAgICAgIGYsIG0sIHEsIHUsIHIsIHQ7CiAgICAgICAgICAgICAgICAgICAgaCA9IGggfHwgWzBdOwogICAgICAgICAgICAgICAgICAgIGQgPSBkIHx8IDA7CiAgICAgICAgICAgICAgICAgICAgcSA9IGQgPj4+IDM7CiAgICAgICAgICAgICAgICAgICAgaWYgKCJVVEY4IiA9PT0gYSkKICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh0ID0gLTEgPT09CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiID8gMyA6IDAsIGYgPSAwOyBmIDwgYy5sZW5ndGg7IGYgKz0gMSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoZyA9IGMuY2hhckNvZGVBdChmKSwgbCA9IFtdLCAxMjggPiBnID8gbC5wdXNoKGcpIDogMjA0OCA+IGcgPyAobC5wdXNoKDE5MiB8IGcgPj4+IDYpLCBsLnB1c2goMTI4IHwgZyAmIDYzKSkgOiA1NTI5NiA+IGcgfHwgNTczNDQgPD0gZyA\/IGwucHVzaCgyMjQgfCBnID4+PiAxMiwgMTI4IHwgZyA+Pj4gNiAmIDYzLCAxMjggfCBnICYgNjMpIDogKGYgKz0gMSwgZyA9IDY1NTM2ICsgKChnICYgMTAyMykgPDwgMTAgfCBjLmNoYXJDb2RlQXQoZikgJiAxMDIzKSwgbC5wdXNoKDI0MCB8IGcgPj4+IDE4LCAxMjggfCBnID4+PiAxMiAmIDYzLCAxMjggfCBnID4+PiA2ICYgNjMsIDEyOCB8IGcgJiA2MykpLCBtID0gMDsgbSA8IGwubGVuZ3RoOyBtICs9IDEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByID0gcCArIHE7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh1ID0gciA+Pj4gMjsgaC5sZW5ndGggPD0gdTspIGgucHVzaCgwKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoW3VdIHw9IGxbbV0gPDwgOCAqICh0ICsgciAlIDQgKiBiKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwICs9IDEKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIlVURjE2QkUiID09PSBhIHx8ICJVVEYxNkxFIiA9PT0gYSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHQgPSAtMSA9PT0gYiA\/IDIgOiAwLCBsID0gIlVURjE2TEUiID09PSBhICYmIDEgIT09IGIgfHwgIlVURjE2TEUiICE9PSBhICYmIDEgPT09IGIsIGYgPSAwOyBmIDwgYy5sZW5ndGg7IGYgKz0gMSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnID0gYy5jaGFyQ29kZUF0KGYpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAhMCA9PT0gbCAmJiAobSA9IGcgJiAyNTUsIGcgPSBtIDw8IDggfCBnID4+PiA4KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgciA9IHAgKyBxOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHUgPSByID4+PiAyOyBoLmxlbmd0aCA8PSB1OykgaC5wdXNoKDApOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoW3VdIHw9IGcgPDwgOCAqICh0ICsgciAlIDQgKiBiKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcCArPSAyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBoLAogICAgICAgICAgICAgICAgICAgICAgICBiaW5MZW46IDggKiBwICsgZAogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgY2FzZSAiQjY0IjoKICAgICAgICAgICAgICAgIGMgPSBmdW5jdGlvbiAoYSwgYywgZCkgewogICAgICAgICAgICAgICAgICAgIHZhciBnID0gMCwKICAgICAgICAgICAgICAgICAgICAgICAgbCwgcCwgZiwgbSwgcSwgdSwgciwgdDsKICAgICAgICAgICAgICAgICAgICBpZiAoLTEgPT09IGEuc2VhcmNoKC9eW2EtekEtWjAtOT0rXC9dKyQvKSkgdGhyb3cgRXJyb3IoIkludmFsaWQgY2hhcmFjdGVyIGluIGJhc2UtNjQgc3RyaW5nIik7CiAgICAgICAgICAgICAgICAgICAgcCA9IGEuaW5kZXhPZigiPSIpOwogICAgICAgICAgICAgICAgICAgIGEgPSBhLnJlcGxhY2UoL1w9L2csICIiKTsKICAgICAgICAgICAgICAgICAgICBpZiAoLTEgIT09IHAgJiYgcCA8IGEubGVuZ3RoKSB0aHJvdyBFcnJvcigiSW52YWxpZCAnPScgZm91bmQgaW4gYmFzZS02NCBzdHJpbmciKTsKICAgICAgICAgICAgICAgICAgICBjID0gYyB8fCBbMF07CiAgICAgICAgICAgICAgICAgICAgZCA9IGQgfHwgMDsKICAgICAgICAgICAgICAgICAgICB1ID0gZCA+Pj4gMzsKICAgICAgICAgICAgICAgICAgICB0ID0gLTEgPT09IGIgPyAzIDogMDsKICAgICAgICAgICAgICAgICAgICBmb3IgKHAgPSAwOyBwIDwgYS5sZW5ndGg7IHAgKz0gNCkgewogICAgICAgICAgICAgICAgICAgICAgICBxID0gYS5zdWJzdHIocCwgNCk7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoZiA9IG0gPSAwOyBmIDwgcS5sZW5ndGg7IGYgKz0gMSkgbCA9ICJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvIi5pbmRleE9mKHFbZl0pLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbSB8PSBsIDw8IDE4IC0gNiAqIGY7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoZiA9IDA7IGYgPCBxLmxlbmd0aCAtIDE7IGYgKz0gMSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgciA9IGcgKyB1OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsID0gciA+Pj4gMjsgYy5sZW5ndGggPD0gbDspIGMucHVzaCgwKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNbbF0gfD0gKG0gPj4+IDE2IC0gOCAqIGYgJiAyNTUpIDw8IDggKiAodCArIHIgJSA0ICogYik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnICs9IDEKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogYywKICAgICAgICAgICAgICAgICAgICAgICAgYmluTGVuOiA4ICogZyArIGQKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGNhc2UgIkJZVEVTIjoKICAgICAgICAgICAgICAgIGMgPSBmdW5jdGlvbiAoYSwgYywgZCkgewogICAgICAgICAgICAgICAgICAgIHZhciBnLCBsLCBwLCBmLCBtLCBxOwogICAgICAgICAgICAgICAgICAgIGMgPSBjIHx8IFswXTsKICAgICAgICAgICAgICAgICAgICBkID0gZCB8fCAwOwogICAgICAgICAgICAgICAgICAgIHAgPSBkID4+PiAzOwogICAgICAgICAgICAgICAgICAgIHEgPSAtMSA9PT0gYiA\/IDMgOiAwOwogICAgICAgICAgICAgICAgICAgIGZvciAobCA9IDA7IGwgPCBhLmxlbmd0aDsgbCArPSAxKSBnID0gYS5jaGFyQ29kZUF0KGwpLCBtID0gbCArIHAsIGYgPSBtID4+PiAyLCBjLmxlbmd0aCA8PSBmICYmIGMucHVzaCgwKSwgY1tmXSB8PSBnIDw8IDggKiAocSArIG0gJSA0ICogYik7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGMsCiAgICAgICAgICAgICAgICAgICAgICAgIGJpbkxlbjogOCAqIGEubGVuZ3RoICsgZAogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgY2FzZSAiQVJSQVlCVUZGRVIiOgogICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICBjID0gbmV3IEFycmF5QnVmZmVyKDApCiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoIkFSUkFZQlVGRkVSIG5vdCBzdXBwb3J0ZWQgYnkgdGhpcyBlbnZpcm9ubWVudCIpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgYyA9CiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKGEsIGMsIGQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGcsIGwsIHAsIGYsIG0sIHE7CiAgICAgICAgICAgICAgICAgICAgICAgIGMgPSBjIHx8IFswXTsKICAgICAgICAgICAgICAgICAgICAgICAgZCA9IGQgfHwgMDsKICAgICAgICAgICAgICAgICAgICAgICAgbCA9IGQgPj4+IDM7CiAgICAgICAgICAgICAgICAgICAgICAgIG0gPSAtMSA9PT0gYiA\/IDMgOiAwOwogICAgICAgICAgICAgICAgICAgICAgICBxID0gbmV3IFVpbnQ4QXJyYXkoYSk7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoZyA9IDA7IGcgPCBhLmJ5dGVMZW5ndGg7IGcgKz0gMSkgZiA9IGcgKyBsLCBwID0gZiA+Pj4gMiwgYy5sZW5ndGggPD0gcCAmJiBjLnB1c2goMCksIGNbcF0gfD0gcVtnXSA8PCA4ICogKG0gKyBmICUgNCAqIGIpOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGMsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiaW5MZW46IDggKiBhLmJ5dGVMZW5ndGggKyBkCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcigiZm9ybWF0IG11c3QgYmUgSEVYLCBURVhULCBCNjQsIEJZVEVTLCBvciBBUlJBWUJVRkZFUiIpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gYwogICAgfQoKICAgIGZ1bmN0aW9uIHkoYywgYSkgewogICAgICAgIHJldHVybiBjIDw8IGEgfCBjID4+PiAzMiAtIGEKICAgIH0KCiAgICBmdW5jdGlvbiBTKGMsIGEpIHsKICAgICAgICByZXR1cm4gMzIgPCBhID8gKGEgLT0gMzIsIG5ldyBiKGMuYiA8PCBhIHwgYy5hID4+PiAzMiAtIGEsIGMuYSA8PCBhIHwgYy5iID4+PiAzMiAtIGEpKSA6IDAgIT09IGEgPyBuZXcgYihjLmEgPDwgYSB8IGMuYiA+Pj4gMzIgLSBhLCBjLmIgPDwgYSB8IGMuYSA+Pj4gMzIgLSBhKSA6IGMKICAgIH0KCiAgICBmdW5jdGlvbiB3KGMsIGEpIHsKICAgICAgICByZXR1cm4gYyA+Pj4KICAgICAgICAgICAgYSB8IGMgPDwgMzIgLSBhCiAgICB9CgogICAgZnVuY3Rpb24gdChjLCBhKSB7CiAgICAgICAgdmFyIGsgPSBudWxsLAogICAgICAgICAgICBrID0gbmV3IGIoYy5hLCBjLmIpOwogICAgICAgIHJldHVybiBrID0gMzIgPj0gYSA\/IG5ldyBiKGsuYSA+Pj4gYSB8IGsuYiA8PCAzMiAtIGEgJiA0Mjk0OTY3Mjk1LCBrLmIgPj4+IGEgfCBrLmEgPDwgMzIgLSBhICYgNDI5NDk2NzI5NSkgOiBuZXcgYihrLmIgPj4+IGEgLSAzMiB8IGsuYSA8PCA2NCAtIGEgJiA0Mjk0OTY3Mjk1LCBrLmEgPj4+IGEgLSAzMiB8IGsuYiA8PCA2NCAtIGEgJiA0Mjk0OTY3Mjk1KQogICAgfQoKICAgIGZ1bmN0aW9uIFQoYywgYSkgewogICAgICAgIHZhciBrID0gbnVsbDsKICAgICAgICByZXR1cm4gayA9IDMyID49IGEgPyBuZXcgYihjLmEgPj4+IGEsIGMuYiA+Pj4gYSB8IGMuYSA8PCAzMiAtIGEgJiA0Mjk0OTY3Mjk1KSA6IG5ldyBiKDAsIGMuYSA+Pj4gYSAtIDMyKQogICAgfQoKICAgIGZ1bmN0aW9uIGFhKGMsIGEsIGIpIHsKICAgICAgICByZXR1cm4gYyAmIGEgXiB+YyAmIGIKICAgIH0KCiAgICBmdW5jdGlvbiBiYShjLCBhLCBrKSB7CiAgICAgICAgcmV0dXJuIG5ldyBiKGMuYSAmIGEuYSBeIH5jLmEgJiBrLmEsIGMuYiAmIGEuYiBeIH5jLmIgJiBrLmIpCiAgICB9CgogICAgZnVuY3Rpb24gVShjLCBhLCBiKSB7CiAgICAgICAgcmV0dXJuIGMgJiBhIF4gYyAmIGIgXiBhICYgYgogICAgfQoKICAgIGZ1bmN0aW9uIGNhKGMsIGEsIGspIHsKICAgICAgICByZXR1cm4gbmV3IGIoYy5hICYgYS5hIF4gYy5hICYgay5hIF4gYS5hICYKICAgICAgICAgICAgay5hLCBjLmIgJiBhLmIgXiBjLmIgJiBrLmIgXiBhLmIgJiBrLmIpCiAgICB9CgogICAgZnVuY3Rpb24gZGEoYykgewogICAgICAgIHJldHVybiB3KGMsIDIpIF4gdyhjLCAxMykgXiB3KGMsIDIyKQogICAgfQoKICAgIGZ1bmN0aW9uIGVhKGMpIHsKICAgICAgICB2YXIgYSA9IHQoYywgMjgpLAogICAgICAgICAgICBrID0gdChjLCAzNCk7CiAgICAgICAgYyA9IHQoYywgMzkpOwogICAgICAgIHJldHVybiBuZXcgYihhLmEgXiBrLmEgXiBjLmEsIGEuYiBeIGsuYiBeIGMuYikKICAgIH0KCiAgICBmdW5jdGlvbiBmYShjKSB7CiAgICAgICAgcmV0dXJuIHcoYywgNikgXiB3KGMsIDExKSBeIHcoYywgMjUpCiAgICB9CgogICAgZnVuY3Rpb24gZ2EoYykgewogICAgICAgIHZhciBhID0gdChjLCAxNCksCiAgICAgICAgICAgIGsgPSB0KGMsIDE4KTsKICAgICAgICBjID0gdChjLCA0MSk7CiAgICAgICAgcmV0dXJuIG5ldyBiKGEuYSBeIGsuYSBeIGMuYSwgYS5iIF4gay5iIF4gYy5iKQogICAgfQoKICAgIGZ1bmN0aW9uIGhhKGMpIHsKICAgICAgICByZXR1cm4gdyhjLCA3KSBeIHcoYywgMTgpIF4gYyA+Pj4gMwogICAgfQoKICAgIGZ1bmN0aW9uIGlhKGMpIHsKICAgICAgICB2YXIgYSA9IHQoYywgMSksCiAgICAgICAgICAgIGsgPSB0KGMsIDgpOwogICAgICAgIGMgPSBUKGMsIDcpOwogICAgICAgIHJldHVybiBuZXcgYihhLmEgXiBrLmEgXiBjLmEsIGEuYiBeIGsuYiBeIGMuYikKICAgIH0KCiAgICBmdW5jdGlvbiBqYShjKSB7CiAgICAgICAgcmV0dXJuIHcoYywgMTcpIF4gdyhjLCAxOSkgXiBjID4+PiAxMAogICAgfQoKICAgIGZ1bmN0aW9uIGthKGMpIHsKICAgICAgICB2YXIgYSA9IHQoYywgMTkpLAogICAgICAgICAgICBrID0gdChjLCA2MSk7CiAgICAgICAgYyA9IFQoYywgNik7CiAgICAgICAgcmV0dXJuIG5ldyBiKGEuYSBeIGsuYSBeIGMuYSwgYS5iIF4gay5iIF4gYy5iKQogICAgfQoKICAgIGZ1bmN0aW9uIEcoYywgYSkgewogICAgICAgIHZhciBiID0gKGMgJiA2NTUzNSkgKyAoYSAmIDY1NTM1KTsKICAgICAgICByZXR1cm4gKChjID4+PiAxNikgKyAoYSA+Pj4gMTYpICsgKGIgPj4+IDE2KSAmIDY1NTM1KSA8PCAxNiB8IGIgJiA2NTUzNQogICAgfQoKICAgIGZ1bmN0aW9uIGxhKGMsIGEsIGIsIGUpIHsKICAgICAgICB2YXIgaCA9IChjICYgNjU1MzUpICsgKGEgJiA2NTUzNSkgKyAoYiAmIDY1NTM1KSArIChlICYgNjU1MzUpOwogICAgICAgIHJldHVybiAoKGMgPj4+IDE2KSArIChhID4+PiAxNikgKyAoYiA+Pj4gMTYpICsgKGUgPj4+IDE2KSArIChoID4+PiAxNikgJiA2NTUzNSkgPDwgMTYgfCBoICYgNjU1MzUKICAgIH0KCiAgICBmdW5jdGlvbiBIKGMsIGEsIGIsIGUsIGgpIHsKICAgICAgICB2YXIgZCA9IChjICYgNjU1MzUpICsgKGEgJiA2NTUzNSkgKyAoYiAmIDY1NTM1KSArIChlICYgNjU1MzUpICsgKGggJiA2NTUzNSk7CiAgICAgICAgcmV0dXJuICgoYyA+Pj4gMTYpICsgKGEgPj4+IDE2KSArIChiID4+PiAxNikgKyAoZSA+Pj4gMTYpICsgKGggPj4+IDE2KSArIChkID4+PiAxNikgJiA2NTUzNSkgPDwgMTYgfCBkICYgNjU1MzUKICAgIH0KCiAgICBmdW5jdGlvbiBtYShjLCBhKSB7CiAgICAgICAgdmFyIGQsIGUsIGg7CiAgICAgICAgZCA9IChjLmIgJiA2NTUzNSkgKyAoYS5iICYgNjU1MzUpOwogICAgICAgIGUgPSAoYy5iID4+PiAxNikgKwogICAgICAgICAgICAoYS5iID4+PiAxNikgKyAoZCA+Pj4gMTYpOwogICAgICAgIGggPSAoZSAmIDY1NTM1KSA8PCAxNiB8IGQgJiA2NTUzNTsKICAgICAgICBkID0gKGMuYSAmIDY1NTM1KSArIChhLmEgJiA2NTUzNSkgKyAoZSA+Pj4gMTYpOwogICAgICAgIGUgPSAoYy5hID4+PiAxNikgKyAoYS5hID4+PiAxNikgKyAoZCA+Pj4gMTYpOwogICAgICAgIHJldHVybiBuZXcgYigoZSAmIDY1NTM1KSA8PCAxNiB8IGQgJiA2NTUzNSwgaCkKICAgIH0KCiAgICBmdW5jdGlvbiBuYShjLCBhLCBkLCBlKSB7CiAgICAgICAgdmFyIGgsIG4sIGc7CiAgICAgICAgaCA9IChjLmIgJiA2NTUzNSkgKyAoYS5iICYgNjU1MzUpICsgKGQuYiAmIDY1NTM1KSArIChlLmIgJiA2NTUzNSk7CiAgICAgICAgbiA9IChjLmIgPj4+IDE2KSArIChhLmIgPj4+IDE2KSArIChkLmIgPj4+IDE2KSArIChlLmIgPj4+IDE2KSArIChoID4+PiAxNik7CiAgICAgICAgZyA9IChuICYgNjU1MzUpIDw8IDE2IHwgaCAmIDY1NTM1OwogICAgICAgIGggPSAoYy5hICYgNjU1MzUpICsgKGEuYSAmIDY1NTM1KSArIChkLmEgJiA2NTUzNSkgKyAoZS5hICYgNjU1MzUpICsgKG4gPj4+IDE2KTsKICAgICAgICBuID0gKGMuYSA+Pj4gMTYpICsgKGEuYSA+Pj4gMTYpICsgKGQuYSA+Pj4gMTYpICsgKGUuYSA+Pj4gMTYpICsgKGggPj4+IDE2KTsKICAgICAgICByZXR1cm4gbmV3IGIoKG4gJiA2NTUzNSkgPDwgMTYgfCBoICYgNjU1MzUsIGcpCiAgICB9CgogICAgZnVuY3Rpb24gb2EoYywgYSwgZCwgZSwgaCkgewogICAgICAgIHZhciBuLCBnLCBsOwogICAgICAgIG4gPSAoYy5iICYKICAgICAgICAgICAgNjU1MzUpICsgKGEuYiAmIDY1NTM1KSArIChkLmIgJiA2NTUzNSkgKyAoZS5iICYgNjU1MzUpICsgKGguYiAmIDY1NTM1KTsKICAgICAgICBnID0gKGMuYiA+Pj4gMTYpICsgKGEuYiA+Pj4gMTYpICsgKGQuYiA+Pj4gMTYpICsgKGUuYiA+Pj4gMTYpICsgKGguYiA+Pj4gMTYpICsgKG4gPj4+IDE2KTsKICAgICAgICBsID0gKGcgJiA2NTUzNSkgPDwgMTYgfCBuICYgNjU1MzU7CiAgICAgICAgbiA9IChjLmEgJiA2NTUzNSkgKyAoYS5hICYgNjU1MzUpICsgKGQuYSAmIDY1NTM1KSArIChlLmEgJiA2NTUzNSkgKyAoaC5hICYgNjU1MzUpICsgKGcgPj4+IDE2KTsKICAgICAgICBnID0gKGMuYSA+Pj4gMTYpICsgKGEuYSA+Pj4gMTYpICsgKGQuYSA+Pj4gMTYpICsgKGUuYSA+Pj4gMTYpICsgKGguYSA+Pj4gMTYpICsgKG4gPj4+IDE2KTsKICAgICAgICByZXR1cm4gbmV3IGIoKGcgJiA2NTUzNSkgPDwgMTYgfCBuICYgNjU1MzUsIGwpCiAgICB9CgogICAgZnVuY3Rpb24gQihjLCBhKSB7CiAgICAgICAgcmV0dXJuIG5ldyBiKGMuYSBeIGEuYSwgYy5iIF4gYS5iKQogICAgfQoKICAgIGZ1bmN0aW9uIEEoYykgewogICAgICAgIHZhciBhID0gW10sCiAgICAgICAgICAgIGQ7CiAgICAgICAgaWYgKCJTSEEtMSIgPT09IGMpIGEgPSBbMTczMjU4NDE5MywgNDAyMzIzMzQxNywgMjU2MjM4MzEwMiwgMjcxNzMzODc4LCAzMjg1Mzc3NTIwXTsKICAgICAgICBlbHNlIGlmICgwID09PSBjLmxhc3RJbmRleE9mKCJTSEEtIiwgMCkpIHN3aXRjaCAoYSA9IFszMjM4MzcxMDMyLCA5MTQxNTA2NjMsIDgxMjcwMjk5OSwgNDE0NDkxMjY5NywgNDI5MDc3NTg1NywgMTc1MDYwMzAyNSwgMTY5NDA3NjgzOSwgMzIwNDA3NTQyOF0sIGQgPSBbMTc3OTAzMzcwMywgMzE0NDEzNDI3NywgMTAxMzkwNDI0MiwgMjc3MzQ4MDc2MiwgMTM1OTg5MzExOSwgMjYwMDgyMjkyNCwgNTI4NzM0NjM1LCAxNTQxNDU5MjI1XSwgYykgewogICAgICAgICAgICAgICAgY2FzZSAiU0hBLTIyNCI6CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlICJTSEEtMjU2IjoKICAgICAgICAgICAgICAgICAgICBhID0gZDsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIGNhc2UgIlNIQS0zODQiOgogICAgICAgICAgICAgICAgICAgIGEgPSBbbmV3IGIoMzQxODA3MDM2NSwgYVswXSksIG5ldyBiKDE2NTQyNzAyNTAsIGFbMV0pLCBuZXcgYigyNDM4NTI5MzcwLCBhWzJdKSwgbmV3IGIoMzU1NDYyMzYwLCBhWzNdKSwgbmV3IGIoMTczMTQwNTQxNSwgYVs0XSksIG5ldyBiKDQxMDQ4ODg1ODk1LCBhWzVdKSwgbmV3IGIoMzY3NTAwODUyNSwgYVs2XSksIG5ldyBiKDEyMDMwNjI4MTMsIGFbN10pXTsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIGNhc2UgIlNIQS01MTIiOgogICAgICAgICAgICAgICAgICAgIGEgPSBbbmV3IGIoZFswXSwgNDA4OTIzNTcyMCksIG5ldyBiKGRbMV0sIDIyMjc4NzM1OTUpLAogICAgICAgICAgICAgICAgICAgICAgICBuZXcgYihkWzJdLCA0MjcxMTc1NzIzKSwgbmV3IGIoZFszXSwgMTU5NTc1MDEyOSksIG5ldyBiKGRbNF0sIDI5MTc1NjUxMzcpLCBuZXcgYihkWzVdLCA3MjU1MTExOTkpLCBuZXcgYihkWzZdLCA0MjE1Mzg5NTQ3KSwgbmV3IGIoZFs3XSwgMzI3MDMzMjA5KQogICAgICAgICAgICAgICAgICAgIF07CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgICAgICAgIHRocm93IEVycm9yKCJVbmtub3duIFNIQSB2YXJpYW50Iik7CiAgICAgICAgICAgIH0gZWxzZSBpZiAoMCA9PT0gYy5sYXN0SW5kZXhPZigiU0hBMy0iLCAwKSB8fCAwID09PSBjLmxhc3RJbmRleE9mKCJTSEFLRSIsIDApKQogICAgICAgICAgICAgICAgZm9yIChjID0gMDsgNSA+IGM7IGMgKz0gMSkgYVtjXSA9IFtuZXcgYigwLCAwKSwgbmV3IGIoMCwgMCksIG5ldyBiKDAsIDApLCBuZXcgYigwLCAwKSwgbmV3IGIoMCwgMCldOwogICAgICAgICAgICBlbHNlIHRocm93IEVycm9yKCJObyBTSEEgdmFyaWFudHMgc3VwcG9ydGVkIik7CiAgICAgICAgcmV0dXJuIGEKICAgIH0KCiAgICBmdW5jdGlvbiBLKGMsIGEpIHsKICAgICAgICB2YXIgYiA9IFtdLAogICAgICAgICAgICBlLCBkLCBuLCBnLCBsLCBwLCBmOwogICAgICAgIGUgPSBhWzBdOwogICAgICAgIGQgPSBhWzFdOwogICAgICAgIG4gPSBhWzJdOwogICAgICAgIGcgPSBhWzNdOwogICAgICAgIGwgPSBhWzRdOwogICAgICAgIGZvciAoZiA9IDA7IDgwID4gZjsgZiArPSAxKSBiW2ZdID0gMTYgPiBmID8gY1tmXSA6IHkoYltmIC0KICAgICAgICAgICAgM10gXiBiW2YgLSA4XSBeIGJbZiAtIDE0XSBeIGJbZiAtIDE2XSwgMSksIHAgPSAyMCA+IGYgPyBIKHkoZSwgNSksIGQgJiBuIF4gfmQgJiBnLCBsLCAxNTE4NTAwMjQ5LCBiW2ZdKSA6IDQwID4gZiA\/IEgoeShlLCA1KSwgZCBeIG4gXiBnLCBsLCAxODU5Nzc1MzkzLCBiW2ZdKSA6IDYwID4gZiA\\/IGRlZmluZShmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIEMKICAgIH0pIDogInVuZGVmaW5lZCIgIT09IHR5cGVvZiBleHBvcnRzID8gKCJ1bmRlZmluZWQiICE9PSB0eXBlb2YgbW9kdWxlICYmIG1vZHVsZS5leHBvcnRzICYmIChtb2R1bGUuZXhwb3J0cyA9IEMpLCBleHBvcnRzID0gQykgOiBZLmpzU0hBID0gQwp9KSh0aGlzKTsKCnZhciBDcmVhdGVEb3dubG9hZFRhc2ssIENyZWF0ZURvd25sb2FkVGFza18sIGJyb3dzZXJJbnRlcmZhY2UsIGJ5dGVzVG9TdHJpbmcsIGdfa2V5X2wsIGdfa2V5X3MsIGdfa3RzLCBtMTE1X2FzeW1fZGVjb2RlLCBtMTE1X2FzeW1fZW5jb2RlLCBtMTE1X2RlY29kZSwgbTExNV9lbmNvZGUsIG0xMTVfZ2V0a2V5LCBtMTE1X3N5bV9kZWNvZGUsIG0xMTVfc3ltX2VuY29kZSwgcmVmLCBzdHJpbmdUb0J5dGVzLCB4b3IxMTVfZW5jOwpjbGFzcyBNeVJzYSB7CiAgY29uc3RydWN0b3IgKCkgewogICAgLy8gdGhpcy5uID0gQmlnSW50KCcweDg2ODY5ODBjMGY1YTI0YzRiOWQ0MzAyMGNkMmMyMjcwM2ZmM2Y0NTA3NTY1MjkwNThiMWNmODhmMDliODYwMjEzNjQ3NzE5OGE2ZTI2ODMxNDk2NTliZDEyMmMzMzU5MmZkYjVhZDQ3OTQ0YWQxZWE0ZDM2YzZiMTcyYWFkNjMzOGMzYmI2YWM2MjI3NTAyZDAxMDk5M2FjOTY3ZDFhZWYwMGYwYzhlMDM4ZGUyZTRkM2JjMmVjMzY4YWYyZTlmMTBhNmYxZWRhNGY3MjYyZjEzNjQyMGMwN2MzMzFiODcxYmYxMzlmNzRmMzAxMGUzYzRmZTU3ZGYzYWZiNzE2ODMnKQogICAgLy8gdGhpcy5lID0gQmlnSW50KCcweDEwMDAxJykKICAgIHRoaXMubiA9IGJpZ0ludCgnODY4Njk4MGMwZjVhMjRjNGI5ZDQzMDIwY2QyYzIyNzAzZmYzZjQ1MDc1NjUyOTA1OGIxY2Y4OGYwOWI4NjAyMTM2NDc3MTk4YTZlMjY4MzE0OTY1OWJkMTIyYzMzNTkyZmRiNWFkNDc5NDRhZDFlYTRkMzZjNmIxNzJhYWQ2MzM4YzNiYjZhYzYyMjc1MDJkMDEwOTkzYWM5NjdkMWFlZjAwZjBjOGUwMzhkZTJlNGQzYmMyZWMzNjhhZjJlOWYxMGE2ZjFlZGE0ZjcyNjJmMTM2NDIwYzA3YzMzMWI4NzFiZjEzOWY3NGYzMDEwZTNjNGZlNTdkZjNhZmI3MTY4MycsIDE2KQogICAgdGhpcy5lID0gYmlnSW50KCcxMDAwMScsIDE2KQogIH07CgogIGEyaGV4IChieXRlQXJyYXkpIHsKICAgIHZhciBoZXhTdHJpbmcgPSAnJwogICAgdmFyIG5leHRIZXhCeXRlCiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVBcnJheS5sZW5ndGg7IGkrKykgewogICAgICBuZXh0SGV4Qnl0ZSA9IGJ5dGVBcnJheVtpXS50b1N0cmluZygxNikKICAgICAgaWYgKG5leHRIZXhCeXRlLmxlbmd0aCA8IDIpIHsKICAgICAgICBuZXh0SGV4Qnl0ZSA9ICcwJyArIG5leHRIZXhCeXRlCiAgICAgIH0KICAgICAgaGV4U3RyaW5nICs9IG5leHRIZXhCeXRlCiAgICB9CiAgICByZXR1cm4gaGV4U3RyaW5nCiAgfQoKICBoZXgyYSAoaGV4KSB7CiAgICB2YXIgc3RyID0gJycKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaGV4Lmxlbmd0aDsgaSArPSAyKSB7CiAgICAgIHN0ciArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKHBhcnNlSW50KGhleC5zdWJzdHIoaSwgMiksIDE2KSkKICAgIH0KICAgIHJldHVybiBzdHIKICB9CgogIHBrY3MxcGFkMiAocywgbikgewogICAgaWYgKG4gPCBzLmxlbmd0aCArIDExKSB7CiAgICAgIHJldHVybiBudWxsCiAgICB9CiAgICB2YXIgYmEgPSBbXQogICAgdmFyIGkgPSBzLmxlbmd0aCAtIDEKICAgIHdoaWxlIChpID49IDAgJiYgbiA+IDApIHsKICAgICAgYmFbLS1uXSA9IHMuY2hhckNvZGVBdChpLS0pCiAgICB9CiAgICBiYVstLW5dID0gMAogICAgd2hpbGUgKG4gPiAyKSB7IC8vIHJhbmRvbSBub24temVybyBwYWQKICAgICAgYmFbLS1uXSA9IDB4ZmYKICAgIH0KICAgIGJhWy0tbl0gPSAyCiAgICBiYVstLW5dID0gMAogICAgdmFyIGMgPSB0aGlzLmEyaGV4KGJhKQogICAgcmV0dXJuIGJpZ0ludChjLCAxNikKICB9CgogIHBrY3MxdW5wYWQyIChhKSB7CiAgICB2YXIgYiA9IGEudG9TdHJpbmcoMTYpCiAgICBpZiAoYi5sZW5ndGggJSAyICE9PSAwKSB7CiAgICAgIGIgPSAnMCcgKyBiCiAgICB9CiAgICB2YXIgYyA9IHRoaXMuaGV4MmEoYikKICAgIHZhciBpID0gMQogICAgd2hpbGUgKGMuY2hhckNvZGVBdChpKSAhPT0gMCkgewogICAgICBpKysKICAgIH0KICAgIHJldHVybiBjLnNsaWNlKGkgKyAxKQogIH0KCiAgZW5jcnlwdCAodGV4dCkgewogICAgdmFyIG0gPSB0aGlzLnBrY3MxcGFkMih0ZXh0LCAweDgwKQogICAgdmFyIGMgPSBtLm1vZFBvdyh0aGlzLmUsIHRoaXMubikKICAgIHZhciBoID0gYy50b1N0cmluZygxNikKICAgIHdoaWxlIChoLmxlbmd0aCA8IDB4ODAgKiAyKSB7CiAgICAgIGggPSAnMCcgKyBoCiAgICB9CiAgICByZXR1cm4gaAogIH07CgogIGRlY3J5cHQgKHRleHQpIHsKICAgIHZhciBiYSA9IFtdCiAgICB2YXIgaSA9IDAKICAgIHdoaWxlIChpIDwgdGV4dC5sZW5ndGgpIHsKICAgICAgYmFbaV0gPSB0ZXh0LmNoYXJDb2RlQXQoaSkKICAgICAgaSArPSAxCiAgICB9CiAgICB2YXIgYSA9IGJpZ0ludCh0aGlzLmEyaGV4KGJhKSwgMTYpCiAgICB2YXIgYyA9IGEubW9kUG93KHRoaXMuZSwgdGhpcy5uKQogICAgdmFyIGQgPSB0aGlzLnBrY3MxdW5wYWQyKGMpCiAgICByZXR1cm4gZAogIH07Cn0KCnZhciBuZXdfcnNhID0gbmV3IE15UnNhKCkKCmdfa3RzID0gWzI0MCwgMjI5LCAxMDUsIDE3NCwgMTkxLCAyMjAsIDE5MSwgMTM4LCAyNiwgNjksIDIzMiwgMTkwLCAxMjUsIDE2NiwgMTE1LCAxODQsIDIyMiwgMTQzLCAyMzEsIDE5NiwgNjksIDIxOCwgMTM0LCAxOTYsIDE1NSwgMTAwLCAxMzksIDIwLCAxMDYsIDE4MCwgMjQxLCAxNzAsIDU2LCAxLCA1MywgMTU4LCAzOCwgMTA1LCA0NCwgMTM0LCAwLCAxMDcsIDc5LCAxNjUsIDU0LCA1MiwgOTgsIDE2NiwgNDIsIDE1MCwgMTA0LCAyNCwgMjQyLCA3NCwgMjUzLCAxODksIDEwNywgMTUxLCAxNDMsIDc3LCAxNDMsIDEzNywgMTksIDE4MywgMTA4LCAxNDIsIDE0NywgMjM3LCAxNCwgMTMsIDcyLCA2MiwgMjE1LCA0NywgMTM2LCAyMTYsIDI1NCwgMjU0LCAxMjYsIDEzNCwgODAsIDE0OSwgNzksIDIwOSwgMjM1LCAxMzEsIDM4LCA1MiwgMjE5LCAxMDIsIDEyMywgMTU2LCAxMjYsIDE1NywgMTIyLCAxMjksIDUwLCAyMzQsIDE4MiwgNTEsIDIyMiwgNTgsIDE2OSwgODksIDUyLCAxMDIsIDU5LCAxNzAsIDE4NiwgMTI5LCA5NiwgNzIsIDE4NSwgMjEzLCAxMjksIDE1NiwgMjQ4LCAxMDgsIDEzMiwgMTE5LCAyNTUsIDg0LCAxMjAsIDM4LCA5NSwgMTkwLCAyMzIsIDMwLCA1NCwgMTU5LCA1MiwgMTI4LCA5MiwgNjksIDQ0LCAxNTUsIDExOCwgMjEzLCAyNywgMTQzLCAyMDQsIDE5NSwgMTg0LCAyNDVdOwoKZ19rZXlfcyA9IFsweDI5LCAweDIzLCAweDIxLCAweDVFXTsKCmdfa2V5X2wgPSBbMTIwLCA2LCAxNzMsIDc2LCA1MSwgMTM0LCA5MywgMjQsIDc2LCAxLCA2MywgNzBdOwoKbTExNV9nZXRrZXkgPSBmdW5jdGlvbihsZW5ndGgsIGtleSkgewogIHZhciBpOwogIGlmIChrZXkgIT0gbnVsbCkgewogICAgcmV0dXJuIChmdW5jdGlvbigpIHsKICAgICAgdmFyIGosIHJlZiwgcmVzdWx0czsKICAgICAgcmVzdWx0cyA9IFtdOwogICAgICBmb3IgKGkgPSBqID0gMCwgcmVmID0gbGVuZ3RoOyAoMCA8PSByZWYgPyBqIDwgcmVmIDogaiA+IHJlZik7IGkgPSAwIDw9IHJlZiA\/ICsraiA6IC0taikgewogICAgICAgIHJlc3VsdHMucHVzaCgoKGtleVtpXSArIGdfa3RzW2xlbmd0aCAqIGldKSAmIDB4ZmYpIF4gZ19rdHNbbGVuZ3RoICogKGxlbmd0aCAtIDEgLSBpKV0pOwogICAgICB9CiAgICAgIHJldHVybiByZXN1bHRzOwogICAgfSkoKTsKICB9CiAgaWYgKGxlbmd0aCA9PT0gMTIpIHsKICAgIHJldHVybiBnX2tleV9sLnNsaWNlKDApOwogIH0KICByZXR1cm4gZ19rZXlfcy5zbGljZSgwKTsKfTsKCnhvcjExNV9lbmMgPSBmdW5jdGlvbihzcmMsIHNyY2xlbiwga2V5LCBrZXlsZW4pIHsKICB2YXIgaSwgaiwgaywgbW9kNCwgcmVmLCByZWYxLCByZWYyLCByZXQ7CiAgbW9kNCA9IHNyY2xlbiAlIDQ7CiAgcmV0ID0gW107CiAgaWYgKG1vZDQgIT09IDApIHsKICAgIGZvciAoaSA9IGogPSAwLCByZWYgPSBtb2Q0OyAoMCA8PSByZWYgPyBqIDwgcmVmIDogaiA+IHJlZik7IGkgPSAwIDw9IHJlZiA\/ICsraiA6IC0taikgewogICAgICByZXQucHVzaChzcmNbaV0gXiBrZXlbaSAlIGtleWxlbl0pOwogICAgfQogIH0KICBmb3IgKGkgPSBrID0gcmVmMSA9IG1vZDQsIHJlZjIgPSBzcmNsZW47IChyZWYxIDw9IHJlZjIgPyBrIDwgcmVmMiA6IGsgPiByZWYyKTsgaSA9IHJlZjEgPD0gcmVmMiA\/ICsrayA6IC0taykgewogICAgcmV0LnB1c2goc3JjW2ldIF4ga2V5WyhpIC0gbW9kNCkgJSBrZXlsZW5dKTsKICB9CiAgcmV0dXJuIHJldDsKfTsKCm0xMTVfc3ltX2VuY29kZSA9IGZ1bmN0aW9uKHNyYywgc3JjbGVuLCBrZXkxLCBrZXkyKSB7CiAgdmFyIGsxLCBrMiwgcmV0OwogIGsxID0gbTExNV9nZXRrZXkoNCwga2V5MSk7CiAgazIgPSBtMTE1X2dldGtleSgxMiwga2V5Mik7CiAgcmV0ID0geG9yMTE1X2VuYyhzcmMsIHNyY2xlbiwgazEsIDQpOwogIHJldC5yZXZlcnNlKCk7CiAgcmV0ID0geG9yMTE1X2VuYyhyZXQsIHNyY2xlbiwgazIsIDEyKTsKICByZXR1cm4gcmV0Owp9OwoKbTExNV9zeW1fZGVjb2RlID0gZnVuY3Rpb24oc3JjLCBzcmNsZW4sIGtleTEsIGtleTIpIHsKICB2YXIgazEsIGsyLCByZXQ7CiAgazEgPSBtMTE1X2dldGtleSg0LCBrZXkxKTsKICBrMiA9IG0xMTVfZ2V0a2V5KDEyLCBrZXkyKTsKICByZXQgPSB4b3IxMTVfZW5jKHNyYywgc3JjbGVuLCBrMiwgMTIpOwogIHJldC5yZXZlcnNlKCk7CiAgcmV0ID0geG9yMTE1X2VuYyhyZXQsIHNyY2xlbiwgazEsIDQpOwogIHJldHVybiByZXQ7Cn07CgpzdHJpbmdUb0J5dGVzID0gZnVuY3Rpb24ocykgewogIHZhciBpLCBqLCByZWYsIHJldDsKICByZXQgPSBbXTsKICBmb3IgKGkgPSBqID0gMCwgcmVmID0gcy5sZW5ndGg7ICgwIDw9IHJlZiA\/IGogPCByZWYgOiBqID4gcmVmKTsgaSA9IDAgPD0gcmVmID8gKytqIDogLS1qKSB7CiAgICByZXQucHVzaChzLmNoYXJDb2RlQXQoaSkpOwogIH0KICByZXR1cm4gcmV0Owp9OwoKYnl0ZXNUb1N0cmluZyA9IGZ1bmN0aW9uKGIpIHsKICB2YXIgaSwgaiwgbGVuLCByZXQ7CiAgcmV0ID0gJyc7CiAgZm9yIChqID0gMCwgbGVuID0gYi5sZW5ndGg7IGogPCBsZW47IGorKykgewogICAgaSA9IGJbal07CiAgICByZXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShpKTsKICB9CiAgcmV0dXJuIHJldDsKfTsKCgptMTE1X2FzeW1fZW5jb2RlID0gZnVuY3Rpb24oc3JjLCBzcmNsZW4pIHsKICB2YXIgaSwgaiwgbSwgcmVmLCByZXQKICBtID0gMTI4IC0gMTE7CiAgcmV0ID0gJyc7CiAgZm9yIChpID0gaiA9IDAsIHJlZiA9IE1hdGguZmxvb3IoKHNyY2xlbiArIG0gLSAxKSAvIG0pOyAoMCA8PSByZWYgPyBqIDwgcmVmIDogaiA+IHJlZik7IGkgPSAwIDw9IHJlZiA\/ICsraiA6IC0taikgewogICAgcmV0ICs9IG5ld19yc2EuZW5jcnlwdChieXRlc1RvU3RyaW5nKHNyYy5zbGljZShpICogbSwgTWF0aC5taW4oKGkgKyAxKSAqIG0sIHNyY2xlbikpKSk7CiAgfQogIHJldHVybiB3aW5kb3cuYnRvYShuZXdfcnNhLmhleDJhKHJldCkpOwp9OwoKbTExNV9hc3ltX2RlY29kZSA9IGZ1bmN0aW9uKHNyYywgc3JjbGVuKSB7CiAgdmFyIGksIGosIG0sIHJlZiwgcmV0OwogIG0gPSAxMjg7CiAgcmV0ID0gJyc7CiAgZm9yIChpID0gaiA9IDAsIHJlZiA9IE1hdGguZmxvb3IoKHNyY2xlbiArIG0gLSAxKSAvIG0pOyAoMCA8PSByZWYgPyBqIDwgcmVmIDogaiA+IHJlZik7IGkgPSAwIDw9IHJlZiA\\/IHRoaXMuZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudCA6IHRoaXMuZnJhbWUsCiAgICAgICAgICAgIGNvbmZpZ0lkID0gdGhpcy5pZDsKCiAgICAgICAgdmFyIGN1clRhYiA9IHR5cGVvZiBlID09ICdudW1iZXInID8gZSA6IC9cXyhcZCspLy5leGVjKGUudGFyZ2V0LmlkKVsxXTsKCiAgICAgICAgW10uZm9yRWFjaC5jYWxsKGJvZHkucXVlcnlTZWxlY3RvckFsbCgnLnNlY3Rpb25faGVhZGVyJyksIGZ1bmN0aW9uIChoZWFkZXIsIGkpIHsKICAgICAgICAgICAgaWYgKGkgPT0gY3VyVGFiKSB7CiAgICAgICAgICAgICAgICBoZWFkZXIuY2xhc3NMaXN0LmFkZCgnYWN0aXZlJyk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBoZWFkZXIuY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJyk7CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKCiAgICAgICAgW10uZm9yRWFjaC5jYWxsKGJvZHkucXVlcnlTZWxlY3RvckFsbCgnLnNlY3Rpb25faGVhZGVyX2hvbGRlcicpLCBmdW5jdGlvbiAoaG9sZGVyLCBpKSB7CiAgICAgICAgICAgIGhvbGRlci5zdHlsZS5kaXNwbGF5ID0gKGkgPT0gY3VyVGFiKSA\/ICdibG9jaycgOiAnbm9uZSc7CiAgICAgICAgfSk7CgogICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdwaWN2aWV3ZXJDRS5jb25maWcuY3VyVGFiJywgY3VyVGFiKQogICAgfQp9OwoKLy8gRGVmaW5lIGEgYnVuY2ggb2YgQVBJIHN0dWZmCihmdW5jdGlvbiAoKSB7CiAgICB2YXIgaXNHTSA9IHR5cGVvZiBHTV9nZXRWYWx1ZSAhPSAndW5kZWZpbmVkJyAmJgogICAgICAgIHR5cGVvZiBHTV9nZXRWYWx1ZSgnYScsICdiJykgIT0gJ3VuZGVmaW5lZCcsCiAgICAgICAgc2V0VmFsdWUsIGdldFZhbHVlLCBzdHJpbmdpZnksIHBhcnNlcjsKCiAgICAvLyBEZWZpbmUgdmFsdWUgc3RvcmluZyBhbmQgcmVhZGluZyBBUEkKICAgIGlmICghaXNHTSkgewogICAgICAgIHNldFZhbHVlID0gZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7CiAgICAgICAgICAgIHJldHVybiBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShuYW1lLCB2YWx1ZSk7CiAgICAgICAgfTsKICAgICAgICBnZXRWYWx1ZSA9IGZ1bmN0aW9uIChuYW1lLCBkZWYpIHsKICAgICAgICAgICAgdmFyIHMgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShuYW1lKTsKICAgICAgICAgICAgcmV0dXJuIHMgPT0gbnVsbCA\/IGRlZiA6IHMKICAgICAgICB9OwoKICAgICAgICAvLyBXZSBvbmx5IHN1cHBvcnQgSlNPTiBwYXJzZXIgb3V0c2lkZSBHTQogICAgICAgIHN0cmluZ2lmeSA9IEpTT04uc3RyaW5naWZ5OwogICAgICAgIHBhcnNlciA9IEpTT04ucGFyc2U7CiAgICB9IGVsc2UgewogICAgICAgIHNldFZhbHVlID0gR01fc2V0VmFsdWU7CiAgICAgICAgZ2V0VmFsdWUgPSBHTV9nZXRWYWx1ZTsKICAgICAgICBzdHJpbmdpZnkgPSB0eXBlb2YgSlNPTiA9PSAidW5kZWZpbmVkIiA\/CiAgICAgICAgICAgIGZ1bmN0aW9uIChvYmopIHsKICAgICAgICAgICAgICAgIHJldHVybiBvYmoudG9Tb3VyY2UoKTsKICAgICAgICAgICAgfSA6IEpTT04uc3RyaW5naWZ5OwogICAgICAgIHBhcnNlciA9IHR5cGVvZiBKU09OID09ICJ1bmRlZmluZWQiID8KICAgICAgICAgICAgZnVuY3Rpb24gKGpzb25EYXRhKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gKG5ldyBGdW5jdGlvbigncmV0dXJuICcgKyBqc29uRGF0YSArICc7JykpKCk7CiAgICAgICAgICAgIH0gOiBKU09OLnBhcnNlOwogICAgfQoKICAgIEdNX2NvbmZpZ1N0cnVjdC5wcm90b3R5cGUuaXNHTSA9IGlzR007CiAgICBHTV9jb25maWdTdHJ1Y3QucHJvdG90eXBlLnNldFZhbHVlID0gc2V0VmFsdWU7CiAgICBHTV9jb25maWdTdHJ1Y3QucHJvdG90eXBlLmdldFZhbHVlID0gZ2V0VmFsdWU7CiAgICBHTV9jb25maWdTdHJ1Y3QucHJvdG90eXBlLnN0cmluZ2lmeSA9IHN0cmluZ2lmeTsKICAgIEdNX2NvbmZpZ1N0cnVjdC5wcm90b3R5cGUucGFyc2VyID0gcGFyc2VyOwogICAgR01fY29uZmlnU3RydWN0LnByb3RvdHlwZS5sb2cgPSB3aW5kb3cuY29uc29sZSA\/CiAgICAgICAgY29uc29sZS5sb2cgOiAoaXNHTSAmJiB0eXBlb2YgR01fbG9nICE9ICd1bmRlZmluZWQnID8KICAgICAgICAgICAgR01fbG9nIDogKHdpbmRvdy5vcGVyYSA\/CiAgICAgICAgICAgICAgICBvcGVyYS5wb3N0RXJyb3IgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgLyogbm8gbG9nZ2luZyAqLwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICApKTsKfSkoKTsKCmZ1bmN0aW9uIEdNX2NvbmZpZ0RlZmF1bHRWYWx1ZSh0eXBlLCBvcHRpb25zKSB7CiAgICB2YXIgdmFsdWU7CgogICAgaWYgKHR5cGUgJiYgdHlwZS5pbmRleE9mKCd1bnNpZ25lZCAnKSA9PSAwKQogICAgICAgIHR5cGUgPSB0eXBlLnN1YnN0cmluZyg5KTsKCiAgICBzd2l0Y2ggKHR5cGUpIHsKICAgICAgICBjYXNlICdyYWRpbyc6CiAgICAgICAgY2FzZSAnc2VsZWN0JzoKICAgICAgICAgICAgdmFsdWUgPSBvcHRpb25zWzBdOwogICAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlICdjaGVja2JveCc6CiAgICAgICAgICAgIHZhbHVlID0gZmFsc2U7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgJ2ludCc6CiAgICAgICAgY2FzZSAnaW50ZWdlcic6CiAgICAgICAgY2FzZSAnZmxvYXQnOgogICAgICAgIGNhc2UgJ251bWJlcic6CiAgICAgICAgICAgIHZhbHVlID0gMDsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgdmFsdWUgPSAnJzsKICAgIH0KCiAgICByZXR1cm4gdmFsdWU7Cn0KCmZ1bmN0aW9uIEdNX2NvbmZpZ0ZpZWxkKHNldHRpbmdzLCBzdG9yZWQsIGlkLCBjdXN0b21UeXBlKSB7CiAgICAvLyBTdG9yZSB0aGUgZmllbGQncyBzZXR0aW5ncwogICAgdGhpcy5zZXR0aW5ncyA9IHNldHRpbmdzOwogICAgdGhpcy5pZCA9IGlkOwogICAgdGhpcy5ub2RlID0gbnVsbDsKICAgIHRoaXMud3JhcHBlciA9IG51bGw7CiAgICB0aGlzLnNhdmUgPSB0eXBlb2Ygc2V0dGluZ3Muc2F2ZSA9PSAidW5kZWZpbmVkIiA\/IHRydWUgOiBzZXR0aW5ncy5zYXZlOwoKICAgIC8vIEJ1dHRvbnMgYXJlIHN0YXRpYyBhbmQgZG9uJ3QgaGF2ZSBhIHN0b3JlZCB2YWx1ZQogICAgaWYgKHNldHRpbmdzLnR5cGUgPT0gImJ1dHRvbiIpIHRoaXMuc2F2ZSA9IGZhbHNlOwogICAgaWYgKHNldHRpbmdzLnR5cGUgPT0gInNwYW4iKSB0aGlzLnNhdmUgPSBmYWxzZTsKCiAgICAvLyBpZiBhIGRlZmF1bHQgdmFsdWUgd2Fzbid0IHBhc3NlZCB0aHJvdWdoIGluaXQoKSB0aGVuCiAgICAvLyAgIGlmIHRoZSB0eXBlIGlzIGN1c3RvbSB1c2UgaXRzIGRlZmF1bHQgdmFsdWUKICAgIC8vICAgZWxzZSB1c2UgZGVmYXVsdCB2YWx1ZSBmb3IgdHlwZQogICAgLy8gZWxzZSB1c2UgdGhlIGRlZmF1bHQgdmFsdWUgcGFzc2VkIHRocm91Z2ggaW5pdCgpCiAgICB0aGlzWydkZWZhdWx0J10gPSB0eXBlb2Ygc2V0dGluZ3NbJ2RlZmF1bHQnXSA9PSAidW5kZWZpbmVkIiA\/CiAgICAgICAgY3VzdG9tVHlwZSA\/CiAgICAgICAgY3VzdG9tVHlwZVsnZGVmYXVsdCddIDoKICAgICAgICBHTV9jb25maWdEZWZhdWx0VmFsdWUoc2V0dGluZ3MudHlwZSwgc2V0dGluZ3Mub3B0aW9ucykgOgogICAgICAgIHNldHRpbmdzWydkZWZhdWx0J107CgogICAgLy8gU3RvcmUgdGhlIGZpZWxkJ3MgdmFsdWUKICAgIHRoaXMudmFsdWUgPSB0eXBlb2Ygc3RvcmVkID09ICJ1bmRlZmluZWQiID8gdGhpc1snZGVmYXVsdCddIDogc3RvcmVkOwoKICAgIC8vIFNldHVwIG1ldGhvZHMgZm9yIGEgY3VzdG9tIHR5cGUKICAgIGlmIChjdXN0b21UeXBlKSB7CiAgICAgICAgdGhpcy50b05vZGUgPSBjdXN0b21UeXBlLnRvTm9kZTsKICAgICAgICB0aGlzLnRvVmFsdWUgPSBjdXN0b21UeXBlLnRvVmFsdWU7CiAgICAgICAgdGhpcy5yZXNldCA9IGN1c3RvbVR5cGUucmVzZXQ7CiAgICB9Cn0KCkdNX2NvbmZpZ0ZpZWxkLnByb3RvdHlwZSA9IHsKICAgIGNyZWF0ZTogR01fY29uZmlnU3RydWN0LnByb3RvdHlwZS5jcmVhdGUsCgogICAgdG9Ob2RlOiBmdW5jdGlvbiAoY29uZmlnSWQsIGxhc3RQYXJlbnROb2RlKSB7CiAgICAgICAgdmFyIGZpZWxkID0gdGhpcy5zZXR0aW5ncywKICAgICAgICAgICAgdmFsdWUgPSB0aGlzLnZhbHVlLAogICAgICAgICAgICBvcHRpb25zID0gZmllbGQub3B0aW9ucywKICAgICAgICAgICAgdHlwZSA9IGZpZWxkLnR5cGUsCiAgICAgICAgICAgIGlkID0gdGhpcy5pZCwKICAgICAgICAgICAgbGFiZWxQb3MgPSBmaWVsZC5sYWJlbFBvcywKICAgICAgICAgICAgY3JlYXRlID0gdGhpcy5jcmVhdGU7CgogICAgICAgIGZ1bmN0aW9uIGFkZExhYmVsKHBvcywgbGFiZWxFbCwgcGFyZW50Tm9kZSwgYmVmb3JlRWwpIHsKICAgICAgICAgICAgaWYgKCFiZWZvcmVFbCkgewogICAgICAgICAgICAgICAgYmVmb3JlRWwgPSBsYXN0UGFyZW50Tm9kZSA\/IHBhcmVudE5vZGUubGFzdENoaWxkIDogcGFyZW50Tm9kZS5maXJzdENoaWxkOyAvLyBvbmVMaW5lIOeahOS\/ruatowogICAgICAgICAgICB9CgogICAgICAgICAgICBzd2l0Y2ggKHBvcykgewogICAgICAgICAgICAgICAgY2FzZSAncmlnaHQnOgogICAgICAgICAgICAgICAgY2FzZSAnYmVsb3cnOgogICAgICAgICAgICAgICAgICAgIGlmIChwb3MgPT0gJ2JlbG93JykKICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50Tm9kZS5hcHBlbmRDaGlsZChjcmVhdGUoJ2JyJywge30pKTsKICAgICAgICAgICAgICAgICAgICBwYXJlbnROb2RlLmFwcGVuZENoaWxkKGxhYmVsRWwpOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgICAgICAgICBpZiAocG9zID09ICdhYm92ZScpCiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGNyZWF0ZSgnYnInLCB7fSksIGJlZm9yZUVsKTsKICAgICAgICAgICAgICAgICAgICBwYXJlbnROb2RlLmluc2VydEJlZm9yZShsYWJlbEVsLCBiZWZvcmVFbCk7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHZhciByZXROb2RlID0gY3JlYXRlKCdkaXYnLCB7CiAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICdjb25maWdfdmFyJywKICAgICAgICAgICAgICAgIGlkOiBjb25maWdJZCArICdfJyArIGlkICsgJ192YXInLAogICAgICAgICAgICAgICAgdGl0bGU6IGZpZWxkLnRpdGxlIHx8ICcnCiAgICAgICAgICAgIH0pLAogICAgICAgICAgICBmaXJzdFByb3A7CgogICAgICAgIC8vIFJldHJpZXZlIHRoZSBmaXJzdCBwcm9wCiAgICAgICAgZm9yICh2YXIgaSBpbiBmaWVsZCkgewogICAgICAgICAgICBmaXJzdFByb3AgPSBpOwogICAgICAgICAgICBicmVhazsKICAgICAgICB9CgogICAgICAgIHZhciBsYWJlbCA9IGZpZWxkLmxhYmVsICYmIHR5cGUgIT0gImJ1dHRvbiIgPwogICAgICAgICAgICBjcmVhdGUoJ2xhYmVsJywgewogICAgICAgICAgICAgICAgaWQ6IGNvbmZpZ0lkICsgJ18nICsgaWQgKyAnX2ZpZWxkX2xhYmVsJywKICAgICAgICAgICAgICAgIGZvcjogY29uZmlnSWQgKyAnX2ZpZWxkXycgKyBpZCwKICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ2ZpZWxkX2xhYmVsJwogICAgICAgICAgICB9LCBmaWVsZC5sYWJlbCkgOiBudWxsOwoKICAgICAgICBzd2l0Y2ggKHR5cGUpIHsKICAgICAgICAgICAgY2FzZSAnc3Bhbic6CiAgICAgICAgICAgICAgICBsYWJlbCA9IG51bGw7CgogICAgICAgICAgICAgICAgdGhpcy5ub2RlID0gY3JlYXRlKCdzcGFuJywgewogICAgICAgICAgICAgICAgICAgIGlubmVySFRNTDogZmllbGQubGFiZWwsCiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnZmllbGRfbGFiZWwnLAogICAgICAgICAgICAgICAgICAgIHRpdGxlOiBmaWVsZC50aXRsZSwKICAgICAgICAgICAgICAgICAgICBzdHlsZTogZmllbGQuc3R5bGUKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgcmV0Tm9kZSA9IHRoaXMubm9kZTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlICd0ZXh0YXJlYSc6CiAgICAgICAgICAgICAgICByZXROb2RlLmFwcGVuZENoaWxkKCh0aGlzLm5vZGUgPSBjcmVhdGUoJ3RleHRhcmVhJywgewogICAgICAgICAgICAgICAgICAgIGlubmVySFRNTDogdmFsdWUsCiAgICAgICAgICAgICAgICAgICAgaWQ6IGNvbmZpZ0lkICsgJ19maWVsZF8nICsgaWQsCiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnYmxvY2snICsgKGZpZWxkLmNsYXNzTmFtZSA\/ICgiICIgKyBmaWVsZC5jbGFzc05hbWUpIDogJycpLAogICAgICAgICAgICAgICAgICAgIGNvbHM6IChmaWVsZC5jb2xzID8gZmllbGQuY29scyA6IDIwKSwKICAgICAgICAgICAgICAgICAgICByb3dzOiAoZmllbGQucm93cyA\/IGZpZWxkLnJvd3MgOiAyKSwKICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogZmllbGQucGxhY2Vob2xkZXIKICAgICAgICAgICAgICAgIH0pKSk7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgY2FzZSAncmFkaW8nOgogICAgICAgICAgICAgICAgdmFyIHdyYXAgPSBjcmVhdGUoJ2RpdicsIHsKICAgICAgICAgICAgICAgICAgICBpZDogY29uZmlnSWQgKyAnX2ZpZWxkXycgKyBpZCwKICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6IGZpZWxkLmNsYXNzTmFtZQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB0aGlzLm5vZGUgPSB3cmFwOwoKICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBvcHRpb25zLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIHJhZExhYmVsID0gY3JlYXRlKCdsYWJlbCcsIHsKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAncmFkaW9fbGFiZWwnCiAgICAgICAgICAgICAgICAgICAgfSwgb3B0aW9uc1tpXSk7CgogICAgICAgICAgICAgICAgICAgIHZhciByYWQgPSB3cmFwLmFwcGVuZENoaWxkKGNyZWF0ZSgnaW5wdXQnLCB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBvcHRpb25zW2ldLAogICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAncmFkaW8nLAogICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBpZCwKICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tlZDogb3B0aW9uc1tpXSA9PSB2YWx1ZQogICAgICAgICAgICAgICAgICAgIH0pKTsKCiAgICAgICAgICAgICAgICAgICAgdmFyIHJhZExhYmVsUG9zID0gbGFiZWxQb3MgJiYKICAgICAgICAgICAgICAgICAgICAgICAgKGxhYmVsUG9zID09ICdsZWZ0JyB8fCBsYWJlbFBvcyA9PSAncmlnaHQnKSA\/CiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsUG9zIDogZmlyc3RQcm9wID09ICdvcHRpb25zJyA\/ICdsZWZ0JyA6ICdyaWdodCc7CgogICAgICAgICAgICAgICAgICAgIGFkZExhYmVsKHJhZExhYmVsUG9zLCByYWRMYWJlbCwgd3JhcCwgcmFkKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICByZXROb2RlLmFwcGVuZENoaWxkKHdyYXApOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGNhc2UgJ3NlbGVjdCc6CiAgICAgICAgICAgICAgICB2YXIgd3JhcCA9IGNyZWF0ZSgnc2VsZWN0JywgewogICAgICAgICAgICAgICAgICAgIGlkOiBjb25maWdJZCArICdfZmllbGRfJyArIGlkCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIHRoaXMubm9kZSA9IHdyYXA7CgogICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IG9wdGlvbnMubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgb3B0aW9uID0gb3B0aW9uc1tpXTsKICAgICAgICAgICAgICAgICAgICB3cmFwLmFwcGVuZENoaWxkKGNyZWF0ZSgnb3B0aW9uJywgewogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogb3B0aW9uLAogICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZDogb3B0aW9uID09IHZhbHVlCiAgICAgICAgICAgICAgICAgICAgfSwgb3B0aW9uKSk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgcmV0Tm9kZS5hcHBlbmRDaGlsZCh3cmFwKTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBkZWZhdWx0OiAvLyBmaWVsZHMgdXNpbmcgaW5wdXQgZWxlbWVudHMKICAgICAgICAgICAgICAgIHZhciBwcm9wcyA9IHsKICAgICAgICAgICAgICAgICAgICBpZDogY29uZmlnSWQgKyAnX2ZpZWxkXycgKyBpZCwKICAgICAgICAgICAgICAgICAgICB0eXBlOiB0eXBlLAogICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0eXBlID09ICdidXR0b24nID8gZmllbGQubGFiZWwgOiB2YWx1ZQogICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICBzd2l0Y2ggKHR5cGUpIHsKICAgICAgICAgICAgICAgICAgICBjYXNlICdjaGVja2JveCc6CiAgICAgICAgICAgICAgICAgICAgICAgIHByb3BzLmNoZWNrZWQgPSB2YWx1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgY2FzZSAnYnV0dG9uJzoKICAgICAgICAgICAgICAgICAgICAgICAgcHJvcHMuc2l6ZSA9IGZpZWxkLnNpemUgPyBmaWVsZC5zaXplIDogMjU7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaWVsZC5zY3JpcHQpIGZpZWxkLmNsaWNrID0gZmllbGQuc2NyaXB0OwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmllbGQuY2xpY2spIHByb3BzLm9uY2xpY2sgPSBmaWVsZC5jbGljazsKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgY2FzZSAnaGlkZGVuJzoKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgICAgICAgICAgICAgLy8gdHlwZSA9IHRleHQsIGludCwgb3IgZmxvYXQKICAgICAgICAgICAgICAgICAgICAgICAgcHJvcHMudHlwZSA9ICd0ZXh0JzsKICAgICAgICAgICAgICAgICAgICAgICAgcHJvcHMuc2l6ZSA9IGZpZWxkLnNpemUgPyBmaWVsZC5zaXplIDogMjU7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgcmV0Tm9kZS5hcHBlbmRDaGlsZCgodGhpcy5ub2RlID0gY3JlYXRlKCdpbnB1dCcsIHByb3BzKSkpOwogICAgICAgIH0KCiAgICAgICAgaWYgKGxhYmVsKSB7CiAgICAgICAgICAgIC8vIElmIHRoZSBsYWJlbCBpcyBwYXNzZWQgZmlyc3QsIGluc2VydCBpdCBiZWZvcmUgdGhlIGZpZWxkCiAgICAgICAgICAgIC8vIGVsc2UgaW5zZXJ0IGl0IGFmdGVyCiAgICAgICAgICAgIGlmICghbGFiZWxQb3MpCiAgICAgICAgICAgICAgICBsYWJlbFBvcyA9IGZpcnN0UHJvcCA9PSAibGFiZWwiIHx8IHR5cGUgPT0gInJhZGlvIiA\\/niYjmnKzkv6Hmga8KICAgIGNvbnN0IFRJUFMgPSB7CiAgICAgICAgQ3VycmVudFZlcnNpb246ICIxNDMuMjAyMi4wNDAyLjEiLAogICAgICAgIExhc3RVcGRhdGVEYXRlOiAiMjAyMi4wNC4wMiIsCiAgICAgICAgVmVyc2lvblRpcHM6ICIxMTXovazlrZjliqnmiYt1aeS8mOWMlueJiCB2My41IiwKICAgICAgICBVcGRhdGVVcmw6ICJodHRwczovL2dpc3QuZ2l0aHViLmNvbS9OZXJ2ZXI0RXZlci85NTM0NDdjOWVjZDMzMGZmYzA4NjFkNGNiYjgzOTM2OSIsCiAgICAgICAgU2hhMUZpbGVJbnB1dERldGFpbHM6ICIiLAogICAgfTsKCiAgICBjb25zdCBXT1JLU0VUVElOR1MgPSB7CiAgICAgICAgV29ya2luZ0l0ZW1zTnVtYmVyOiA0LCAvL+WQjOaXtuaJp+ihjOS7u+WKoeaVsAogICAgICAgIFNsZWVwTGl0dGxlVGltZTogNTAwLCAvL+efreaaguS8keecoCzmr6vnp5Is5pqC5pe25Zyo6L2s5a2Y5Lit5L2\/55SoCiAgICAgICAgU2xlZXBNb3JlVGltZTogMTAwMCwgLy\/plb\/ml7bkvJHnnKAs5q+r56eSLOaaguaXtuWcqOaPkOWPluS4reS9v+eUqAogICAgICAgIFNsZWVwTXVjaE1vcmVUaW1lOiA4MDAwLCAvL+i2hemVv+S8keecoCzmmoLml7bmnKrkvb\/nlKgKICAgICAgICBBTnVtYmVyOiAyNywgLy\/pmo\/mnLrmlbAs5pqC5pe25pyq5L2\/55SoCiAgICB9OwoKICAgIEdNX2FkZFN0eWxlKGAKICAgIEBrZXlmcmFtZXMgaHVlIHsKICAgICAgICBmcm9tIHsKICAgICAgICAgICAgZmlsdGVyOiBodWUtcm90YXRlKDApOwogICAgICAgIH0KCiAgICAgICAgdG8gewogICAgICAgICAgICBmaWx0ZXI6IGh1ZS1yb3RhdGUoMzYwZGVnKTsKICAgICAgICB9CiAgICB9CgogICAgLnJhaW5ib3ctdGV4dCB7CiAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrOwogICAgICAgIGNvbG9yOiByZWQ7CiAgICAgICAgYW5pbWF0aW9uOiBodWUgNnMgbGluZWFyIGluZmluaXRlOwogICAgICAgIGJhY2tncm91bmQtaW1hZ2U6IGxpbmVhci1ncmFkaWVudCh0byByaWdodCBib3R0b20sIHJnYigyNTUsMCwwKSwgcmdiKDI1NSwyNTUsMCkscmdiKDI1NSwwLDI1NSkpOwogICAgICAgIC13ZWJraXQtYmFja2dyb3VuZC1jbGlwOiB0ZXh0OwogICAgfQoKICAgICAgICAubXkxMTVJbmZvewogICAgICAgICAgICBjb2xvcjpyZWQKICAgICAgICB9CiAgICAgICAgLmJ0bkluR3JpZHsKICAgICAgICAgICAgaGVpZ2h0OjIwcHg7CiAgICAgICAgICAgIHdpZHRoOjIwcHg7CiAgICAgICAgICAgIG1hcmdpbi1sZWZ0Oi0yMnB4OwogICAgICAgICAgICBtYXJnaW4tdG9wOjM2cHg7CiAgICAgICAgICAgIGJvcmRlcjowcHg7CiAgICAgICAgICAgIGJvcmRlci1jb2xvcjp0cmFuc3BhcmVudDsKICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjp0cmFuc3BhcmVudDsKICAgICAgICB9CgogICAgICAgIC5idG5JbkdyaWQgaXsKICAgICAgICAgICAgbWFyZ2luOjNweCAtM3B4CiAgICAgICAgfQoKICAgICAgICBsaTpob3ZlciAuYnRuSW5HcmlkewogICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiMyNzc3RjggIWltcG9ydGFudAogICAgICAgIH0KCgoKICAgICAgICAvKiBTdHlsZSBUaGUgRHJvcGRvd24gQnV0dG9uICovCiAgICAgICAgLm15MTE1RHJvcGJ0biB7CiAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjc3N0Y4OwogICAgICAgICAgY29sb3I6IHdoaXRlOwogICAgICAgICAgZm9udC1zaXplOiAxNnB4OwogICAgICAgICAgYm9yZGVyOiBub25lOwogICAgICAgICAgY3Vyc29yOiBwb2ludGVyOwogICAgICAgIH0KCiAgICAgICAgLyogVGhlIGNvbnRhaW5lciA8ZGl2PiAtIG5lZWRlZCB0byBwb3NpdGlvbiB0aGUgZHJvcGRvd24gY29udGVudCAqLwogICAgICAgIC5teTExNURyb3Bkb3duIHsKICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTsKICAgICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jazsKICAgICAgICB9CgogICAgICAgIC8qIERyb3Bkb3duIENvbnRlbnQgKEhpZGRlbiBieSBEZWZhdWx0KSAqLwogICAgICAgIC5teTExNURyb3Bkb3duLWNvbnRlbnQgewogICAgICAgICAgZGlzcGxheTogbm9uZTsKICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmOWY5Zjk7CiAgICAgICAgICBtaW4td2lkdGg6IDIzMHB4OwogICAgICAgICAgYm94LXNoYWRvdzogMHB4IDhweCAxNnB4IDBweCByZ2JhKDAsMCwwLDAuMik7CiAgICAgICAgICB6LWluZGV4OiAxOwogICAgICAgICAgbWFyZ2luLXRvcDogMzJweDsKICAgICAgICB9CgogICAgICAgIC8qIExpbmtzIGluc2lkZSB0aGUgZHJvcGRvd24gKi8KICAgICAgICAubXkxMTVEcm9wZG93bi1jb250ZW50IGEgewogICAgICAgICAgY29sb3I6IGJsYWNrOwogICAgICAgICAgcGFkZGluZzogMTJweCAxNnB4OwogICAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lOwogICAgICAgICAgZGlzcGxheTogYmxvY2s7CiAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7CiAgICAgICAgICBtYXJnaW46NHB4OwogICAgICAgIH0KCiAgICAgICAgLyogQ2hhbmdlIGNvbG9yIG9mIGRyb3Bkb3duIGxpbmtzIG9uIGhvdmVyICovCiAgICAgICAgLm15MTE1RHJvcGRvd24tY29udGVudCBhOmhvdmVyewogICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjc3N0Y4OwogICAgICAgICAgICBjb2xvcjp3aGl0ZTsKICAgICAgICB9CgogICAgICAgIC8qIFNob3cgdGhlIGRyb3Bkb3duIG1lbnUgb24gaG92ZXIgKi8KICAgICAgICAubXkxMTVEcm9wZG93bjpob3ZlciAubXkxMTVEcm9wZG93bi1jb250ZW50IHsKICAgICAgICAgIGRpc3BsYXk6IGJsb2NrOwogICAgICAgIH0KCiAgICAgICAgLyogQ2hhbmdlIHRoZSBiYWNrZ3JvdW5kIGNvbG9yIG9mIHRoZSBkcm9wZG93biBidXR0b24gd2hlbiB0aGUgZHJvcGRvd24gY29udGVudCBpcyBzaG93biAqLwogICAgICAgIC5teTExNURyb3Bkb3duOmhvdmVyIC5teTExNURyb3BidG4gewogICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogIzNlOGU0MTsKICAgICAgICB9CgogICAgYCk7CgogICAgZnVuY3Rpb24gZ2V0RW52aXJvbWVudEluZm8oKSB7CiAgICAgICAgcmV0dXJuIGAKICAgICAgIFtnbV06JHtHTV9pbmZvLnNjcmlwdEhhbmRsZXJ9CiAgICAgICBbZ21WZXJzaW9uXToke0dNX2luZm8udmVyc2lvbn0KICAgICAgIFt1YV06JHtuYXZpZ2F0b3IudXNlckFnZW50fQogICAgICAgW3ZlcnNpb25dOiR7VElQUy5DdXJyZW50VmVyc2lvbn0KICAgICAgIGA7CiAgICB9CgogICAgZnVuY3Rpb24gY29uZmlnKCkgewogICAgICAgIGNvbnNvbGUubG9nKCLohJrmnKzkuI7njq\/looPkv6Hmga\/vvJrvvIjlpoLmnpzmiqVidWfvvIzor7fpmYTluKbkuIrlpoLkuIvkv6Hmga\/vvIkiKQogICAgICAgIGxldCBlbnYgPSBnZXRFbnZpcm9tZW50SW5mbygpOwogICAgICAgIGNvbnNvbGUubG9nKGVudik7CgoKCiAgICAgICAgdmFyIHdpbmRvd0NzcyA9ICcjQ2ZnNG5lIC5uYXYtdGFicyB7bWFyZ2luOiAyMCAyfSAjQ2ZnNG5lIC5jb25maWdfdmFyIHRleHRhcmVhe3dpZHRoOiAzMTBweDsgaGVpZ2h0OiA1MHB4O30gI0NmZzRuZSAuaW5saW5lIHtwYWRkaW5nLWJvdHRvbTowcHg7fSAjQ2ZnNG5lIC5jb25maWdfaGVhZGVyIGE6aG92ZXIge2NvbG9yOiMxZTkwZmY7fSAjQ2ZnNG5lIC5jb25maWdfdmFyIHttYXJnaW4tbGVmdDogNiU7bWFyZ2luLXJpZ2h0OiA2JTt9ICNDZmc0bmUgaW5wdXRbdHlwZT0iY2hlY2tib3giXSB7bWFyZ2luOiAzcHggM3B4IDNweCAwcHg7fSAjQ2ZnNG5lIGlucHV0W3R5cGU9InRleHQiXSB7d2lkdGg6IDYwcHg7fSAjQ2ZnNG5lIHtiYWNrZ3JvdW5kLWNvbG9yOiBsaWdodGdyYXk7fSAjQ2ZnNG5lIC5yZXNldF9ob2xkZXIge2Zsb2F0OiBsZWZ0OyBwb3NpdGlvbjogcmVsYXRpdmU7IGJvdHRvbTogLTFlbTt9ICNDZmc0bmUgLnNhdmVjbG9zZV9idXR0b25zIHttYXJnaW46IC43ZW07fSAjQ2ZnNG5lIC5zZWN0aW9uX2Rlc2Mge2ZvbnQtc2l6ZTogMTBwdDt9JzsKCiAgICAgICAgR01fcmVnaXN0ZXJNZW51Q29tbWFuZCgn6K6+572uJywgb3BlbmNmZyk7CgogICAgICAgIGZ1bmN0aW9uIG9wZW5jZmcoKSB7CiAgICAgICAgICAgIEdNX2NvbmZpZy5vcGVuKCk7CiAgICAgICAgfTsKCiAgICAgICAgR01fY29uZmlnLmluaXQoewogICAgICAgICAgICBpZDogJ0NmZzRuZScsCiAgICAgICAgICAgIHRpdGxlOiBHTV9jb25maWcuY3JlYXRlKCdhJywgewogICAgICAgICAgICAgICAgaHJlZjogVElQUy5VcGRhdGVVcmwsCiAgICAgICAgICAgICAgICB0YXJnZXQ6ICdfYmxhbmsnLAogICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnc2V0VGl0bGUnLAogICAgICAgICAgICAgICAgdGV4dENvbnRlbnQ6IGAke1RJUFMuVmVyc2lvblRpcHN96K6+572uYCwKICAgICAgICAgICAgICAgIHRpdGxlOiBg5L2c6ICF77yaTmV2ZXI0RXZlciDniYjmnKzvvJoke1RJUFMuQ3VycmVudFZlcnNpb25954K55Ye76K6\/6Zeu5Li76aG1YAogICAgICAgICAgICB9KSwKICAgICAgICAgICAgaXNUYWJzOiB0cnVlLAogICAgICAgICAgICBza2luOiAndGFiJywKICAgICAgICAgICAgY3NzOiB3aW5kb3dDc3MsCiAgICAgICAgICAgIGZyYW1lU3R5bGU6IHsKICAgICAgICAgICAgICAgIGhlaWdodDogJzQ5MHB4JywKICAgICAgICAgICAgICAgIHdpZHRoOiAnNzUwcHgnLAogICAgICAgICAgICAgICAgekluZGV4OiAnMjE0NzQ4MzY0OCcsCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGZpZWxkczogewogICAgICAgICAgICAgICAgY3JlYXRlUm9vdEZvbGRlckRlZmF1bHRWYWx1ZTogewogICAgICAgICAgICAgICAgICAgIHNlY3Rpb246IFsnJywgJ+i9rOWtmOWKqeaJi+S4gOS6m+WKn+iDveiuvue9rizlj5HljIXlj4LmlbDmmoLmnKrlvIDmlL7vvIzmlazor7fmnJ\/lvoXvvIEnXSwKICAgICAgICAgICAgICAgICAgICBsYWJlbDogJ+KAnHNoYTHovazlrZjml7bvvIzlvLrliLblnKjkv53lrZjlpITmlrDlu7rmoLnnm67lvZXigJ3ov5npobnpu5jorqTpgInkuK0nLAogICAgICAgICAgICAgICAgICAgIGxhYmVsUG9zOiAncmlnaHQnLAogICAgICAgICAgICAgICAgICAgIHR5cGU6ICdjaGVja2JveCcsCiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDogdHJ1ZSwKICAgICAgICAgICAgICAgIH0sCgogICAgICAgICAgICAgICAgY3JlYXRlQ2hpbGRGb2xkZXJWaXNpYmxlOiB7CiAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICfmmL7npLrigJxzaGEx6L2s5a2Y5pe277yM5LiN5Yib5bu65Lu75L2V5a2Q55uu5b2V4oCd6YCJ6aG577yb5LiN5pi+56S65YiZ5by65Yi25Yib5bu65a2Q55uu5b2VJywKICAgICAgICAgICAgICAgICAgICBsYWJlbFBvczogJ3JpZ2h0JywKICAgICAgICAgICAgICAgICAgICB0eXBlOiAnY2hlY2tib3gnLAogICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IGZhbHNlLAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGNyZWF0ZUl0ZW1TaGExOiB7CiAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICfliJfooajmqKHlvI\/kuIvvvJrmgqzmta7mnaHmmL7npLrigJ3ojrflj5ZzaGEx6ZO+5o6l4oCcJywKICAgICAgICAgICAgICAgICAgICBsYWJlbFBvczogJ3JpZ2h0JywKICAgICAgICAgICAgICAgICAgICB0eXBlOiAnY2hlY2tib3gnLAogICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHRydWUsCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgY3JlYXRlSXRlbVNoYTFJblRodW1iOiB7CiAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICfnvKnnlaXlm77mqKHlvI\/kuIvvvJrmmL7npLrigJ3ojrflj5ZzaGEx6ZO+5o6l4oCcJywKICAgICAgICAgICAgICAgICAgICBsYWJlbFBvczogJ3JpZ2h0JywKICAgICAgICAgICAgICAgICAgICB0eXBlOiAnY2hlY2tib3gnLAogICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHRydWUsCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgYWR2YW5jZWRSZW5hbWU6IHsKICAgICAgICAgICAgICAgICAgICBsYWJlbDogJ+WcqOebruW9leeahOaCrOa1ruW3peWFt+adoeWkhOaYvuekuuKAnOWOu+mZpOWIhumalOespuKAnemAiemhuScsCiAgICAgICAgICAgICAgICAgICAgbGFiZWxQb3M6ICdyaWdodCcsCiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2NoZWNrYm94JywKICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OiBmYWxzZSwKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBhdXRvVXNlU2VwYXJhdG9yOiB7CiAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICfoh6rliqjnu5nmlofku7blkI3mt7vliqDliIbpmpTnrKbov5vooYzkuIrkvKDvvIzku6XpmLLmlofku7blkI3ov53op4QnLAogICAgICAgICAgICAgICAgICAgIGxhYmVsUG9zOiAncmlnaHQnLAogICAgICAgICAgICAgICAgICAgIHR5cGU6ICdjaGVja2JveCcsCiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDogdHJ1ZSwKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBhdXRvVXNlU2VwYXJhdG9yVG9SZW5hbWU6IHsKICAgICAgICAgICAgICAgICAgICBsYWJlbDogJ+S4iuS8oOe7k+adnyzoh6rliqjnu5nmlofku7blkI3ljrvpmaTliIbpmpTnrKbvvIzov5jljp\/ljp\/mlofku7blkI0nLAogICAgICAgICAgICAgICAgICAgIGxhYmVsUG9zOiAncmlnaHQnLAogICAgICAgICAgICAgICAgICAgIHR5cGU6ICdjaGVja2JveCcsCiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDogdHJ1ZSwKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBzZXBhcmF0b3I6IHsKICAgICAgICAgICAgICAgICAgICBsYWJlbDogJ+WIhumalOespuaWueahiCjmjqjojZDnlJ\/lg7vlrZfvvJvlpoLmnpzliIbpmpTnrKblpLHmlYgs6K+36Ieq6KGM5L+u5pS5Ke+8micsCiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3RleHQnLAogICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6ICforoonCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgdXBsb2FkTnVtYmVyOiB7CiAgICAgICAgICAgICAgICAgICAgLy9zZWN0aW9uOiBbJ+aXtumXtOWPguaVsOiuvue9ricsICfms6jmhI\/vvJrlj4LmlbDorr7nva7ov4flv6vvvIzkvJrlvJXotbcxMTXmnI3liqHlmajml6Dlk43lupTvvIzkuLrnqLPlrprov5DooYzlj4LmlbDmnKrlkK\/nlKjvvIEnXSwKICAgICAgICAgICAgICAgICAgICAvL2xhYmVsOiAn6L2s5a2Y5ZCM5pe25bel5L2c5Lu75Yqh5pWwOicsCiAgICAgICAgICAgICAgICAgICAgbGFiZWxQb3M6ICdsZWZ0JywKICAgICAgICAgICAgICAgICAgICB0eXBlOiAnaGlkZGVuJywKICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OiAnNCcsCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgdXBsb2FkU2xlZXBUaW1lOiB7CiAgICAgICAgICAgICAgICAgICAgLy9sYWJlbDogJ+i9rOWtmOmXtOmalOaXtumXtO+8iOavq+enku+8iTonLAogICAgICAgICAgICAgICAgICAgIGxhYmVsUG9zOiAnbGVmdCcsCiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2hpZGRlbicsCiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDogJzUwMCcsCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgZG93bmxvYWROdW1iZXI6IHsKICAgICAgICAgICAgICAgICAgICAvL2xhYmVsOiAn5o+Q5Y+W5ZCM5pe25bel5L2c5Lu75Yqh5pWwOicsCiAgICAgICAgICAgICAgICAgICAgbGFiZWxQb3M6ICdsZWZ0JywKICAgICAgICAgICAgICAgICAgICB0eXBlOiAnaGlkZGVuJywKICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OiAnNCcsCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgZG93bmxvYWRTbGVlcFRpbWU6IHsKICAgICAgICAgICAgICAgICAgICAvL2xhYmVsOiAn5o+Q5Y+W6Ze06ZqU5pe26Ze077yI5q+r56eS77yJOicsCiAgICAgICAgICAgICAgICAgICAgbGFiZWxQb3M6ICdsZWZ0JywKICAgICAgICAgICAgICAgICAgICB0eXBlOiAnaGlkZGVuJywKICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OiAnMTMwMCcsCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgY3JlYXRlRm9sZGVyU2xlZXBUaW1lOiB7CiAgICAgICAgICAgICAgICAgICAgLy9sYWJlbDogJ+ebruW9leWIm+W7uumXtOmalOaXtumXtO+8iOavq+enku+8iTonLAogICAgICAgICAgICAgICAgICAgIGxhYmVsUG9zOiAnbGVmdCcsCiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2hpZGRlbicsCiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDogJzMwMCcsCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgY2hlY2tVcGRhdGU6IHsKICAgICAgICAgICAgICAgICAgICAvL3NlY3Rpb246IFsn5biu5YqpJuabtOaWsCblj43ppognLCAn5bi46KeB6ZSZ6K+v5Lul5Y+K5a+55pys6ISa5pys6L+b6KGM5pu05paw5qOA5p+l5LiOYnVn5Y+N6aaIJ10sCiAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICfliY3lvoBnaXRodWLkuLvpobUnLAogICAgICAgICAgICAgICAgICAgIGxhYmVsUG9zOiAncmlnaHQnLAogICAgICAgICAgICAgICAgICAgIHR5cGU6ICdidXR0b24nLAogICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5vcGVuKFRJUFMuVXBkYXRlVXJsLCAiX2JsYW5rIik7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKCgogICAgICAgICAgICB9LAoKICAgICAgICAgICAgZXZlbnRzOiB7CiAgICAgICAgICAgICAgICBzYXZlOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgR01fY29uZmlnLmNsb3NlKCk7CiAgICAgICAgICAgICAgICAgICAgbG9jYXRpb24ucmVsb2FkKCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgfSk7CgogICAgICAgIEdNX3JlZ2lzdGVyTWVudUNvbW1hbmQoJ+iEmuacrOS4jueOr+Wig+S\/oeaBrycsIGpzSW5mbyk7CgogICAgICAgIGZ1bmN0aW9uIGpzSW5mbygpIHsKICAgICAgICAgICAgcG9zdFNoYTFNZXNzZ2FlKGNyZWF0ZU1lc3NhZ2UoTWVzc2FnZVR5cGUuSlNJTkZPLCBlbnYpKQogICAgICAgIH0KICAgIH07CiAgICBjb25maWcoKTsKCiAgICB2YXIgY3VycmVudENvbmZpZyA9IHsKICAgICAgICBjcmVhdGVSb290Rm9sZGVyRGVmYXVsdFZhbHVlOiAnY3JlYXRlUm9vdEZvbGRlckRlZmF1bHRWYWx1ZScsCiAgICAgICAgY3JlYXRlQ2hpbGRGb2xkZXJWaXNpYmxlOiAnY3JlYXRlQ2hpbGRGb2xkZXJWaXNpYmxlJywKICAgICAgICBhZHZhbmNlZFJlbmFtZTogJ2FkdmFuY2VkUmVuYW1lJywKICAgICAgICBhdXRvVXNlU2VwYXJhdG9yOiAnYXV0b1VzZVNlcGFyYXRvcicsCiAgICAgICAgYXV0b1VzZVNlcGFyYXRvclRvUmVuYW1lOiAnYXV0b1VzZVNlcGFyYXRvclRvUmVuYW1lJywKICAgICAgICBzZXBhcmF0b3I6ICdzZXBhcmF0b3InLAogICAgICAgIHVwbG9hZE51bWJlcjogJ3VwbG9hZE51bWJlcicsCiAgICAgICAgdXBsb2FkU2xlZXBUaW1lOiAndXBsb2FkU2xlZXBUaW1lJywKICAgICAgICBkb3dubG9hZE51bWJlcjogJ2Rvd25sb2FkTnVtYmVyJywKICAgICAgICBkb3dubG9hZFNsZWVwVGltZTogJ2Rvd25sb2FkU2xlZXBUaW1lJywKICAgICAgICBjcmVhdGVGb2xkZXJTbGVlcFRpbWU6ICdjcmVhdGVGb2xkZXJTbGVlcFRpbWUnLAogICAgICAgIGNyZWF0ZUl0ZW1TaGExOiAnY3JlYXRlSXRlbVNoYTEnLAogICAgICAgIGNyZWF0ZUl0ZW1TaGExSW5UaHVtYjogJ2NyZWF0ZUl0ZW1TaGExSW5UaHVtYicKCiAgICB9CgoKICAgIHZhciBvZmZsaW5lVGFza0J1dHRvbiA9IGAKICAgIDxkaXYgY2xhc3M9Im15MTE1RHJvcGRvd24iIGlkPSJteTExNURyb3Bkb3duIj4KICAgIDxkaXYgY2xhc3M9Im15MTE1RHJvcGJ0biI+CiAgICA8YSBocmVmPSJqYXZhc2NyaXB0OjsiICBjbGFzcz0iYnV0dG9uIGJ0bi1saW5lIGJ0bi11cGxvYWQiIG1lbnU9Im9mZmxpbmVfdGFzayI+PGkgY2xhc3M9Imljb24tb3BlcmF0ZSBpZm8tbGlua3Rhc2siPjwvaT48c3Bhbj7pk77mjqXkuI5zaGEx6L2s5a2Y5Lu75YqhPC9zcGFuPjxlbSBzdHlsZT0iZGlzcGxheTpub25lOyIgY2xhc3M9Im51bS1kb3QiPjwvZW0+PC9hPgogICAgPC9kaXY+CiAgICA8ZGl2IGNsYXNzPSJteTExNURyb3Bkb3duLWNvbnRlbnQiIHN0eWxlPSJkaXNwbGF5Om5vbmU7Ij4KICAgICAgPGEgaWQ9Im15MTE1Q29udGludWVkRG93bmxvYWQiPiDnu6fnu63jgJDmj5Dlj5bjgJHmiJbogIXjgJDovazlrZjjgJE8L2E+CiAgICA8L2Rpdj4KICA8L2Rpdj4KICAgIGA7CgogICAgaWYgKCEkKCIjbXkxMTVEcm9wZG93biIpLmxlbmd0aCA+IDApIHsKCiAgICAgICAgJCgiLmxlZnQtdHZmIikuZXEoMCkuYXBwZW5kKG9mZmxpbmVUYXNrQnV0dG9uKTsKICAgICAgICAkKCIjbXkxMTVDb250aW51ZWREb3dubG9hZCIpLmNsaWNrKGUgPT4gewogICAgICAgICAgICBwb3N0U2hhMU1lc3NnYWUoY3JlYXRlTWVzc2FnZShNZXNzYWdlVHlwZS5CRUdJTjRDT05USU5VRVRBU0ssICIiKSk7CiAgICAgICAgfSk7CiAgICB9CgoKICAgIHdpbmRvdy5jb29raWUgPSBkb2N1bWVudC5jb29raWUKCgogICAgLy90b2RvOua3u+WKoOeahOWKn+iDveWFpeWPowogICAgLy\/liJfooajmqKHlvI\/kuIvvvIzpobnnm67mgqzlt6XlhbfmnaEKICAgIHdhaXRGb3JLZXlFbGVtZW50cygiZGl2LmZpbGUtb3ByIiwgQWRkU2hhcmVTSEExQnRuKTsKICAgIC8v5re75Yqg5Lu75Yqh55qE5by556qXCiAgICB3YWl0Rm9yS2V5RWxlbWVudHMoImRpdi5kaWFsb2ctYm90dG9tIiwgQWRkRG93bmxvYWRTaGExQnRuKTsKICAgIC8v5pCc57Si5LiL55qE54q25oCBCiAgICB3YWl0Rm9yS2V5RWxlbWVudHMoImRpdi5sc3RjLXNlYXJjaCIsIEFkZFNoYXJlQnV0dG9uRm9yU2VhcmNoSXRlbSk7CiAgICAvL+e8qeeVpeWbvuaooeW8j+S4iwogICAgd2FpdEZvcktleUVsZW1lbnRzKGAjanNfY2FudGFpbl9ib3ggLmxpc3QtdGh1bWIgbGlbcmVsPSJpdGVtIl1gLCBBZGRDZWF0ZVNoYTFCdXR0b25JbkdyaWQpCiAgICAvL+aWh+S7tui3r+W+hOaXgei+ueeahOKAnemAieS4reiOt+WPlumhuXNoYTHigJwKICAgIHdhaXRGb3JLZXlFbGVtZW50cygnZGl2I2pzX3RvcF9oZWFkZXJfZmlsZV9wYXRoX2JveCcsIENyZWF0ZVNoYTFCdXR0b25Gb3JTZWxlY3RlZEl0ZW1zKTsKICAgIC8v6ZqQ6JeP5oiq5Zu+5Lit55qEdWlkCiAgICB3YWl0Rm9yS2V5RWxlbWVudHMoJ2RpdltjbGFzc149ImZwLSJdJywgSGFuZGxlVWlkRGl2KTsKCiAgICBmdW5jdGlvbiBIYW5kbGVVaWREaXYobm9kZSkgewogICAgICAgIG5vZGUuaGlkZSgpOwogICAgICAgIGNvbnNvbGUubG9nKCJzZXQgdWlkZGl2Iik7CiAgICB9CgogICAgLy8jcmVnaW9uIDIwMjAxMjMw5paw55qE5o+Q5Y+WYXBp55u45YWzCgoKCgoKICAgIGZ1bmN0aW9uIFBvc3REYXRhKGRpY3QpIHsKICAgICAgICB2YXIgaywgdG1wLCB2OwogICAgICAgIHRtcCA9IFtdOwogICAgICAgIGZvciAoayBpbiBkaWN0KSB7CiAgICAgICAgICAgIHYgPSBkaWN0W2tdOwogICAgICAgICAgICB0bXAucHVzaChrICsgIj0iICsgdik7CiAgICAgICAgfQogICAgICAgIHJldHVybiB0bXAuam9pbignJicpOwogICAgfTsKCiAgICBmdW5jdGlvbiBVcmxEYXRhKGRpY3QpIHsKICAgICAgICB2YXIgaywgdG1wLCB2OwogICAgICAgIHRtcCA9IFtdOwogICAgICAgIGZvciAoayBpbiBkaWN0KSB7CiAgICAgICAgICAgIHYgPSBkaWN0W2tdOwogICAgICAgICAgICB0bXAucHVzaCgoZW5jb2RlVVJJQ29tcG9uZW50KGspKSArICI9IiArIChlbmNvZGVVUklDb21wb25lbnQodikpKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHRtcC5qb2luKCcmJyk7CiAgICB9OwoKICAgIGZ1bmN0aW9uIEdldFNpZyh1c2VyaWQsIGZpbGVpZCwgdGFyZ2V0LCB1c2Vya2V5KSB7CiAgICAgICAgdmFyIHNoYTEsIHRtcDsKICAgICAgICBzaGExID0gbmV3IGpzU0hBKCdTSEEtMScsICdURVhUJyk7CiAgICAgICAgc2hhMS51cGRhdGUoIiIgKyB1c2VyaWQgKyBmaWxlaWQgKyBmaWxlaWQgKyB0YXJnZXQgKyAiMCIpOwogICAgICAgIHRtcCA9IHNoYTEuZ2V0SGFzaCgnSEVYJyk7CiAgICAgICAgc2hhMSA9IG5ldyBqc1NIQSgnU0hBLTEnLCAnVEVYVCcpOwogICAgICAgIHNoYTEudXBkYXRlKCIiICsgdXNlcmtleSArIHRtcCArICIwMDAwMDAiKTsKICAgICAgICByZXR1cm4gc2hhMS5nZXRIYXNoKCdIRVgnLCB7CiAgICAgICAgICAgIG91dHB1dFVwcGVyOiB0cnVlCiAgICAgICAgfSk7CiAgICB9CgoKCiAgICBmdW5jdGlvbiBkb3dubG9hZChmaWxlbmFtZSwgY29udGVudCwgY29udGVudFR5cGUpIHsKICAgICAgICBpZiAoIWNvbnRlbnRUeXBlKSBjb250ZW50VHlwZSA9ICdhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0nOwogICAgICAgIHZhciBhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpOwogICAgICAgIHZhciBibG9iID0gbmV3IEJsb2IoW2NvbnRlbnRdLCB7CiAgICAgICAgICAgICd0eXBlJzogY29udGVudFR5cGUKICAgICAgICB9KTsKICAgICAgICBhLmhyZWYgPSB3aW5kb3cuVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTsKICAgICAgICBhLmRvd25sb2FkID0gZmlsZW5hbWU7CiAgICAgICAgYS5jbGljaygpOwogICAgfQoKICAgIGZ1bmN0aW9uIFJlbmV3Q29va2llKCkgewogICAgICAgIHZhciBhcnJ5Q29va2llID0gd2luZG93LmNvb2tpZS5zcGxpdCgnOycpOwogICAgICAgIGFycnlDb29raWUuZm9yRWFjaChmdW5jdGlvbiAoa3YpIHsKICAgICAgICAgICAgZG9jdW1lbnQuY29va2llID0ga3YgKyAiO2V4cGlyZXM9VGh1LCAwMSBKYW4gMjEwMCAwMDowMDowMCBVVEM7O2RvbWFpbj0uMTE1LmNvbSIKICAgICAgICB9KQogICAgfQoKICAgIGZ1bmN0aW9uIERlbGV0ZUNvb2tpZShyZXNwKSB7CiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgdmFyIHJlZyA9IC9zZXQtY29va2llOiAuKzsvZzsKICAgICAgICAgICAgdmFyIHNldGNvb2tpZSA9IHJlZy5leGVjKHJlc3ApWzBdLnNwbGl0KCc7Jyk7CiAgICAgICAgICAgIHZhciBmaWxlY29va2llID0gc2V0Y29va2llWzBdLnNsaWNlKDExKSArICI7IGV4cGlyZXM9VGh1LCAwMSBKYW4gMTk3MCAwMDowMDowMCBVVEM7IiArIHNldGNvb2tpZVszXSArICI7ZG9tYWluPS4xMTUuY29tIjsKICAgICAgICAgICAgZG9jdW1lbnQuY29va2llID0gZmlsZWNvb2tpZTsKICAgICAgICAgICAgUmVuZXdDb29raWUoKQogICAgICAgICAgICByZXR1cm4gZmlsZWNvb2tpZTsKICAgICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgfQogICAgfQoKCgoKICAgIC8vI2VuZHJlZ2lvbgoKICAgIGZ1bmN0aW9uIGhlcmVEb2MoZikgewogICAgICAgIHJldHVybiBmLnRvU3RyaW5nKCkucmVwbGFjZSgvXlteXC9dK1wvXCohP1xzPy8sICcnKS5yZXBsYWNlKC9cKlwvW15cL10rJC8sICcnKTsKICAgIH0KCiAgICBjb25zdCBUYXNrVHlwZSA9IHsKICAgICAgICBET1dOTE9BRDogJ0Rvd25sb2FkJywgLy\\/mjIHlpKfkuo4yTULnmoQgdGV4dHxqc29uIOaWh+S7tu+8gSIpKTsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICBTd2FsLmZpcmUoewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICfmraPlnKjkuIvovb3mlofku7YuLi4nLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgaHRtbDogYDxwPiR7bWVzc2FnZS5tc2cub25saW5lRmlsZS5uYW1lfTwvcD48cCBpZD0icHJvY2Vzc0luU3dhbCI+PC9wPmAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGxvd091dHNpZGVDbGljazogZmFsc2UsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGxvd0VzY2FwZUtleTogZmFsc2UsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogYOWujOaIkGAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93Q2FuY2VsQnV0dG9uOiBmYWxzZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbGxPcGVuOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU3dhbC5zaG93TG9hZGluZyhTd2FsLmdldENvbmZpcm1CdXR0b24oKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG93bmxvYWRBRmlsZShtZXNzYWdlLm1zZy5vbmxpbmVGaWxlLCB0ZXh0ID0+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJChTd2FsLmdldEh0bWxDb250YWluZXIoKSkuZmluZCgiI3Byb2Nlc3NJblN3YWwiKS5odG1sKHRleHQpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLnRoZW4ociA9PiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyLnN0YXRlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhyLnRleHQpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLm1zZy5jb25maWcudGV4dCA9IHIudGV4dDsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBVcGxvYWRGaWxlc0J5U2hhMUxpbmtzKG1lc3NhZ2UubXNnLmNvbmZpZyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobWVzc2FnZS5tZXNzYWdlVHlwZSA9PSBNZXNzYWdlVHlwZS5NU0dFUlJPUikgewogICAgICAgICAgICAgICAgICAgIFN3YWwuZmlyZSh7CiAgICAgICAgICAgICAgICAgICAgICAgIGljb246ICdlcnJvcicsCiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IG1lc3NhZ2UubXNnLAogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG1lc3NhZ2UubWVzc2FnZVR5cGUgPT0gTWVzc2FnZVR5cGUuSlNJTkZPKSB7CiAgICAgICAgICAgICAgICAgICAgU3dhbC5maXJlKHsKICAgICAgICAgICAgICAgICAgICAgICAgaWNvbjogJ2luZm8nLAogICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiAn6ISa5pys5LiO546v5aKD5L+h5oGv77ya77yI5aaC5p6c5oqlYnVn77yM6K+36ZmE5bim5LiK5aaC5LiL5L+h5oGv77yJXHJcbicgKyBtZXNzYWdlLm1zZywKICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgfQoKCiAgICAgICAgICAgIH0pCiAgICAgICAgfSk7CiAgICB9CgoKCgoKCiAgICBmdW5jdGlvbiBkZWxheShtcykgewoKICAgICAgICBpZiAobXMgPT0gMCkgewogICAgICAgICAgICBtcyA9IDEwMDAgKiAoTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKDExIC0gNCkpICsgNCk7CiAgICAgICAgfQogICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgbXMpKQogICAgfQoKCiAgICAvLyNyZWdpb24gMTE1IGFwaQogICAgLy9nZXQgICBVcGxvYWRJbmZvCiAgICAvL3JldHVybiB7c3RhdGU6ZmFsc2UsdXNlcl9pZDowLHVzZXJrZXk6JzAnLGVycm9yOicnfQogICAgYXN5bmMgZnVuY3Rpb24gZ2V0VXBsb2FkSW5mbygpIHsKICAgICAgICBjb25zdCByID0gYXdhaXQgJC5hamF4KHsKICAgICAgICAgICAgdXJsOiAnaHR0cHM6Ly9wcm9hcGkuMTE1LmNvbS9hcHAvdXBsb2FkaW5mbycsCiAgICAgICAgICAgIGRhdGFUeXBlOiAnanNvbicsCiAgICAgICAgICAgIHhockZpZWxkczogewogICAgICAgICAgICAgICAgd2l0aENyZWRlbnRpYWxzOiB0cnVlCiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgICByZXR1cm4gcjsKICAgIH0KCiAgICAvL2FkZCBhIGZvbGRlcgogICAgLy9yZXR1cm4ge3N0YXRlOiBmYWxzZSwgZXJyb3I6ICLor6Xnm67lvZXlkI3np7Dlt7LlrZjlnKjjgIIiLCBlcnJubzogMjAwMDQsIGVycnR5cGU6ICJ3YXIifQogICAgLy9yZXR1cm4ge3N0YXRlOiB0cnVlLCBlcnJvcjogIiIsIGVycm5vOiAiIiwgYWlkOiAxLCBjaWQ6ICIyMDIwNDU1MDc4MDEwNTExOTc1IizCoOKApn0KICAgIGFzeW5jIGZ1bmN0aW9uIGFkZEZvbGRlcihwaWQsIGZvbGRlck5hbWUpIHsKICAgICAgICBjb25zdCBwb3N0RGF0YSA9IFBvc3REYXRhKHsKICAgICAgICAgICAgcGlkOiBwaWQsCiAgICAgICAgICAgIGNuYW1lOiBlbmNvZGVVUklDb21wb25lbnQoZm9sZGVyTmFtZSkKICAgICAgICB9KTsKCiAgICAgICAgY29uc3QgciA9IGF3YWl0ICQuYWpheCh7CiAgICAgICAgICAgIHR5cGU6ICdQT1NUJywKICAgICAgICAgICAgdXJsOiAnaHR0cHM6Ly93ZWJhcGkuMTE1LmNvbS9maWxlcy9hZGQnLAogICAgICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcsCiAgICAgICAgICAgICAgICAvLydPcmlnaW4nOiAnaHR0cHM6Ly8xMTUuY29tJwogICAgICAgICAgICB9LAogICAgICAgICAgICB4aHJGaWVsZHM6IHsKICAgICAgICAgICAgICAgIHdpdGhDcmVkZW50aWFsczogdHJ1ZQogICAgICAgICAgICB9LAogICAgICAgICAgICBkYXRhVHlwZTogJ2pzb24nLAogICAgICAgICAgICBkYXRhOiBwb3N0RGF0YQogICAgICAgIH0pOwoKICAgICAgICByZXR1cm4gcjsKICAgIH0KCgogICAgLy9yZXR1cm4ge2RhdGE6IEFycmF5KDMwKSwgY291bnQ6IDUzLCBkYXRhX3NvdXJjZTogIkRCIiwgc3lzX2NvdW50OiAwLCBvZmZzZXQ6IDAswqBwYWdlX3NpemU6MTE1LCDigKZ9CiAgICAvL3JldHVybiBBcnJheSB0eXBlOgogICAgLy8gICAgICBbZm9sZGVyXTp7Y2lkOiAiIiwgYWlkOiAiMSIsIHBpZDogIiIsIG46ICIiLCBtOiAwLCDigKZ9CiAgICAvLyAgICAgIFtmaWxlXTogIHtmaWQ6ICIiLCB1aWQ6IDE0NDc4MTIsIGFpZDogMSwgY2lkOiAiIiwgbjogIiIscGM6IiIsc2hhOiIiLHM6MCx0OiIiIOKApn0KICAgIGFzeW5jIGZ1bmN0aW9uIGdldERpcmVjdENoaWxkSXRlbXNCeU9mZnNldChjaWQsIG9mZnNldCkgewogICAgICAgIHZhciB0VXJsID0gJ2h0dHBzOi8vd2ViYXBpLjExNS5jb20vZmlsZXM\/YWlkPTEmY2lkPScgKyBjaWQgKyAnJm89ZmlsZV9uYW1lJmFzYz0xJm9mZnNldD0nICsgb2Zmc2V0ICsgJyZzaG93X2Rpcj0xJmxpbWl0PTExNTAmY29kZT0mc2NpZD0mc25hcD0wJm5hdHNvcnQ9MSZyZWNvcmRfb3Blbl90aW1lPTEmc291cmNlPSZmb3JtYXQ9anNvbiZmY19taXg9JnR5cGU9JnN0YXI9JmlzX3NoYXJlPSZzdWZmaXg9JmN1c3RvbV9vcmRlcj0nOwogICAgICAgIC8vIHZhciB0VXJsID0gImh0dHBzOi8vYXBzLjExNS5jb20vbmF0c29ydC9maWxlcy5waHA\/YWlkPTEmY2lkPSIgKyBjaWQgKyAiJm89ZmlsZV9uYW1lJmFzYz0xJm9mZnNldD0iICsgb2Zmc2V0ICsgIiZzaG93X2Rpcj0xJmxpbWl0PTExNTAmY29kZT0mc2NpZD0mc25hcD0wJm5hdHNvcnQ9MSZyZWNvcmRfb3Blbl90aW1lPTEmc291cmNlPSZmb3JtYXQ9anNvbiZmY19taXg9MCZ0eXBlPSZzdGFyPSZpc19zaGFyZT0mc3VmZml4PSZjdXN0b21fb3JkZXI9IjsKICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCAkLmFqYXgoewogICAgICAgICAgICB0eXBlOiAnR0VUJywKICAgICAgICAgICAgdXJsOiB0VXJsLAogICAgICAgICAgICBkYXRhVHlwZTogImpzb24iLAogICAgICAgICAgICB4aHJGaWVsZHM6IHsKICAgICAgICAgICAgICAgIHdpdGhDcmVkZW50aWFsczogdHJ1ZQogICAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgIH0KCiAgICAvL+ebtOaOpeWtkOmhueebruWwkeS6jjEyMDAKICAgIGFzeW5jIGZ1bmN0aW9uIGdldERpcmVjdENoaWxkSXRlbXNCeU9mZnNldGx0MTIwMChjaWQsIG9mZnNldCkgewogICAgICAgIC8vdmFyIHRVcmwgPSAnaHR0cHM6Ly93ZWJhcGkuMTE1LmNvbS9maWxlcz9haWQ9MSZjaWQ9JytjaWQrJyZvPWZpbGVfbmFtZSZhc2M9MSZvZmZzZXQ9JytvZmZzZXQrJyZzaG93X2Rpcj0xJmxpbWl0PTExNTAmY29kZT0mc2NpZD0mc25hcD0wJm5hdHNvcnQ9MSZyZWNvcmRfb3Blbl90aW1lPTEmc291cmNlPSZmb3JtYXQ9anNvbiZmY19taXg9JnR5cGU9JnN0YXI9JmlzX3NoYXJlPSZzdWZmaXg9JmN1c3RvbV9vcmRlcj0nOwogICAgICAgIHZhciB0VXJsID0gImh0dHBzOi8vYXBzLjExNS5jb20vbmF0c29ydC9maWxlcy5waHA\/YWlkPTEmY2lkPSIgKyBjaWQgKyAiJm89ZmlsZV9uYW1lJmFzYz0xJm9mZnNldD0iICsgb2Zmc2V0ICsgIiZzaG93X2Rpcj0xJmxpbWl0PTExNTAmY29kZT0mc2NpZD0mc25hcD0wJm5hdHNvcnQ9MSZyZWNvcmRfb3Blbl90aW1lPTEmc291cmNlPSZmb3JtYXQ9anNvbiZmY19taXg9MCZ0eXBlPSZzdGFyPSZpc19zaGFyZT0mc3VmZml4PSZjdXN0b21fb3JkZXI9IjsKICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCAkLmFqYXgoewogICAgICAgICAgICB0eXBlOiAnR0VUJywKICAgICAgICAgICAgdXJsOiB0VXJsLAogICAgICAgICAgICBkYXRhVHlwZTogImpzb24iLAogICAgICAgICAgICB4aHJGaWVsZHM6IHsKICAgICAgICAgICAgICAgIHdpdGhDcmVkZW50aWFsczogdHJ1ZQogICAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgIH0KCiAgICAvL3JldHVybiBBbGxEaXJlY3QgaXRlbXMgOntpZDoiIixwYXJlbnRJRDpjaWQsaXNGb2xkZXI6ZmFsc2UsbmFtZToiIixzaXplOjAscGM6IiIsc2hhOiIiLHBhdGhzW10gfTsKICAgIGFzeW5jIGZ1bmN0aW9uIGdldEFsbERpcmVjdEl0ZW1zKGNpZCwgZm9sZGVyUHJvY2Vzc0NhbGxiYWNrKSB7CiAgICAgICAgdmFyIGl0ZW1zID0gbmV3IEFycmF5KCk7CiAgICAgICAgdmFyIGluZGV4ID0gMDsKICAgICAgICB2YXIgZmxhZyA9IHRydWU7CiAgICAgICAgdmFyIHBhZ2VJbmRleCA9IDE7CiAgICAgICAgdmFyIGZpcnN0ID0gdHJ1ZTsKICAgICAgICB2YXIgaXNMVDEyMDAgPSBmYWxzZTsKCiAgICAgICAgd2hpbGUgKGZsYWcpIHsKICAgICAgICAgICAgaWYgKGdldFRhc2tDYW5jZWxGbGFnKCkpIGJyZWFrOwoKICAgICAgICAgICAgZm9sZGVyUHJvY2Vzc0NhbGxiYWNrKHBhZ2VJbmRleCk7CiAgICAgICAgICAgIHZhciByZXN1bHQgPSBudWxsOwogICAgICAgICAgICAvLzEyMDDmlbDph4\/vvIzkuI3lkIznmoRhcGnvvJvov5nkuYjlhpnlh4\/lsJHlj5HljIUKICAgICAgICAgICAgaWYgKGZpcnN0KSB7CiAgICAgICAgICAgICAgICByZXN1bHQgPSBhd2FpdCBnZXREaXJlY3RDaGlsZEl0ZW1zQnlPZmZzZXQoY2lkLCBpbmRleCk7CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgZmlyc3QgPjEyMDAgOiR7cmVzdWx0LnN0YXRlfSwke3Jlc3VsdC5jb3VudH1gKTsKICAgICAgICAgICAgICAgIGlmICghcmVzdWx0LnN0YXRlKSB7CiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gYXdhaXQgZ2V0RGlyZWN0Q2hpbGRJdGVtc0J5T2Zmc2V0bHQxMjAwKGNpZCwgaW5kZXgpOwogICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBmaXJzdCA8MTIwMCA6JHtyZXN1bHQuc3RhdGV9LCR7cmVzdWx0LmNvdW50fWApOwogICAgICAgICAgICAgICAgICAgIGlzTFQxMjAwID0gdHJ1ZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGZpcnN0ID0gZmFsc2U7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBpZiAoaXNMVDEyMDApIHJlc3VsdCA9IGF3YWl0IGdldERpcmVjdENoaWxkSXRlbXNCeU9mZnNldGx0MTIwMChjaWQsIGluZGV4KTsKICAgICAgICAgICAgICAgIGVsc2UgcmVzdWx0ID0gYXdhaXQgZ2V0RGlyZWN0Q2hpbGRJdGVtc0J5T2Zmc2V0KGNpZCwgaW5kZXgpOwogICAgICAgICAgICB9CgogICAgICAgICAgICB2YXIgdG90YWxDb3VudCA9IHBhcnNlSW50KHJlc3VsdC5jb3VudCk7CiAgICAgICAgICAgIGlmICh0b3RhbENvdW50ID49IDEpIHsKICAgICAgICAgICAgICAgIHJlc3VsdC5kYXRhLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICAgICAgICAgICAgICB2YXIgcEl0ZW0gPSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiAiIiwKICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50SUQ6IGNpZCwKICAgICAgICAgICAgICAgICAgICAgICAgaXNGb2xkZXI6IGZhbHNlLAogICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAiIiwKICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogIiIsCiAgICAgICAgICAgICAgICAgICAgICAgIHBpY2tDb2RlOiAiIiwKICAgICAgICAgICAgICAgICAgICAgICAgc2hhMTogIiIsCiAgICAgICAgICAgICAgICAgICAgICAgIHBhdGhzOiBuZXcgQXJyYXkoKSwKICAgICAgICAgICAgICAgICAgICAgICAgcHJlaWQ6ICIiLAogICAgICAgICAgICAgICAgICAgICAgICBuZWVkVG9SZW1vdmVkOiBmYWxzZQogICAgICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgICAgIGlmIChpdGVtLmZpZCkgLy\/mlofku7YgZmlkLGNpZAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgcEl0ZW0uaXNGb2xkZXIgPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgICAgICAgcEl0ZW0uaWQgPSBpdGVtLmZpZDsKICAgICAgICAgICAgICAgICAgICAgICAgcEl0ZW0ubmFtZSA9IGl0ZW0ubjsKICAgICAgICAgICAgICAgICAgICAgICAgcEl0ZW0ucGlja0NvZGUgPSBpdGVtLnBjOwogICAgICAgICAgICAgICAgICAgICAgICBwSXRlbS5zaGExID0gaXRlbS5zaGE7CiAgICAgICAgICAgICAgICAgICAgICAgIHBJdGVtLnNpemUgPSBpdGVtLnM7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIC8v55uu5b2VIGNpZCxwaWQKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIHBJdGVtLmlzRm9sZGVyID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgcEl0ZW0uaWQgPSBpdGVtLmNpZDsKICAgICAgICAgICAgICAgICAgICAgICAgcEl0ZW0ubmFtZSA9IGl0ZW0ubjsKICAgICAgICAgICAgICAgICAgICAgICAgcEl0ZW0ucGlja0NvZGUgPSBpdGVtLnBjOwogICAgICAgICAgICAgICAgICAgIH0KCgogICAgICAgICAgICAgICAgICAgIHZhciBpdGVtSW5kZXggPSBpdGVtcy5maW5kSW5kZXgocSA9PiBxLm5hbWUgPT0gcEl0ZW0ubmFtZSAmJiBxLnBpY2tDb2RlID09IHBJdGVtLnBpY2tDb2RlICYmIHEuc2hhMSA9PSBwSXRlbS5zaGExICYmIChfLmlzRXF1YWwocS5wYXRocywgcEl0ZW0ucGF0aHMpKSk7CiAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW1JbmRleCA9PSAtMSkgaXRlbXMucHVzaChwSXRlbSk7CiAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIC8v5Y+v6IO95a2Y5Zyo5ZCM5LiA5Liq55uu5b2V5LiL77yM5Lik5Liq5paH5Lu25LiA5qih5LiA5qC3LAogICAgICAgICAgICAgICAgICAgICAgICAvL+ebuOWQjOaWh+S7tuWkhOeQhu+8muS4jeeEtuW+queOr+adoeS7tumAgOS4jeWHugogICAgICAgICAgICAgICAgICAgICAgICAvL2ZpeDpwaWNrY29kZeS4jeS4gOagtyzlhYjkv53lrZjnnYDlkKcKICAgICAgICAgICAgICAgICAgICAgICAgcEl0ZW0ubmVlZFRvUmVtb3ZlZCA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zLnB1c2gocEl0ZW0pCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgfQoKICAgICAgICAgICAgY29uc29sZS5sb2coIl9fX19fX19fX19fX19fX3RvdGFsQ291bnQgIiArIHRvdGFsQ291bnQpOwogICAgICAgICAgICBjb25zb2xlLmxvZyhpdGVtcy5sZW5ndGgpCiAgICAgICAgICAgIC8v5b2T6I635Y+W5Yiw5q+UcGFnZXNpemXlsI\/ml7bvvIzojrflj5bnu5PmnZ8sMTIwMOaXtuacieS4quWdkeOAguOAguOAggogICAgICAgICAgICBpZiAodG90YWxDb3VudCA8PSBpdGVtcy5sZW5ndGgpIHsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgYXdhaXQgZGVsYXkoNTAwKTsKICAgICAgICAgICAgICAgIGluZGV4ID0gaXRlbXMubGVuZ3RoOwogICAgICAgICAgICAgICAgcGFnZUluZGV4ID0gcGFnZUluZGV4ICsgMTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgY29uc29sZS5sb2coImNpZDogezB9LCBjb3VudDogezF9Ii5mb3JtYXQoY2lkLCBpdGVtcy5sZW5ndGgpKTsKCiAgICAgICAgdmFyIG5vTnVsbEl0ZW1zID0gaXRlbXMuZmlsdGVyKHEgPT4gIXEubmVlZFRvUmVtb3ZlZCk7CiAgICAgICAgY29uc29sZS5sb2coImNpZDogezB9LCDpmaTljrvlrozlhajph43lpI1jb3VudDogezF9Ii5mb3JtYXQoY2lkLCBub051bGxJdGVtcy5sZW5ndGgpKTsKCiAgICAgICAgcmV0dXJuIG5vTnVsbEl0ZW1zOwogICAgfQoKICAgIC8vcmV0dXJuIHtmaWxlX25hbWU6IiIscGlja19jb2RlOiIiLHNoYTE6IiIsY291bnQ6IiIsc2l6ZToiIixmb2xkZXJfY291bnQ6IiIscGF0aHM6W119CiAgICAvL3JldHVybiBwYXRoczpbXeWxgue6p+ebruW9lQogICAgYXN5bmMgZnVuY3Rpb24gZ2V0Rm9sZGVySW5mbyhjaWQpIHsKICAgICAgICB2YXIgcFVybCA9ICJodHRwczovL3dlYmFwaS4xMTUuY29tL2NhdGVnb3J5L2dldD9haWQ9MSZjaWQ9IiArIGNpZDsKICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCAkLmFqYXgoewogICAgICAgICAgICB0eXBlOiAnR0VUJywKICAgICAgICAgICAgdXJsOiBwVXJsLAogICAgICAgICAgICBkYXRhVHlwZTogImpzb24iLAogICAgICAgICAgICB4aHJGaWVsZHM6IHsKICAgICAgICAgICAgICAgIHdpdGhDcmVkZW50aWFsczogdHJ1ZQogICAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgICAgY29uc29sZS5sb2cocmVzdWx0KTsKICAgICAgICB2YXIgcEl0ZW0gPSB7CiAgICAgICAgICAgIGZpbGVDb3VudDogcGFyc2VJbnQocmVzdWx0LmNvdW50KSwKICAgICAgICAgICAgZm9sZGVyQ291bnQ6IHBhcnNlSW50KHJlc3VsdC5mb2xkZXJfY291bnQpLAogICAgICAgICAgICBpZDogY2lkLAogICAgICAgICAgICBwYXJlbnRJRDogIiIsCiAgICAgICAgICAgIGlzRm9sZGVyOiB0cnVlLAogICAgICAgICAgICBuYW1lOiByZXN1bHQuZmlsZV9uYW1lLAogICAgICAgICAgICBzaXplOiByZXN1bHQuc2l6ZSwKICAgICAgICAgICAgcGlja0NvZGU6IHJlc3VsdC5waWNrX2NvZGUsCiAgICAgICAgICAgIHNoYTE6ICIiLAogICAgICAgICAgICBwYXRoczogcmVzdWx0LnBhdGhzLAogICAgICAgICAgICBwcmVpZDogIiIKICAgICAgICB9OwoKICAgICAgICByZXR1cm4gcEl0ZW07CiAgICB9CgogICAgLy8gZ2V0IGZpbGVBcnJheTp7aWQ6IiIscGFyZW50SUQ6Y2lkLGlzRm9sZGVyOmZhbHNlLG5hbWU6IiIsc2l6ZTowLHBjOiIiLHNoYToiIixwYXRoc1tdIH07CiAgICBhc3luYyBmdW5jdGlvbiBnZXRBbGxGaWxlcyhjaWQsIGZpbGVBcnJheSwgdG9wQ2lkLCBmb2xkZXJQcm9jZXNzQ2FsbGJhY2spIHsKICAgICAgICB2YXIgdGhpc0ZvbGRlciA9IGF3YWl0IGdldEZvbGRlckluZm8oY2lkKTsKICAgICAgICBmb2xkZXJQcm9jZXNzQ2FsbGJhY2sodGhpc0ZvbGRlci5uYW1lLCAwKTsKICAgICAgICAvL+epuuebruW9le+8jOi3s+i\/h+mBjeWOhgoKICAgICAgICBpZiAoZ2V0VGFza0NhbmNlbEZsYWcoKSkgcmV0dXJuOwogICAgICAgIGlmICh0aGlzRm9sZGVyLmZpbGVDb3VudCA9PSAwKSByZXR1cm47CiAgICAgICAgZm9sZGVyUHJvY2Vzc0NhbGxiYWNrKHRoaXNGb2xkZXIubmFtZSkKICAgICAgICB2YXIgZGlyZWN0SXRlbXMgPSBhd2FpdCBnZXRBbGxEaXJlY3RJdGVtcyh0aGlzRm9sZGVyLmlkLCBwYWdlSW5kZXggPT4gewogICAgICAgICAgICBmb2xkZXJQcm9jZXNzQ2FsbGJhY2sodGhpc0ZvbGRlci5uYW1lLCBwYWdlSW5kZXgpOwogICAgICAgIH0pOwogICAgICAgIC8v56m655uu5b2V77yM6Lez6L+H6YGN5Y6GCiAgICAgICAgaWYgKGRpcmVjdEl0ZW1zLmxlbmd0aCA9PSAwKSByZXR1cm47CiAgICAgICAgdmFyIGZpbGVzID0gZGlyZWN0SXRlbXMuZmlsdGVyKHQgPT4gIXQuaXNGb2xkZXIpOwogICAgICAgIGZpbGVzLmZvckVhY2goZiA9PiB7CiAgICAgICAgICAgIHZhciBpbmRleCA9IHRoaXNGb2xkZXIucGF0aHMuZmluZEluZGV4KHEgPT4gcS5maWxlX2lkLnRvU3RyaW5nKCkgPT0gdG9wQ2lkKTsKICAgICAgICAgICAgdmFyIHBhdGhzID0gbmV3IEFycmF5KCk7CiAgICAgICAgICAgIGlmIChpbmRleCAhPSAtMSkgewogICAgICAgICAgICAgICAgcGF0aHMgPSB0aGlzRm9sZGVyLnBhdGhzLnNsaWNlKGluZGV4KS5tYXAocSA9PiBxLmZpbGVfbmFtZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGF0aHMucHVzaCh0aGlzRm9sZGVyLm5hbWUpOwogICAgICAgICAgICBmLnBhdGhzID0gcGF0aHMuc2xpY2UoMSk7CgogICAgICAgICAgICBmaWxlQXJyYXkucHVzaChmKTsKICAgICAgICB9KTsKCiAgICAgICAgdmFyIGZvbGRlcnMgPSBkaXJlY3RJdGVtcy5maWx0ZXIodCA9PiB0LmlzRm9sZGVyKTsKICAgICAgICBmb3IgKHZhciBmb2xkZXIgb2YgZm9sZGVycykgewogICAgICAgICAgICBpZiAoZ2V0VGFza0NhbmNlbEZsYWcoKSkgYnJlYWs7CiAgICAgICAgICAgIGF3YWl0IGdldEFsbEZpbGVzKGZvbGRlci5pZCwgZmlsZUFycmF5LCB0b3BDaWQsIGZvbGRlclByb2Nlc3NDYWxsYmFjayk7CiAgICAgICAgICAgIGF3YWl0IGRlbGF5KDIwMCk7CiAgICAgICAgfQoKICAgIH0KCiAgICAvL+aJuemHj+mHjeWRveWQjSBmaWxlQXJyYXkgIFt7aWQ6aWQsbmFtZTpkZGR9XQogICAgLy97InN0YXRlIjp0cnVlLCJlcnJvciI6IiIsImVycm5vIjowLCJkYXRhIjp7IjIxODczNjU3MTc1Mjc5OTcxMDgiOiIxNDIxNC5tcDQifX0KICAgIGFzeW5jIGZ1bmN0aW9uIHJlbmFtZUZpbGVzKGZpbGVBcnJheSkgewogICAgICAgIGNvbnNvbGUubG9nKCJyZW5hbWVGaWxlcyBmaWxlQXJyYXkiKTsKICAgICAgICBjb25zb2xlLmxvZyhmaWxlQXJyYXkpOwogICAgICAgIGxldCBkYXRhcyA9IGZpbGVBcnJheS5tYXAoKHZhbHVlLCBpbmRleCwgYXJyYXkpID0+IHsKICAgICAgICAgICAgbGV0IGRhdGFLZXkgPSBgZmlsZXNfbmV3X25hbWVbJHt2YWx1ZS5pZH1dYDsKICAgICAgICAgICAgbGV0IGRhdGFWYWx1ZSA9IHZhbHVlLm5hbWU7CiAgICAgICAgICAgIHJldHVybiBgJHtlbmNvZGVVUklDb21wb25lbnQoZGF0YUtleSl9PSR7ZW5jb2RlVVJJQ29tcG9uZW50KGRhdGFWYWx1ZSl9YDsKICAgICAgICB9KS5qb2luKCImIik7CgogICAgICAgIGxldCByZW5hbWVVcmwgPSAiaHR0cHM6Ly93ZWJhcGkuMTE1LmNvbS9maWxlcy9iYXRjaF9yZW5hbWUiOwogICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0ICQuYWpheCh7CiAgICAgICAgICAgIHR5cGU6ICdQT1NUJywKICAgICAgICAgICAgdXJsOiByZW5hbWVVcmwsCiAgICAgICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJywKICAgICAgICAgICAgICAgIC8vJ09yaWdpbic6ICdodHRwczovLzExNS5jb20nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGRhdGFUeXBlOiAianNvbiIsCiAgICAgICAgICAgIHhockZpZWxkczogewogICAgICAgICAgICAgICAgd2l0aENyZWRlbnRpYWxzOiB0cnVlCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGRhdGE6IGRhdGFzCiAgICAgICAgfSk7CgogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICB9CgogICAgYXN5bmMgZnVuY3Rpb24gZ2V0VXBsb2FkSGlzdG9yeShvZmZzZXQsIGxpbWl0KSB7CiAgICAgICAgbGV0IGhpc3RvcnlGaWxlcyA9IFtdOwogICAgICAgIGxldCBwVXJsID0gYGh0dHBzOi8vd2ViYXBpLjExNS5jb20vaGlzdG9yeS9saXN0P3R5cGU9NCZvZmZzZXQ9JHtvZmZzZXR9JmxpbWl0PSR7bGltaXR9YDsKICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCAkLmFqYXgoewogICAgICAgICAgICB0eXBlOiAnR0VUJywKICAgICAgICAgICAgdXJsOiBwVXJsLAogICAgICAgICAgICBkYXRhVHlwZTogImpzb24iLAogICAgICAgICAgICB4aHJGaWVsZHM6IHsKICAgICAgICAgICAgICAgIHdpdGhDcmVkZW50aWFsczogdHJ1ZQogICAgICAgICAgICB9CiAgICAgICAgfSk7CgogICAgICAgIGxldCBmaWxlcyA9IHJlc3VsdC5kYXRhLmxpc3Q7CiAgICAgICAgZm9yIChjb25zdCBhRmlsZSBvZiBmaWxlcykgewogICAgICAgICAgICBoaXN0b3J5RmlsZXMucHVzaCh7CiAgICAgICAgICAgICAgICBzaGExOiBhRmlsZS5zaGExLAogICAgICAgICAgICAgICAgaWQ6IGFGaWxlLmZpbGVfaWQsCiAgICAgICAgICAgICAgICBjcmVhdGVUaW1lOiBhRmlsZS5jcmVhdGVfdGltZSwKICAgICAgICAgICAgICAgIHBpY2tDb2RlOiBhRmlsZS5waWNrX2NvZGUsIC8v5Y+v6IO95LiN5LiA5qC3CiAgICAgICAgICAgICAgICBuYW1lOiBhRmlsZS5maWxlX25hbWUsCiAgICAgICAgICAgICAgICBwYXJlbnRJRDogYUZpbGUucGFyZW50X2lkCiAgICAgICAgICAgIH0pOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIGhpc3RvcnlGaWxlczsKICAgIH0KCiAgICBhc3luYyBmdW5jdGlvbiBnZXRMYXN0VXBsb2FkRmlsZXMoY291bnQsIGRlbGF5VGltZSA9IDIwMCwgcHJvY2Vzc0NhbGxiYWNrKSB7CiAgICAgICAgbGV0IGZpbGVzID0gW107CiAgICAgICAgbGV0IG9mZnNldCA9IDA7CiAgICAgICAgbGV0IGxpbWl0ID0gMTE1OwogICAgICAgIGxldCBsZWZ0Q291bnQgPSBjb3VudDsKICAgICAgICB3aGlsZSAobGVmdENvdW50ID49IGxpbWl0KSB7CiAgICAgICAgICAgIHByb2Nlc3NDYWxsYmFjayhg5q2j5Zyo6I635Y+W56ysJHtvZmZzZXQrMX0tJHtvZmZzZXQrbGltaXQrMX3kuKrmlofku7bmlbDmja4uLi5gKQogICAgICAgICAgICBsZXQgcmVzdWx0ID0gYXdhaXQgZ2V0VXBsb2FkSGlzdG9yeShvZmZzZXQsIGxpbWl0KTsKICAgICAgICAgICAgcmVzdWx0LmZvckVhY2goZiA9PiBmaWxlcy5wdXNoKGYpKTsKICAgICAgICAgICAgb2Zmc2V0ID0gb2Zmc2V0ICsgbGltaXQ7CiAgICAgICAgICAgIGxlZnRDb3VudCA9IGxlZnRDb3VudCAtIGxpbWl0OwogICAgICAgICAgICBhd2FpdCBkZWxheShkZWxheVRpbWUpOwogICAgICAgIH0KICAgICAgICBpZiAobGVmdENvdW50ID4gMCkgewogICAgICAgICAgICBwcm9jZXNzQ2FsbGJhY2soYOato+WcqOiOt+WPluesrCR7b2Zmc2V0KzF9LSR7b2Zmc2V0K2xlZnRDb3VudCsxfeS4quaWh+S7tuaVsOaNri4uLmApCiAgICAgICAgICAgIGxldCByZXN1bHQgPSBhd2FpdCBnZXRVcGxvYWRIaXN0b3J5KG9mZnNldCwgbGVmdENvdW50KTsKICAgICAgICAgICAgcmVzdWx0LmZvckVhY2goZiA9PiBmaWxlcy5wdXNoKGYpKTsKICAgICAgICB9CgogICAgICAgIHJldHVybiBmaWxlczsKICAgIH0KCgogICAgLy\/ojrflj5bnlJ\/miJBzaGEx6ZyA6KaBcHJlaWQKICAgIC8vcmV0dXJuOiB7c3RhdGU6LGVycm9yOixmaWxlSXRlbTp9CiAgICBmdW5jdGlvbiBnZXRGaWxlSXRlbVByZWlkKGZpbGVJdGVtKSB7CiAgICAgICAgY29uc29sZS5sb2coJ2dldEZpbGVJdGVtUHJlaWQnKQogICAgICAgIGNvbnNvbGUubG9nKGZpbGVJdGVtKTsKICAgICAgICBjb25zdCBmID0gZmlsZUl0ZW07CiAgICAgICAgbGV0IGZpbGVTaXplID0gcGFyc2VJbnQoZmlsZUl0ZW0uc2l6ZSk7CiAgICAgICAgaWYgKGZpbGVTaXplID09IDApIHsKICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHsKICAgICAgICAgICAgICAgIGNvbnN0IGVycm9yTXNnID0gInswfSDmlofku7blpKflsI\/kuLow77yM5bey57uP6Lez6L+H77yBIi5mb3JtYXQoZi5maWxlbmFtZSk7CiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCJlcnJvck1zZyIpOwogICAgICAgICAgICAgICAgcmVzb2x2ZSh7CiAgICAgICAgICAgICAgICAgICAgc3RhdGU6IGZhbHNlLAogICAgICAgICAgICAgICAgICAgIGVycm9yOiAi5paH5Lu25aSn5bCP5Li6MO+8jOW3sue7j+i3s+i\/h++8gSIsCiAgICAgICAgICAgICAgICAgICAgZmlsZUl0ZW06IGZpbGVJdGVtCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSk7CiAgICAgICAgfQoKICAgICAgICBjb25zdCByID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4gewoJCQkgIHZhciBkYXRhLCBrZXksIHRtLCB0bXVzOwoJCQkgIHRtdXMgPSAobmV3IERhdGUoKSkuZ2V0VGltZSgpOwoJCQkgIHRtID0gTWF0aC5mbG9vcih0bXVzIC8gMTAwMCk7CgkJCSAgdmFyIHRlc3Q9SlNPTi5zdHJpbmdpZnkoewoJCQkJcGlja2NvZGU6IGZpbGVJdGVtLnBpY2tDb2RlCgkJCSAgfSk7CgkJCSAgY29uc29sZS5sb2coZmlsZUl0ZW0ucGlja0NvZGUsdGVzdCx0bSk7CgkJCSAgKHtkYXRhLCBrZXl9ID0gbTExNV9lbmNvZGUodGVzdCwgdG0pKTsKICAgICAgICAgICAgR01feG1saHR0cFJlcXVlc3QoewogICAgICAgICAgICAgICAgbWV0aG9kOiAiUE9TVCIsCiAgICAgICAgICAgICAgICB1cmw6ICdodHRwczovL3Byb2FwaS4xMTUuY29tL2FwcC9jaHJvbWUvZG93bnVybD90PScrdG0sCiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnLAogICAgICAgICAgICAgICAgICAgICdVc2VyLUFnZW50JzogJ01vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdPVzY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvODMuMC40MTAzLjYxIFNhZmFyaS81MzcuMzYgMTE1QnJvd3Nlci8yMy45LjMuNicKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICByZXNwb25zZVR5cGU6ICdqc29uJywKICAgICAgICAgICAgICAgIGRhdGE6IFBvc3REYXRhKHsKICAgICAgICAgICAgICAgICAgICBkYXRhOiBlbmNvZGVVUklDb21wb25lbnQoZGF0YSkKICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgb25sb2FkOiBmdW5jdGlvbiAocikgewogICAgICAgICAgICAgICAgICAgIGlmIChyLnN0YXR1cyA9PSAyMDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRvd25sb2FkX2luZm8gPSByLnJlc3BvbnNlOwoKCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkb3dubG9hZF9pbmZvLnN0YXRlICYmIGRvd25sb2FkX2luZm8uZGF0YSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIganNvbiA9IG0xMTVfZGVjb2RlKGRvd25sb2FkX2luZm8uZGF0YSxrZXkpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coanNvbikKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXJsID0gSlNPTi5wYXJzZShqc29uKVtmaWxlSXRlbS5pZF1bJ3VybCddWyd1cmwnXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3RvZG865LiN6IO95LiL6L2955qE5paH5Lu25aSE55CGCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF1cmwuc3RhcnRzV2l0aCgiaHR0cDovL2NkbmZobmZkZnMuMTE1LmNvbSIpICYmIHVybC5zdGFydHNXaXRoKCdodHRwOi8vLycpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYGVycm9yIHVybDoke3VybH1gKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsID0gdXJsLnJlcGxhY2UoImh0dHA6Ly8vIiwgImh0dHA6Ly9jZG5maG5mZGZzLjExNS5jb20vIikKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHVybCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3AgPSByLnJlc3BvbnNlSGVhZGVycwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzZXRDb29raWUgPSBEZWxldGVDb29raWUocmVzcCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmlsZUNvb2tpZSA9IG51bGw7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNldENvb2tpZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlQ29va2llID0gc2V0Q29va2llOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgR01feG1saHR0cFJlcXVlc3QoewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRob2Q6ICJHRVQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IHVybCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZW91dDogMTIwMDAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJSYW5nZSI6ICJieXRlcz0wLTEzMTA3MiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiQ29va2llIjogZmlsZUNvb2tpZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdVc2VyLUFnZW50JzogJ01vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdPVzY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvODMuMC40MTAzLjYxIFNhZmFyaS81MzcuMzYgMTE1QnJvd3Nlci8yMy45LjMuNicKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2VUeXBlOiAnYXJyYXlidWZmZXInLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmxvYWQ6IGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gMjA2KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHByZV9idWZmID0gcmVzcG9uc2UucmVzcG9uc2U7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRhdGEgPSBuZXcgVWludDhBcnJheShwcmVfYnVmZik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNoYTEgPSBuZXcganNTSEEoJ1NIQS0xJywgJ0FSUkFZQlVGRkVSJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hhMS51cGRhdGUoZGF0YS5zbGljZSgwLCAxMjggKiAxMDI0KSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHByZWlkID0gc2hhMS5nZXRIYXNoKCdIRVgnLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dFVwcGVyOiB0cnVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZUl0ZW0ucHJlaWQgPSBwcmVpZDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGU6IHRydWUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiAiIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZUl0ZW06IGZpbGVJdGVtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gNDAzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcigiRm9yYmlkZGVuLCDlt7Lnu4\/nlKg0MOS4qjDku6Pmm78iKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlSXRlbS5wcmVpZCA9ICIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGU6IHRydWUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiAiIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZUl0ZW06IGZpbGVJdGVtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vZml4IHYzLjM6ICDkv67lpI00MDTmlofku7bml6Dms5XkuIvovb3lr7zoh7TljaF1aemXrumimCAgQOaMh+eOr+eOiwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoIuWPr+iDveaWh+S7tuaXoOazleS4i+i9veaIluiAhee9kee7nOmXrumimCIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlc3BvbnNlKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGU6IGZhbHNlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcjogIuS4i+i9veWHuumUme+8jOWPr+iDveaWh+S7tuaXoOazleS4i+i9veaIluiAhee9kee7nOmXrumimCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVJdGVtOiBmaWxlSXRlbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbnRpbWVvdXQ6IGZ1bmN0aW9uIChyZXMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoIuS4i+i9vei2heaXtu+8jOWPr+iDveaWh+S7tuaXoOazleS4i+i9veaIluiAhee9kee7nOmXrumimCIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2cocmVzKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlOiBmYWxzZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcjogIuS4i+i9vei2heaXtu+8jOWPr+iDveaWh+S7tuaXoOazleS4i+i9veaIluiAhee9kee7nOmXrumimCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZUl0ZW06IGZpbGVJdGVtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGU6IGZhbHNlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcjogIuWcqOaPkOWPluS4reWPkeeUn+mUmeivry4uLiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVJdGVtOiBmaWxlSXRlbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZG93bmxvYWRfaW5mbyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZTogZmFsc2UsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3I6IGRvd25sb2FkX2luZm8ubXNnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVJdGVtOiBmaWxlSXRlbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihyZXNwb25zZS5yZXNwb25zZSk7CiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGU6IGZhbHNlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3I6ICLlnKjmj5Dlj5bkuK3lj5HnlJ\/plJnor68uLi4iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZUl0ZW06IGZpbGVJdGVtCiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICAgICAgcmV0dXJuIHI7CiAgICB9CgoKICAgIHZhciB1dGY4QXJyYXlUb1N0ciA9IChmdW5jdGlvbiAoKSB7CiAgICAgICAgdmFyIGNoYXJDYWNoZSA9IG5ldyBBcnJheSgxMjgpOyAvLyBQcmVhbGxvY2F0ZSB0aGUgY2FjaGUgZm9yIHRoZSBjb21tb24gc2luZ2xlIGJ5dGUgY2hhcnMKICAgICAgICB2YXIgY2hhckZyb21Db2RlUHQgPSBTdHJpbmcuZnJvbUNvZGVQb2ludCB8fCBTdHJpbmcuZnJvbUNoYXJDb2RlOwogICAgICAgIHZhciByZXN1bHQgPSBbXTsKCiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhcnJheSkgewogICAgICAgICAgICB2YXIgY29kZVB0LCBieXRlMTsKICAgICAgICAgICAgdmFyIGJ1ZmZMZW4gPSBhcnJheS5sZW5ndGg7CgogICAgICAgICAgICByZXN1bHQubGVuZ3RoID0gMDsKCiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYnVmZkxlbjspIHsKICAgICAgICAgICAgICAgIGJ5dGUxID0gYXJyYXlbaSsrXTsKCiAgICAgICAgICAgICAgICBpZiAoYnl0ZTEgPD0gMHg3RikgewogICAgICAgICAgICAgICAgICAgIGNvZGVQdCA9IGJ5dGUxOwogICAgICAgICAgICAgICAgfSBlbHNlIGlmIChieXRlMSA8PSAweERGKSB7CiAgICAgICAgICAgICAgICAgICAgY29kZVB0ID0gKChieXRlMSAmIDB4MUYpIDw8IDYpIHwgKGFycmF5W2krK10gJiAweDNGKTsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYnl0ZTEgPD0gMHhFRikgewogICAgICAgICAgICAgICAgICAgIGNvZGVQdCA9ICgoYnl0ZTEgJiAweDBGKSA8PCAxMikgfCAoKGFycmF5W2krK10gJiAweDNGKSA8PCA2KSB8IChhcnJheVtpKytdICYgMHgzRik7CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKFN0cmluZy5mcm9tQ29kZVBvaW50KSB7CiAgICAgICAgICAgICAgICAgICAgY29kZVB0ID0gKChieXRlMSAmIDB4MDcpIDw8IDE4KSB8ICgoYXJyYXlbaSsrXSAmIDB4M0YpIDw8IDEyKSB8ICgoYXJyYXlbaSsrXSAmIDB4M0YpIDw8IDYpIHwgKGFycmF5W2krK10gJiAweDNGKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgY29kZVB0ID0gNjM7IC8vIENhbm5vdCBjb252ZXJ0IGZvdXIgYnl0ZSBjb2RlIHBvaW50cywgc28gdXNlICI\/IiBpbnN0ZWFkCiAgICAgICAgICAgICAgICAgICAgaSArPSAzOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGNoYXJDYWNoZVtjb2RlUHRdIHx8IChjaGFyQ2FjaGVbY29kZVB0XSA9IGNoYXJGcm9tQ29kZVB0KGNvZGVQdCkpKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIHJlc3VsdC5qb2luKCcnKTsKICAgICAgICB9OwogICAgfSkoKTsKCiAgICBmdW5jdGlvbiBkb3dubG9hZEFGaWxlKGZpbGVJdGVtLCBwcm9ncmVzc0NhbGxiYWNrID0gZnVuY3Rpb24gKHRleHQpIHt9KSB7CiAgICAgICAgY29uc29sZS5sb2coImRvd25sb2FkQUZpbGUiKQogICAgICAgIGNvbnNvbGUubG9nKGZpbGVJdGVtKQogICAgICAgIGNvbnN0IHIgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7CgkJCSB2YXIgZGF0YSwga2V5LCB0bSwgdG11czsKCQkJICB0bXVzID0gKG5ldyBEYXRlKCkpLmdldFRpbWUoKTsKCQkJICB0bSA9IE1hdGguZmxvb3IodG11cyAvIDEwMDApOwoJCQkgIHZhciB0ZXN0PUpTT04uc3RyaW5naWZ5KHsKCQkJCXBpY2tjb2RlOiBmaWxlSXRlbS5waWNrQ29kZQoJCQkgIH0pOwoJCQkgIGNvbnNvbGUubG9nKGZpbGVJdGVtLnBpY2tDb2RlLHRlc3QsdG0pOwoJCQkgICh7ZGF0YSwga2V5fSA9IG0xMTVfZW5jb2RlKHRlc3QsIHRtKSk7CiAgICAgICAgICAgIEdNX3htbGh0dHBSZXF1ZXN0KHsKICAgICAgICAgICAgICAgIG1ldGhvZDogIlBPU1QiLAogICAgICAgICAgICAgICAgdXJsOiAnaHR0cHM6Ly9wcm9hcGkuMTE1LmNvbS9hcHAvY2hyb21lL2Rvd251cmw\\/igJks6Ziy5q2i6ISa5pys5a+85Ye65YaN5a+85YWl5pe256C05Z2P55uu5b2V57uT5p6ECiAgICAgICAgICAgICAgICAgICAgLy9maXg6IHYzLjQgd2luZG93c+W5s+WPsOS4iuS4jeiDvemZkOWItueahOWtl+espu+8mi9cfCI6Kj88PiAg5pu\/5o2i77yb5Y675o6J5LqG6ICB54mI5pys55qEI+WIhumalOespgogICAgICAgICAgICAgICAgICAgIHZhciBwYXRocyA9IGZpbGVJdGVtLnBhdGhzLm1hcCh0ID0+IHJlcGFsY2VWYWxpZGF0ZWROYW1lKHQpKS5qb2luKCd8Jyk7CiAgICAgICAgICAgICAgICAgICAgbXNnID0gc2hhMUxpbmsgKyAnfCcgKyBwYXRoczsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgbXNnID0gc2hhMUxpbms7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBtc2cgPSBzaGExTGluazsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgc3VjY2VlZCA9IHRydWU7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gewogICAgICAgICAgICBzdGF0ZTogc3VjY2VlZCwKICAgICAgICAgICAgbXNnOiBtc2cKICAgICAgICB9OwogICAgfQoKICAgIC8vIOS7jnNoYTFsaW5rIOi9rOaNouS4uiBGaWxlSXRlbQogICAgLy9yZXR1cm4gdHlwZTp7c3RhdGU6c3VjY2VlZCxmaWxlSXRlbTp7fX0KICAgIC8vdHJ1ZTogZmlsZUl0ZW0sIGZhbHNlOm51bGwKICAgIGZ1bmN0aW9uIGNvbnZlcnRGcm9tU2hhMUxpbmsoc2hhMUxpbmspIHsKICAgICAgICB2YXIgc3VjY2VlZCA9IGZhbHNlOwogICAgICAgIHZhciBpdGVtID0ge307CiAgICAgICAgaWYgKHNoYTFMaW5rKSB7CiAgICAgICAgICAgIGlmIChzaGExTGluay5zdGFydHNXaXRoKCIxMTU6Ly8iKSkgewogICAgICAgICAgICAgICAgc2hhMUxpbmsgPSBzaGExTGluay5zdWJzdHJpbmcoNik7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgLy92My40IGFkZCDovazlrZjml7bvvIzmlofku7blkI3jgIHmlofku7blpLnlkI3mm7\/mjaLpnZ7ms5XlrZfnrKYKICAgICAgICAgICAgdmFyIGluZm9zID0gc2hhMUxpbmsuc3BsaXQoJ3wnKTsKICAgICAgICAgICAgaWYgKGluZm9zLmxlbmd0aCA+PSA0KSB7CiAgICAgICAgICAgICAgICBpdGVtLmlkID0gIiI7CiAgICAgICAgICAgICAgICBpdGVtLnBpY2tDb2RlID0gIiI7CiAgICAgICAgICAgICAgICBpdGVtLm5hbWUgPSByZXBhbGNlVmFsaWRhdGVkTmFtZShpbmZvc1swXSk7CiAgICAgICAgICAgICAgICBpdGVtLnNpemUgPSBpbmZvc1sxXTsKICAgICAgICAgICAgICAgIGl0ZW0uc2hhMSA9IGluZm9zWzJdOwogICAgICAgICAgICAgICAgaXRlbS5wcmVpZCA9IGluZm9zWzNdOwogICAgICAgICAgICAgICAgaXRlbS5wYXJlbnRJRCA9ICIiOwogICAgICAgICAgICAgICAgaXRlbS5wYXRocyA9IG5ldyBBcnJheSgpOwogICAgICAgICAgICAgICAgaWYgKGluZm9zLmxlbmd0aCA+IDQpIHsKICAgICAgICAgICAgICAgICAgICAvL2ZpeDogdjMuNCDnp7vpmaTkuobmraTlhbzlrrnvvIzlm6DkuLrlvIDmlL7kuoYj5L2c5Li655uu5b2V5ZCNCiAgICAgICAgICAgICAgICAgICAgLy8gaWYgKGluZm9zLmxlbmd0aCA9PSA1ICYmIGluZm9zWzRdLmluY2x1ZGVzKCcjJykpIHsKICAgICAgICAgICAgICAgICAgICAvL+WFvOWuuSAj5a2X56ym5YiG5YmyCgogICAgICAgICAgICAgICAgICAgIC8vICAgIGl0ZW0ucGF0aHMgPSBpbmZvc1s0XS5zcGxpdCgnIycpOwogICAgICAgICAgICAgICAgICAgIC8vfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBpdGVtLnBhdGhzID0gaW5mb3Muc2xpY2UoNCkubWFwKHQgPT4gcmVwYWxjZVZhbGlkYXRlZE5hbWUodCkpOwogICAgICAgICAgICAgICAgICAgIC8vfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaXRlbS5leHRlbnNpb24gPSAiIjsKICAgICAgICAgICAgICAgIGl0ZW0uZm9ybWF0ZWROYW1lID0gIiI7CiAgICAgICAgICAgICAgICBzdWNjZWVkID0gdHJ1ZTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgc3RhdGU6IHN1Y2NlZWQsCiAgICAgICAgICAgIGZpbGVJdGVtOiBpdGVtCiAgICAgICAgfTsKICAgIH0KCgogICAgZnVuY3Rpb24gY3JlYXRlVXBsb2FkRmlsZSh1cmxEYXRhLCBwb3N0RGF0YSkgewogICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7CiAgICAgICAgICAgIEdNX3htbGh0dHBSZXF1ZXN0KHsKICAgICAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLAogICAgICAgICAgICAgICAgdXJsOiAnaHR0cDovL3VwbGIuMTE1LmNvbS8zLjAvaW5pdHVwbG9hZC5waHA\/JyArIHVybERhdGEsCiAgICAgICAgICAgICAgICBkYXRhOiBwb3N0RGF0YSwKICAgICAgICAgICAgICAgIHJlc3BvbnNlVHlwZTogJ2pzb24nLAogICAgICAgICAgICAgICAgaGVhZGVyczogewogICAgICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9VVRGLTgnLAogICAgICAgICAgICAgICAgICAgICdVc2VyLUFnZW50JzogJ01vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdPVzY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvODMuMC40MTAzLjYxIFNhZmFyaS81MzcuMzYgMTE1QnJvd3Nlci8yNS4wLjAuMycsCiAgICAgICAgICAgICAgICAgICAgLy8nT3JpZ2luJzogJ2h0dHBzOi8vMTE1LmNvbScKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBvbmxvYWQ6IGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgICAgICAgICAgICAgIGxldCBkYXRhID0gewogICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZTogZmFsc2UsCiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiAiIiwKICAgICAgICAgICAgICAgICAgICAgICAgcGlja0NvZGU6ICIiCiAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSAyMDAgJiYgcmVzcG9uc2UucmVzcG9uc2Uuc3RhdHVzID09PSAyKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuc3RhdGUgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLnBpY2tDb2RlID0gcmVzcG9uc2UucmVzcG9uc2UucGlja2NvZGU7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihyZXNwb25zZSk7CiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBlcnJvciA9ICLmiJborrhzaGEx6ZO+5o6l5LiN5Yy56YWNKD8pIjsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gNDA1KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvciA9ICLpopHnuYHor7fmsYLvvIzooqsxMTXpmZDliLYgKFshXeeri+WNs+WBnOatou+8jOWwneivleWBnOatouaTjeS9nOWNiuWwj+aXtuaIluiAhemHjeaWsOeZu+W9lSnvvJoiICsgcmVzcG9uc2Uuc3RhdHVzVGV4dDsKICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChyZXNwb25zZS5yZXNwb25zZSAmJiByZXNwb25zZS5yZXNwb25zZS5tZXNzYWdlKSBlcnJvciA9IHJlc3BvbnNlLnJlc3BvbnNlLm1lc3NhZ2U7CiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHJlc3BvbnNlLnJlc3BvbnNlICYmIHJlc3BvbnNlLnJlc3BvbnNlLnN0YXR1c21zZykgZXJyb3IgPSAi5Y+v6IO95Y+C5pWw5LiN5q2j56GuKD8p77yaIiArIHJlc3BvbnNlLnJlc3BvbnNlLnN0YXR1c21zZzsKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5lcnJvciA9IGVycm9yOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGRhdGEpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KQoKICAgICAgICB9KTsKICAgIH0KCiAgICAvL3JldHVybjp7c3RhdGU6ZmFsc2UsZXJyb3I6IiIsZmlsZUl0ZW06fTsKICAgIGZ1bmN0aW9uIHVwbG9hZEZpbGUodGFyZ2V0Rm9sZGVyLCBmaWxlSXRlbSwgdXBsb2FkSW5mbykgewoKICAgICAgICBsZXQgZkNpZCA9IGBVXzFfJHt0YXJnZXRGb2xkZXJ9YDsKICAgICAgICBsZXQgYXBwVmVyc2lvbiA9ICIyNS4wLjAuMyI7CiAgICAgICAgY29uc3Qgc2VjcmV0ID0gIlFjbG04TUdXVXY1OVRuclIwWFBnIgoKICAgICAgICBsZXQgdGltZSA9IChuZXcgRGF0ZSgpKS5nZXRUaW1lKCk7CiAgICAgICAgbGV0IHRzID0gTWF0aC5mbG9vcih0aW1lIC8gMTAwMCk7CgogICAgICAgIGxldCB1cGxvYWRUb2tlbiA9IG1kNShgJHtzZWNyZXR9JHtmaWxlSXRlbS5zaGExfSR7ZmlsZUl0ZW0uc2l6ZX0ke2ZpbGVJdGVtLnByZWlkfSR7dXBsb2FkSW5mby51c2VyX2lkfSR7dHN9JHttZDUodXBsb2FkSW5mby51c2VyX2lkKX0ke2FwcFZlcnNpb259YCkKCiAgICAgICAgbGV0IHVybERhdGEgPSBVcmxEYXRhKHsKICAgICAgICAgICAgaXNwOiAwLAogICAgICAgICAgICBhcHBpZDogMCwKICAgICAgICAgICAgdG9wdXBsb2FkOiAwLAogICAgICAgICAgICBydDogMCwKICAgICAgICAgICAgYXBwdmVyc2lvbjogYXBwVmVyc2lvbiwKICAgICAgICAgICAgZm9ybWF0OiAnanNvbicsCiAgICAgICAgICAgIHNpZzogR2V0U2lnKHVwbG9hZEluZm8udXNlcl9pZCwgZmlsZUl0ZW0uc2hhMSwgZkNpZCwgdXBsb2FkSW5mby51c2Vya2V5KSwKICAgICAgICAgICAgdDogdHMsCiAgICAgICAgICAgIHRva2VuOiB1cGxvYWRUb2tlbgogICAgICAgIH0pOwoKCiAgICAgICAgbGV0IHBvc3REYXRhID0gUG9zdERhdGEoewogICAgICAgICAgICBwcmVpZDogZmlsZUl0ZW0ucHJlaWQsCiAgICAgICAgICAgIGZpbGVpZDogZmlsZUl0ZW0uc2hhMSwKICAgICAgICAgICAgcXVpY2tpZDogZmlsZUl0ZW0uc2hhMSwKICAgICAgICAgICAgYXBwX3ZlcjogYXBwVmVyc2lvbiwKICAgICAgICAgICAgZmlsZW5hbWU6IGVuY29kZVVSSUNvbXBvbmVudChmaWxlSXRlbS5mb3JtYXRlZE5hbWUpLAogICAgICAgICAgICBmaWxlc2l6ZTogZmlsZUl0ZW0uc2l6ZSwKICAgICAgICAgICAgZXhpZjogJycsCiAgICAgICAgICAgIHRhcmdldDogZkNpZCwKICAgICAgICAgICAgdXNlcmlkOiB1cGxvYWRJbmZvLnVzZXJfaWQKCiAgICAgICAgfSk7CgogICAgICAgIGNvbnN0IHIgPSBjcmVhdGVVcGxvYWRGaWxlKHVybERhdGEsIHBvc3REYXRhKTsKCiAgICAgICAgY29uc3QgeCA9IHIudGhlbih0ID0+IHsKICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbGUsIHJlamVjdCkgPT4gewogICAgICAgICAgICAgICAgZmlsZUl0ZW0uc3RhdGUgPSB0LnN0YXRlOwogICAgICAgICAgICAgICAgZmlsZUl0ZW0ucGlja0NvZGUgPSB0LnBpY2tDb2RlOwogICAgICAgICAgICAgICAgcmVzb2xlKHsKICAgICAgICAgICAgICAgICAgICBzdGF0ZTogdC5zdGF0ZSwKICAgICAgICAgICAgICAgICAgICBlcnJvcjogdC5lcnJvciwKICAgICAgICAgICAgICAgICAgICBmaWxlSXRlbTogZmlsZUl0ZW0KICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9KQogICAgICAgIH0pOwoKICAgICAgICByZXR1cm4geDsKICAgIH0KCiAgICBmdW5jdGlvbiBzZXRMaXN0VmlldygpIHsKICAgICAgICBHTV94bWxodHRwUmVxdWVzdCh7CiAgICAgICAgICAgIG1ldGhvZDogIlBPU1QiLAogICAgICAgICAgICB1cmw6ICdodHRwczovLzExNS5jb20vP2N0PXVzZXJfc2V0dGluZyZhYz1zZXQnLAogICAgICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZGF0YTogUG9zdERhdGEoewogICAgICAgICAgICAgICAgc2V0dGluZzogJ3sidmlld19maWxlIjoibGlzdCJ9JwogICAgICAgICAgICB9KSwKICAgICAgICAgICAgcmVzcG9uc2VUeXBlOiAnanNvbicsCiAgICAgICAgICAgIG9ubG9hZDogZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSAyMDApIHt9CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgIH0KCiAgICAvLyNlbmRyZWdpb24KCgoKICAgIGFzeW5jIGZ1bmN0aW9uIHVwZGF0ZVBhcmVudElEKGNpZCwgY25hbWUsIHRoaXNMZXZlbCwgbWF4TGV2ZWwsIGl0ZW1zLCBzbGVlcFRpbWUsIGNyZWF0ZUZvbGRlckNhbGxiYWNrKSB7CiAgICAgICAgaWYgKHRoaXNMZXZlbCA9PSBtYXhMZXZlbCkgcmV0dXJuOwogICAgICAgIGxldCBmaWxlcyA9IG5ldyBBcnJheSgpOwogICAgICAgIGlmICh0aGlzTGV2ZWwgPT0gMCkgewogICAgICAgICAgICBmaWxlcyA9IGl0ZW1zOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGZpbGVzID0gaXRlbXMuZmlsdGVyKGYgPT4gZi5wYXRoc1t0aGlzTGV2ZWwgLSAxXSA9PSBjbmFtZSk7CiAgICAgICAgfQoKICAgICAgICBsZXQgY2hpbGRGaWxlcyA9IGZpbGVzLmZpbHRlcihxID0+IHEucGF0aHMubGVuZ3RoID09IHRoaXNMZXZlbCk7CiAgICAgICAgbGV0IGNoaWxkRm9sZGVyTmFtZXMgPSBmaWxlcy5tYXAocSA9PiBxLnBhdGhzW3RoaXNMZXZlbF0pLmZpbHRlcihxID0+IHEpLmZpbHRlcigoeCwgaSwgYSkgPT4gYS5pbmRleE9mKHgpID09IGkpCgogICAgICAgIGNvbnNvbGUubG9nKGBjaGlsZEZpbGVzIO+8miR7Y2hpbGRGaWxlcy5sZW5ndGh9YCkKICAgICAgICAvL3VwbG9hZCBmaWxlOgogICAgICAgIGZvciAobGV0IGZpbGUgb2YgY2hpbGRGaWxlcykgewogICAgICAgICAgICBmaWxlLnBhcmVudElEID0gY2lkOwogICAgICAgICAgICAvL2NvbnNvbGUubG9nKGZpbGUucGFyZW50SUQpOwogICAgICAgIH0KCiAgICAgICAgLy9jcmVhdGUgZm9sZGVyOgogICAgICAgIGZvciAobGV0IGZvbGRlck5hbWUgb2YgY2hpbGRGb2xkZXJOYW1lcykgewoKICAgICAgICAgICAgbGV0IHIgPSBhd2FpdCBjcmVhdGVSb290Rm9sZGVyKGNpZCwgZm9sZGVyTmFtZSwgMTAsIHNsZWVwVGltZSwgY2FsbGJhY2tNc2cgPT4gewogICAgICAgICAgICAgICAgY3JlYXRlRm9sZGVyQ2FsbGJhY2sgJiYgY3JlYXRlRm9sZGVyQ2FsbGJhY2soewogICAgICAgICAgICAgICAgICAgIHN0YXRlOiB0cnVlLAogICAgICAgICAgICAgICAgICAgIGZvbGRlck5hbWU6IGZvbGRlck5hbWUsCiAgICAgICAgICAgICAgICAgICAgZXJyb3I6IGNhbGxiYWNrTXNnCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSkKCiAgICAgICAgICAgIC8vZml4OiB2My40IOacieWQjOWQjeaWh+S7tuWkue+8jOWkhOeQhui3n+agueebruW9leebuOWQjOWkhOeQhuOAguWmguaenOi2hei\/h+mHjeivleasoeaVsOeahOmAu+i+keacquWkhOeQhgogICAgICAgICAgICAvL2xldCByID0gYXdhaXQgYWRkRm9sZGVyKGNpZCwgZm9sZGVyTmFtZSk7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKHIpOwoKICAgICAgICAgICAgaWYgKHIuc3RhdGUpIHsKICAgICAgICAgICAgICAgIGF3YWl0IHVwZGF0ZVBhcmVudElEKHIuY2lkLCBmb2xkZXJOYW1lLCB0aGlzTGV2ZWwgKyAxLCBtYXhMZXZlbCwgZmlsZXMsIGNyZWF0ZUZvbGRlckNhbGxiYWNrKTsKICAgICAgICAgICAgfSBlbHNlIHsgLy91aSDnm67lvZXliJvlu7rlpLHotKUKICAgICAgICAgICAgICAgIC8vdG9kbzog77yB77yB77yB5bCa5pyq6Kej5Yaz6L+Z5LiqCiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGB1cGRhdGVQYXJlbnRJRCAg5aaC5p6c5Ye6546w6L+Z5Liq77yM6K+05piO6YeN5aSN5ZCN5a2X55qE5paH5Lu25aS55Lmf5aSq5aSq5aSq5aSa5LqGYCk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGF3YWl0IGRlbGF5KHNsZWVwVGltZSk7CiAgICAgICAgfQoKICAgIH0KCiAgICBmdW5jdGlvbiBpbnRlcm5lbEZvcm1hdChmb2xkZXIsIGZpbGVzLCBmb2xkZXJQYXJlbnRzKSB7CiAgICAgICAgdmFyIHBhdGhzID0gZm9sZGVyUGFyZW50cy5zbGljZSgwKTsKICAgICAgICBwYXRocy5wdXNoKGZvbGRlci5kaXJfbmFtZSk7CgogICAgICAgIGZvciAodmFyIGZpbGUgb2YgZm9sZGVyLmZpbGVzKSB7CgogICAgICAgICAgICB2YXIgbGluayA9IGZpbGUgKyAnfCcgKyBwYXRocy5zbGljZSgxKS5qb2luKCd8Jyk7CiAgICAgICAgICAgIGZpbGVzLnB1c2gobGluayk7CiAgICAgICAgfQoKICAgICAgICBmb3IgKHZhciBjaGlsZEZvbGRlciBvZiBmb2xkZXIuZGlycykgewoKICAgICAgICAgICAgaW50ZXJuZWxGb3JtYXQoY2hpbGRGb2xkZXIsIGZpbGVzLCBwYXRocykKICAgICAgICB9CiAgICB9CgogICAgLy97c3RhdGU6dHJ1ZSxlcnJvcjoiIix0ZXh0OiIifQogICAgZnVuY3Rpb24gZm9ybWF0SnNvblRvQ29tbW9uKHRleHQpIHsKCiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgdmFyIHJvb3QgPSBKU09OLnBhcnNlKHRleHQpOwogICAgICAgICAgICBjb25zb2xlLmxvZyhyb290KTsKICAgICAgICAgICAgdmFyIGZpbGVzID0gbmV3IEFycmF5KCk7CiAgICAgICAgICAgIHZhciBwYXRocyA9IG5ldyBBcnJheSgpOwogICAgICAgICAgICBpbnRlcm5lbEZvcm1hdChyb290LCBmaWxlcywgcGF0aHMpOwoKICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgIHN0YXRlOiB0cnVlLAogICAgICAgICAgICAgICAgZXJyb3I6ICIiLAogICAgICAgICAgICAgICAgdGV4dDogZmlsZXMuam9pbignXHJcbicpLAogICAgICAgICAgICAgICAgcm9vdEZvbGRlcjogcm9vdC5kaXJfbmFtZQogICAgICAgICAgICB9OwogICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7CiAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICBzdGF0ZTogZmFsc2UsCiAgICAgICAgICAgICAgICBlcnJvcjogZXJyb3IsCiAgICAgICAgICAgICAgICB0ZXh0OiAiIgogICAgICAgICAgICB9OwogICAgICAgIH0KCiAgICB9CgogICAgLy\/op6PmnpBpbmxpbmUgdGV4dCBzaGExIGxpbmtzLOW5tuagueaNrumFjee9ruiuvue9ruWIhumalOespjvov5Tlm55GaWxlQXJyYXkKICAgIGZ1bmN0aW9uIHBhcnNlU2hhMUxpbmtzVG9GaWxlQXJyYXkodGV4dCwgbmFtZVNlcGFyYXRvciwgZXJyb3JDYWxsYmFjaykgewogICAgICAgIGxldCB0ZXh0TGluZXMgPSB0ZXh0LnNwbGl0KC9ccj9cbi8pOwoKICAgICAgICBsZXQgZmlsZXMgPSBuZXcgQXJyYXkoKTsKICAgICAgICBmb3IgKGxldCBsaW5lIG9mIHRleHRMaW5lcykgewogICAgICAgICAgICBsZXQgZkxpbmUgPSBsaW5lLnRyaW0oKTsKICAgICAgICAgICAgaWYgKCFmTGluZSkgY29udGludWU7CiAgICAgICAgICAgIGxldCByID0gY29udmVydEZyb21TaGExTGluayhmTGluZSk7CiAgICAgICAgICAgIGlmIChyLnN0YXRlKSB7CiAgICAgICAgICAgICAgICBsZXQgbmFtZVN0cmluZ3MgPSByLmZpbGVJdGVtLm5hbWUuc3BsaXQoIi4iKTsKICAgICAgICAgICAgICAgIGxldCBleHRlbnNpb24gPSBuYW1lU3RyaW5ncy5wb3AoKTsKICAgICAgICAgICAgICAgIHIuZmlsZUl0ZW0uZXh0ZW5zaW9uID0gZXh0ZW5zaW9uOwogICAgICAgICAgICAgICAgLy\/moLnmja7phY3nva7ph43mlrDorr7nva7mlofku7blkI0KICAgICAgICAgICAgICAgIGlmIChuYW1lU2VwYXJhdG9yKSB7CiAgICAgICAgICAgICAgICAgICAgLy\/kvb\/nlKhlbW91dGlscy5qc+W6k+adpeWIhuWJsu+8jOW4puaciWVtb2pp55qE5paH5Lu25ZCNCiAgICAgICAgICAgICAgICAgICAgbGV0IGZpbGVOYW1lID0gZW1vamlVdGlscy50b0FycmF5KG5hbWVTdHJpbmdzLmpvaW4oJy4nKSkubWFwKGMgPT4gYyArIG5hbWVTZXBhcmF0b3IpLmpvaW4oIiIpLnNsaWNlKDAsIC0xKTsKICAgICAgICAgICAgICAgICAgICByLmZpbGVJdGVtLmZvcm1hdGVkTmFtZSA9IGZpbGVOYW1lICsgIi4iICsgZXh0ZW5zaW9uOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICByLmZpbGVJdGVtLmZvcm1hdGVkTmFtZSA9IHIuZmlsZUl0ZW0ubmFtZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGZpbGVzLnB1c2goci5maWxlSXRlbSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBlcnJvckNhbGxiYWNrICYmIGVycm9yQ2FsbGJhY2soYCR7ZkxpbmV9IOagvOW8j+mUmeivrz9gKTsKICAgICAgICAgICAgfQoKICAgICAgICB9CgogICAgICAgIHJldHVybiBmaWxlczsKICAgIH0KCiAgICAvL2ZpeDogdjMuNCDml7bpl7Tml6XmnJ\/kuK3lkKvmnIkiLyIsIjoi5a+86Ie055uu5b2V5oiW6ICF5paH5Lu25LiL6L295aSx6LSlCiAgICBmdW5jdGlvbiBnZXRDdXJyZW50VGltZVN0cmluZygpIHsKICAgICAgICBsZXQgdGltZSA9IG5ldyBEYXRlKCk7CiAgICAgICAgbGV0IHRpbWVTdHJpbmcgPSBgJHt0aW1lLnRvTG9jYWxlU3RyaW5nKCl9ICgke3RpbWUuZ2V0TWlsbGlzZWNvbmRzKCl9KWA7CiAgICAgICAgcmV0dXJuIHRpbWVTdHJpbmcucmVwbGFjZSgvXC8vZywgIi4iKS5yZXBsYWNlKC86L2csICIuIikKICAgIH0KCiAgICAvL+WcqHRhcmdldENpZOS4i+WIm+W7uuebruW9le+8jOaIkOWKn+WImei\/lOWbnuaWsOebruW9lWNpZO+8jOWQpuWImei\/lOWbnuWOn2NpZDvov5Tlm57igJktMeKAmO+8jHRhcmdldOW3sue7j+iiq+enu+mZpOaIluiAheWIoOmZpAogICAgYXN5bmMgZnVuY3Rpb24gY3JlYXRlUm9vdEZvbGRlcih0YXJnZXRDaWQsIGZvbGRlck5hbWUsIHJldHJ5VGltZXMsIHNsZWVwVGltZSwgcHJvY2Vzc0NhbGxiYWNrKSB7CiAgICAgICAgbGV0IGNpZCA9IHRhcmdldENpZDsKICAgICAgICBsZXQgbmV3Rm9sZGVyTmFtZSA9IGZvbGRlck5hbWU7CgogICAgICAgIGlmIChmb2xkZXJOYW1lID09ICIiKSB7CgogICAgICAgICAgICBuZXdGb2xkZXJOYW1lID0gYGF1dG9fY3JlYXRlQCR7Z2V0Q3VycmVudFRpbWVTdHJpbmcoKX1gOwogICAgICAgIH0KCiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCByZXRyeVRpbWVzOyBpKyspIHsKCiAgICAgICAgICAgIGlmIChpICE9IDApIHsKCiAgICAgICAgICAgICAgICBuZXdGb2xkZXJOYW1lID0gYCR7Zm9sZGVyTmFtZT09IiI\/ImF1dG9fY3JlYXRlIjpmb2xkZXJOYW1lfUAke2dldEN1cnJlbnRUaW1lU3RyaW5nKCl9YDsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcHJvY2Vzc0NhbGxiYWNrICYmIHByb2Nlc3NDYWxsYmFjayhg5q2j5Zyo6Ieq5Yqo5Yib5bu655uu5b2VJHtuZXdGb2xkZXJOYW1lfS4uLmApOwogICAgICAgICAgICBsZXQgdHIgPSBhd2FpdCBhZGRGb2xkZXIodGFyZ2V0Q2lkLCBuZXdGb2xkZXJOYW1lKTsKICAgICAgICAgICAgaWYgKHRyLnN0YXRlKSB7CiAgICAgICAgICAgICAgICBjaWQgPSB0ci5jaWQ7CiAgICAgICAgICAgICAgICBwcm9jZXNzQ2FsbGJhY2sgJiYgcHJvY2Vzc0NhbGxiYWNrKGDoh6rliqjliJvlu7rnm67lvZUke25ld0ZvbGRlck5hbWV95oiQ5Yqf77yBYCk7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfSBlbHNlIHsKCiAgICAgICAgICAgICAgICBwcm9jZXNzQ2FsbGJhY2sgJiYgcHJvY2Vzc0NhbGxiYWNrKGDoh6rliqjliJvlu7rnm67lvZUke25ld0ZvbGRlck5hbWV95aSx6LSl77yB5Y6f5Zug77yaJHt0ci5lcnJvcn3vvIzlsIboh6rliqjlsJ3or5XmlrDnmoTlkI3lrZcuLi5gKTsKICAgICAgICAgICAgICAgIGlmICh0ci5lcnJvci5pbmNsdWRlcygn5LqR56uv55uu5b2V5LiN5a2Y5ZyoJykgfHwgdHIuZXJyb3IuaW5jbHVkZXMoJ+aWh+S7tuS4jeWtmOWcqOaIluW3suWIoOmZpCcpKSB7CiAgICAgICAgICAgICAgICAgICAgY2lkID0gJy0xJzsgLy\/niLbnm67lvZXkuI3lrZjlnKjml7bnmoTmj5DnpLoKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGF3YWl0IGRlbGF5KHNsZWVwVGltZSk7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGxldCBzdGF0ZSA9IGNpZCAhPSAnLTEnOwogICAgICAgIGxldCBlcnJvciA9IHN0YXRlID8gIiIgOiAi5LqR56uv55uu5b2V5LmL5YmN5bey57uP5Yig6Zmk77yM6K+36YeN5paw6YCJ5oup5L+d5a2Y5L2N572u77yBIgogICAgICAgIC8vdG9kbzrniLbnm67lvZXkuI3lrZjlnKjml7bnmoTmj5DnpLoKICAgICAgICByZXR1cm4gewogICAgICAgICAgICBjaWQ6IGNpZCwKICAgICAgICAgICAgZm9sZGVyTmFtZTogbmV3Rm9sZGVyTmFtZSwKICAgICAgICAgICAgc3RhdGU6IHN0YXRlLAogICAgICAgICAgICBlcnJvcjogZXJyb3IKICAgICAgICB9OwogICAgfQoKICAgIGZ1bmN0aW9uIHVwbG9hZEZpbGVXaXRoVGltZU91dCh0aW1lT3V0LCBmaWxlUGFyZW50SUQsIGZpbGUsIHVwbG9hZEluZm8pIHsKICAgICAgICBjb25zb2xlLmxvZygndXBsb2FkRmlsZVdpdGhUaW1lT3V0JykKICAgICAgICBsZXQgdG8gPSBkZWxheSh0aW1lT3V0KS50aGVuKHQgPT4gewogICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgc3RhdGU6IGZhbHNlLAogICAgICAgICAgICAgICAgZXJyb3I6IGDnrYnlvoXkuIrkvKDnu5PmnpzotoXml7bvvIzmraTkuYPorablkYrvvIHmiJDlip\/kuI7lkKbvvIznnIvmnIDlkI7nu5\/orqHnu5PmnpzvvIFgLAogICAgICAgICAgICAgICAgZmlsZUl0ZW06IGZpbGUKICAgICAgICAgICAgfQogICAgICAgIH0pOwogICAgICAgIGxldCB1cCA9IHVwbG9hZEZpbGUoZmlsZVBhcmVudElELCBmaWxlLCB1cGxvYWRJbmZvKTsKCiAgICAgICAgcmV0dXJuIFByb21pc2UucmFjZShbdG8sIHVwXSk7CiAgICB9CgoKCiAgICBhc3luYyBmdW5jdGlvbiBwcm9jZXNzVXBsb2FkKGFsbEZpbGVzLCB3b3JraW5nTnVtYmVyLCBzbGVlcFRpbWUsIHJlc3VsdENhbGxiYWNrKSB7CiAgICAgICAgbGV0IGZpbGVBcnJheSA9IGFsbEZpbGVzLmZpbHRlcihxID0+ICFxLnN0YXRlKTsKICAgICAgICBsZXQgaW5kZXggPSAxOwogICAgICAgIGxldCBmaWxlTGVuZ3RoID0gYWxsRmlsZXMubGVuZ3RoOwogICAgICAgIGxldCBjb21wbGV0ZWQgPSBmaWxlTGVuZ3RoIC0gZmlsZUFycmF5Lmxlbmd0aDsKICAgICAgICBsZXQgcHJvbWlzQXJyYXkgPSBuZXcgQXJyYXkoKTsKICAgICAgICBsZXQgdXBsb2FkSW5mbyA9IGF3YWl0IGdldFVwbG9hZEluZm8oKTsKICAgICAgICBsZXQgbXNnOwogICAgICAgIGZvciAobGV0IGZpbGUgb2YgZmlsZUFycmF5KSB7CiAgICAgICAgICAgIGlmIChnZXRUYXNrQ2FuY2VsRmxhZygpKSB7CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygi6L2s5a2Y5Y+W5raIIik7CiAgICAgICAgICAgICAgICAvL3Bvc3RTaGExTWVzc2dhZShjcmVhdGVNZXNzYWdlKE1lc3NhZ2VUeXBlLlBST0NFU1NJTkcsICLlt7Llj5bmtojvvIzmraPlnKjnrYnlvoXov5vooYzkuK3nmoTku7vliqHnu5PmnZ8uLi4iKSk7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgICAgICBjb25zb2xlLmxvZyhmaWxlKTsKCiAgICAgICAgICAgIC8vbGV0IHIgPSB1cGxvYWRGaWxlKGZpbGUucGFyZW50SUQsIGZpbGUsIHVwbG9hZEluZm8pLnRoZW4odCA9PiB7CiAgICAgICAgICAgIGxldCByID0gdXBsb2FkRmlsZVdpdGhUaW1lT3V0KDgwMDAsIGZpbGUucGFyZW50SUQsIGZpbGUsIHVwbG9hZEluZm8pLnRoZW4odCA9PiB7CiAgICAgICAgICAgICAgICBjb21wbGV0ZWQgPSBjb21wbGV0ZWQgKyAxOwogICAgICAgICAgICAgICAgaWYgKHQuc3RhdGUpIHsKICAgICAgICAgICAgICAgICAgICBtc2cgPSBgPGRpdiBhbGlnbj0icmlnaHQiPjxiPiR7Y29tcGxldGVkfTwvYj4gfCA8Yj4ke2ZpbGVMZW5ndGh9PC9iPjwvZGl2Pjxocj7jgJAgPGI+JHt0LmZpbGVJdGVtLm5hbWV9PC9iPiDjgJHkuIrkvKDmiJDlip8uYDsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgbGV0IHVwbG9hZEVycm9yID0gYOOAkCA8Yj4ke3QuZmlsZUl0ZW0ubmFtZX08L2I+IOOAke+8miAke3QuZXJyb3J9YDsKICAgICAgICAgICAgICAgICAgICByZXN1bHRDYWxsYmFjayAmJiByZXN1bHRDYWxsYmFjayh7CiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlOiBmYWxzZSwKICAgICAgICAgICAgICAgICAgICAgICAgbXNnOiB1cGxvYWRFcnJvcgogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIG1zZyA9IGA8ZGl2IGFsaWduPSJyaWdodCI+PGI+JHtjb21wbGV0ZWR9PC9iPiB8IDxiPiR7ZmlsZUxlbmd0aH08L2I+PC9kaXY+PGhyPiR7dXBsb2FkRXJyb3J9YDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJlc3VsdENhbGxiYWNrICYmIHJlc3VsdENhbGxiYWNrKHsKICAgICAgICAgICAgICAgICAgICBzdGF0ZTogdHJ1ZSwKICAgICAgICAgICAgICAgICAgICBtc2c6IG1zZwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgcHJvbWlzQXJyYXkucHVzaChyKTsKCiAgICAgICAgICAgIGlmIChpbmRleCAlIHdvcmtpbmdOdW1iZXIgPT0gMCkgewogICAgICAgICAgICAgICAgYXdhaXQgZGVsYXkoc2xlZXBUaW1lKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKGluZGV4ICUgMTI4ID09IDApIHsKICAgICAgICAgICAgICAgIGF3YWl0IFByb21pc2UuYWxsKHByb21pc0FycmF5KTsKICAgICAgICAgICAgICAgIGxldCBzZWNvbmRzID0gMzsKICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2Vjb25kczsgaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgcmVzdWx0Q2FsbGJhY2sgJiYgcmVzdWx0Q2FsbGJhY2soewogICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZTogdHJ1ZSwKICAgICAgICAgICAgICAgICAgICAgICAgbXNnOiBg6Ziy5q2iMTE15pyN5Yqh5Zmo6ZmQ5Yi277yM5pqC5YGc5Y+R5YyF44CCPGJyPjxicj4ke3NlY29uZHMgLSBpfeenkuWQjue7p+e7rS4uLi5gCiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgYXdhaXQgZGVsYXkoMTAwMCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBwcm9taXNBcnJheSA9IG5ldyBBcnJheSgpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGluZGV4ID0gaW5kZXggKyAxOwogICAgICAgIH0KCiAgICAgICAgYXdhaXQgZGVsYXkoNTAwKTsKICAgICAgICBhd2FpdCBQcm9taXNlLmFsbChwcm9taXNBcnJheSk7CgogICAgICAgIHJldHVybiBmaWxlQXJyYXk7CiAgICB9CgoKICAgIC8vIHYzLjMg6L2s5a2Y5pe26I635Y+W5paH5Lu25LuO5Y6G5Y+y5LiK5Lyg5Lit6I635Y+W77yM5aaC5p6c5paH5Lu25aS55LyX5aSa77yM5q2k5pa55qGI6YCf5bqm5LyY5Yq\/5piO5pi+77yM5L2G5LiN5YWB6K645aSa6aG16Z2i5pON5L2cCiAgICBhc3luYyBmdW5jdGlvbiBwcm9jZXNzUmVuYW1lQnlVc2luZ0hpc3RvcnkoZmlsZXMsIHNlcGFyYXRvciwgc2xlZXBUaW1lLCByZXN1bHRDYWxsYmFjaykgewoKICAgICAgICBsZXQgaGlzdG9yeSA9IGF3YWl0IGdldExhc3RVcGxvYWRGaWxlcyhmaWxlcy5sZW5ndGgsIHNsZWVwVGltZSwgdCA9PiB7CiAgICAgICAgICAgIHJlc3VsdENhbGxiYWNrKHsKICAgICAgICAgICAgICAgIHN0YXRlOiB0cnVlLAogICAgICAgICAgICAgICAgbXNnOiB0CiAgICAgICAgICAgIH0pOwogICAgICAgIH0pOwoKICAgICAgICByZXN1bHRDYWxsYmFjayh7CiAgICAgICAgICAgIHN0YXRlOiB0cnVlLAogICAgICAgICAgICBtc2c6ICLmraPlnKjnrYnlvoXph43lkb3lkI0uLi7lpoLmnpzmlofku7bovoPlpJrvvIzor7fnrYnlvoXvvJvmiJbogIXlgZzmraLvvIznrYnku6XlkI7miYvliqjmk43kvZzljrvpmaTliIbpmpTnrKbjgIIiCiAgICAgICAgfSk7CiAgICAgICAgLy9maXg6IHYzLjMuMSDkv67lpI3lkKvmnInph43lpI3mlofku7bnmoTml7blgJnvvIzmnKrmiYDmnInlrozmiJDph43lkb3lkI3nmoRidWcKICAgICAgICBoaXN0b3J5LmZvckVhY2gocSA9PiBxLmlzTWFya2VkID0gZmFsc2UpOwogICAgICAgIGZvciAoY29uc3QgZmlsZSBvZiBmaWxlcykgewogICAgICAgICAgICAvL2NvbnNvbGUubG9nKCJmaWxlIikKICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhmaWxlKQogICAgICAgICAgICBsZXQgdGhpc0ZpbGUgPSBoaXN0b3J5LmZpbmQocSA9PiBxLnNoYTEgPT0gZmlsZS5zaGExICYmIHEucGFyZW50SUQgPT0gZmlsZS5wYXJlbnRJRCAmJiBxLm5hbWUgPT0gZmlsZS5mb3JtYXRlZE5hbWUgJiYgIXEuaXNNYXJrZWQpOwogICAgICAgICAgICAvL2NvbnNvbGUubG9nKCJ0aGlzRmlsZSIpCiAgICAgICAgICAgIC8vY29uc29sZS5sb2codGhpc0ZpbGUpCiAgICAgICAgICAgIGlmICh0aGlzRmlsZSkgewogICAgICAgICAgICAgICAgZmlsZS5pZCA9IHRoaXNGaWxlLmlkOwogICAgICAgICAgICAgICAgdGhpc0ZpbGUuaXNNYXJrZWQgPSB0cnVlOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihg5Y6G5Y+y6K6w5b2V6YeM5pyq5om+5YiwICR7ZmlsZS5uYW1lfWApOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBsZXQgc2VsZWN0ZWRGaWxlcyA9IGZpbGVzLmZpbHRlcihmID0+IGYuZm9ybWF0ZWROYW1lLnNlYXJjaChzZXBhcmF0b3IpICE9IC0xICYmIGYuaWQpLm1hcChmID0+IHsKICAgICAgICAgICAgbGV0IGZvID0gewogICAgICAgICAgICAgICAgaWQ6IGYuaWQsCiAgICAgICAgICAgICAgICBuYW1lOiBmLmZvcm1hdGVkTmFtZS5zcGxpdChzZXBhcmF0b3IpLmpvaW4oIiIpCiAgICAgICAgICAgIH07CiAgICAgICAgICAgIHJldHVybiBmbzsKICAgICAgICB9KTsKICAgICAgICBjb25zb2xlLmxvZyhzZWxlY3RlZEZpbGVzKQogICAgICAgIGxldCBpLCBqLCB0ZW1wb3JhcnksIGNodW5rID0gMTE1OwogICAgICAgIGZvciAoaSA9IDAsIGogPSBzZWxlY3RlZEZpbGVzLmxlbmd0aDsgaSA8IGo7IGkgKz0gY2h1bmspIHsKICAgICAgICAgICAgdGVtcG9yYXJ5ID0gc2VsZWN0ZWRGaWxlcy5zbGljZShpLCBpICsgY2h1bmspOwogICAgICAgICAgICByZXN1bHRDYWxsYmFjayAmJiByZXN1bHRDYWxsYmFjayh7CiAgICAgICAgICAgICAgICBzdGF0ZTogdHJ1ZSwKICAgICAgICAgICAgICAgIG1zZzogYOato+WcqOmHjeWRveWQjeesrCR7aSArIDF95YiwJHtpICsgdGVtcG9yYXJ5Lmxlbmd0aH3kuKrmlofku7YuLi5gCiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBsZXQgcmVuYW1lUmVzdWx0ID0gYXdhaXQgcmVuYW1lRmlsZXModGVtcG9yYXJ5KTsKICAgICAgICAgICAgaWYgKHJlbmFtZVJlc3VsdC5zdGF0ZSA9PT0gdHJ1ZSkgewogICAgICAgICAgICAgICAgcmVzdWx0Q2FsbGJhY2sgJiYgcmVzdWx0Q2FsbGJhY2soewogICAgICAgICAgICAgICAgICAgIHN0YXRlOiB0cnVlLAogICAgICAgICAgICAgICAgICAgIG1zZzogYOmHjeWRveWQjeesrCR7aSArIDF95YiwJHtpICsgdGVtcG9yYXJ5Lmxlbmd0aH3kuKrmlofku7bmiJDlip8hYAogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICByZXN1bHRDYWxsYmFjayAmJiByZXN1bHRDYWxsYmFjayh7CiAgICAgICAgICAgICAgICAgICAgc3RhdGU6IGZhbHNlLAogICAgICAgICAgICAgICAgICAgIG1zZzogcmVuYW1lUmVzdWx0LmVycm9yCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIHJlc3VsdENhbGxiYWNrICYmIHJlc3VsdENhbGxiYWNrKHsKICAgICAgICAgICAgICAgICAgICBzdGF0ZTogdHJ1ZSwKICAgICAgICAgICAgICAgICAgICBtc2c6IGDph43lkb3lkI3nrKwke2kgKyAxfeWIsCR7aSArIDEgKyB0ZW1wb3JhcnkubGVuZ3RofeS4quaWh+S7tuS4reacieWksei0pe+8ge+8gSFgCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQogICAgICAgICAgICBhd2FpdCBkZWxheShzbGVlcFRpbWUpOwogICAgICAgIH0KCiAgICB9CgoKCiAgICBhc3luYyBmdW5jdGlvbiBwcm9jZXNzUmVuYW1lKHRhcmdldEZvbGRlckNpZCwgc2VwYXJhdG9yLCBzbGVlcFRpbWUsIHJlc3VsdENhbGxiYWNrKSB7CiAgICAgICAgbGV0IG9ubGluZUZpbGVzID0gbmV3IEFycmF5KCk7CiAgICAgICAgYXdhaXQgZ2V0QWxsRmlsZXModGFyZ2V0Rm9sZGVyQ2lkLCBvbmxpbmVGaWxlcywgdGFyZ2V0Rm9sZGVyQ2lkLCAoZm5hbWUsIHBJbmRleCkgPT4gewogICAgICAgICAgICBpZiAocEluZGV4ID4gMSkgewogICAgICAgICAgICAgICAgcmVzdWx0Q2FsbGJhY2sgJiYgcmVzdWx0Q2FsbGJhY2soewogICAgICAgICAgICAgICAgICAgIHN0YXRlOiB0cnVlLAogICAgICAgICAgICAgICAgICAgIG1zZzogYOato+WcqOiOt+WPliDjgJAke2ZuYW1lfeOAkSDkuIvnrKwgJHtwSW5kZXh9IOmhteeahOWGheWuuS4uLmAKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgcmVzdWx0Q2FsbGJhY2sgJiYgcmVzdWx0Q2FsbGJhY2soewogICAgICAgICAgICAgICAgICAgIHN0YXRlOiB0cnVlLAogICAgICAgICAgICAgICAgICAgIG1zZzogYOato+WcqOiOt+WPliDjgJAke2ZuYW1lfeOAkSDkuIvnmoTlhoXlrrkuLi5gCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQogICAgICAgIH0pOwoKCiAgICAgICAgbGV0IHNlbGVjdGVkRmlsZXMgPSBvbmxpbmVGaWxlcy5maWx0ZXIoZiA9PiBmLm5hbWUuc2VhcmNoKHNlcGFyYXRvcikgIT0gLTEpLm1hcChmID0+IHsKICAgICAgICAgICAgbGV0IGZvID0gewogICAgICAgICAgICAgICAgaWQ6IGYuaWQsCiAgICAgICAgICAgICAgICBuYW1lOiBmLm5hbWUuc3BsaXQoc2VwYXJhdG9yKS5qb2luKCIiKQogICAgICAgICAgICB9OwogICAgICAgICAgICByZXR1cm4gZm87CiAgICAgICAgfSk7CgogICAgICAgIGxldCBpLCBqLCB0ZW1wb3JhcnksIGNodW5rID0gMTE1OwogICAgICAgIGZvciAoaSA9IDAsIGogPSBzZWxlY3RlZEZpbGVzLmxlbmd0aDsgaSA8IGo7IGkgKz0gY2h1bmspIHsKICAgICAgICAgICAgdGVtcG9yYXJ5ID0gc2VsZWN0ZWRGaWxlcy5zbGljZShpLCBpICsgY2h1bmspOwogICAgICAgICAgICByZXN1bHRDYWxsYmFjayAmJiByZXN1bHRDYWxsYmFjayh7CiAgICAgICAgICAgICAgICBzdGF0ZTogdHJ1ZSwKICAgICAgICAgICAgICAgIG1zZzogYOato+WcqOmHjeWRveWQjeesrCR7aSArIDF95YiwJHtpICsgdGVtcG9yYXJ5Lmxlbmd0aH3kuKrmlofku7YuLi5gCiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBsZXQgcmVuYW1lUmVzdWx0ID0gYXdhaXQgcmVuYW1lRmlsZXModGVtcG9yYXJ5KTsKICAgICAgICAgICAgaWYgKHJlbmFtZVJlc3VsdC5zdGF0ZSA9PT0gdHJ1ZSkgewogICAgICAgICAgICAgICAgcmVzdWx0Q2FsbGJhY2sgJiYgcmVzdWx0Q2FsbGJhY2soewogICAgICAgICAgICAgICAgICAgIHN0YXRlOiB0cnVlLAogICAgICAgICAgICAgICAgICAgIG1zZzogYOmHjeWRveWQjeesrCR7aSArIDF95YiwJHtpICsgdGVtcG9yYXJ5Lmxlbmd0aH3kuKrmlofku7bmiJDlip8hYAogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICByZXN1bHRDYWxsYmFjayAmJiByZXN1bHRDYWxsYmFjayh7CiAgICAgICAgICAgICAgICAgICAgc3RhdGU6IGZhbHNlLAogICAgICAgICAgICAgICAgICAgIG1zZzogcmVuYW1lUmVzdWx0LmVycm9yCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIHJlc3VsdENhbGxiYWNrICYmIHJlc3VsdENhbGxiYWNrKHsKICAgICAgICAgICAgICAgICAgICBzdGF0ZTogdHJ1ZSwKICAgICAgICAgICAgICAgICAgICBtc2c6IGDph43lkb3lkI3nrKwke2kgKyAxfeWIsCR7aSArIDEgKyB0ZW1wb3JhcnkubGVuZ3RofeS4quaWh+S7tuS4reacieWksei0pe+8ge+8gSFgCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQogICAgICAgICAgICBhd2FpdCBkZWxheShzbGVlcFRpbWUpOwogICAgICAgIH0KCiAgICB9CgogICAgLy\/pgJrov4dzaGEx6ZO+5o6l6L2s5a2Y5paH5Lu2CiAgICAvL3VwbG9hZFNldHRpbmc6e3RhcmdldENpZCx0ZXh0LHJvb3RGb2xkZXI6e25lZWRUb0NyZWF0ZTp0cnVlLGZvbGRlck5hbWU6IiJ9LGl0ZW1OYW1lU2VwYXJhdG9yOntuZWVkVG9TZXBhcmF0ZTp0cnVlLHNlcGFyYXRvcjoiIn19CiAgICBhc3luYyBmdW5jdGlvbiBVcGxvYWRGaWxlc0J5U2hhMUxpbmtzKGNvbmZpZywgY29udGludWVkVGFza1NldHRpbmcgPSBudWxsKSB7CgogICAgICAgIGxldCB1cGxvYWRDb25maWcgPSBjb250aW51ZWRUYXNrU2V0dGluZyA9PSBudWxsID8gY29uZmlnIDogY29udGludWVkVGFza1NldHRpbmcudXBsb2FkQ29uZmlnOwogICAgICAgIGxldCBmb2xkZXJTbGVlcFRpbWUgPSB1cGxvYWRDb25maWcuZm9sZGVyU2V0dGluZy5zbGVlcFRpbWU7CiAgICAgICAgbGV0IG5hbWVTZXBhcmF0b3IgPSAiIjsKICAgICAgICBsZXQgbmV3VGFyZ2V0Q2lkID0gJy0xJzsKICAgICAgICBsZXQgZmlsZXM7CiAgICAgICAgbGV0IGZpbGVOYW1lID0gJyc7CgogICAgICAgIGlmIChjb250aW51ZWRUYXNrU2V0dGluZyA9PSBudWxsKSB7CiAgICAgICAgICAgIC8vZml4OiB2My40IOWcqOe6v+iOt+WPluWGheWuueWPr+iDveacieepuuagvCzkv67lpI3op6PmnpDlh7rplJkKICAgICAgICAgICAgbGV0IGZvcm1hdGVkVGV4dCA9IHVwbG9hZENvbmZpZy50ZXh0LnRyaW0oKTsKICAgICAgICAgICAgaWYgKCFmb3JtYXRlZFRleHQpIHJldHVybjsKICAgICAgICAgICAgcG9zdFNoYTFNZXNzZ2FlKGNyZWF0ZU1lc3NhZ2UoTWVzc2FnZVR5cGUuQkVHSU40VVBMT0FELCAi5q2j5Zyo6Kej5p6Qc2hhMemTvuaOpS4uLiIpKTsKCiAgICAgICAgICAgIC8v6Kej5p6QanNvbu+8jOi9rOS4umlubGluZSB0ZXh0O+W5tuS4lOS7jmpzb27kuK3ojrflj5Zyb290IGZvbGRlciBuYW1lCiAgICAgICAgICAgIGlmIChmb3JtYXRlZFRleHQuc3RhcnRzV2l0aCgneycpICYmIGZvcm1hdGVkVGV4dC5lbmRzV2l0aCgnfScpKSB7CiAgICAgICAgICAgICAgICBsZXQgciA9IGZvcm1hdEpzb25Ub0NvbW1vbihmb3JtYXRlZFRleHQpOwogICAgICAgICAgICAgICAgaWYgKHIuc3RhdGUpIHsKICAgICAgICAgICAgICAgICAgICB1cGxvYWRDb25maWcuZm9sZGVyU2V0dGluZy5yb290Rm9sZGVyLmZvbGRlck5hbWUgPSByLnJvb3RGb2xkZXI7CiAgICAgICAgICAgICAgICAgICAgZm9ybWF0ZWRUZXh0ID0gci50ZXh0OwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCJqc29uIOino+aekOWksei0pSIpOwogICAgICAgICAgICAgICAgICAgIHBvc3RTaGExTWVzc2dhZShjcmVhdGVNZXNzYWdlKE1lc3NhZ2VUeXBlLkVORDRVUExPQUQsICJqc29u6Kej5p6Q5aSx6LSl77yB5piv5LiN5piv5qC85byP5LiN5Yy56YWN77yBIikpOwogICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgICAgICAvL2pzb24g6Kej5p6Q5aSx6LSl77yM5o+Q56S677yM77yMCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8v6Kej5p6QaW5saW5lIHRleHQgc2hhMSBsaW5rcyzlubbmoLnmja7phY3nva7orr7nva7liIbpmpTnrKYKCiAgICAgICAgICAgIGlmICh1cGxvYWRDb25maWcuaXRlbU5hbWVTZXBhcmF0b3IubmVlZFRvU2VwYXJhdGUgJiYgdXBsb2FkQ29uZmlnLml0ZW1OYW1lU2VwYXJhdG9yLnNlcGFyYXRvcikgewogICAgICAgICAgICAgICAgbmFtZVNlcGFyYXRvciA9IHVwbG9hZENvbmZpZy5pdGVtTmFtZVNlcGFyYXRvci5zZXBhcmF0b3I7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGZpbGVzID0gcGFyc2VTaGExTGlua3NUb0ZpbGVBcnJheShmb3JtYXRlZFRleHQsIG5hbWVTZXBhcmF0b3IsIGVycm9yTXNnID0+IHsKICAgICAgICAgICAgICAgIHBvc3RTaGExTWVzc2dhZShjcmVhdGVNZXNzYWdlKE1lc3NhZ2VUeXBlLkVSUk9SLCBlcnJvck1zZykpOwogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIGlmIChmaWxlcy5sZW5ndGggPT0gMCkgewogICAgICAgICAgICAgICAgcG9zdFNoYTFNZXNzZ2FlKGNyZWF0ZU1lc3NhZ2UoTWVzc2FnZVR5cGUuRU5ELCBg5pyq6I635Y+W5Yiw5pyJ5pWI55qE6ZO+5o6l77yBYCkpOwogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CgogICAgICAgICAgICBwb3N0U2hhMU1lc3NnYWUoY3JlYXRlTWVzc2FnZShNZXNzYWdlVHlwZS5QUk9DRVNTSU5HLCBg6I635Y+W5Yiw6ZO+5o6l5Liq5pWw77yaJHtmaWxlcy5sZW5ndGh9YCkpOwogICAgICAgICAgICBhd2FpdCBkZWxheSg1MDApOwoKICAgICAgICAgICAgLy\/moLnnm67lvZXorr7nva4KICAgICAgICAgICAgLy\/moLnmja7phY3nva7ph43mlrDorr7nva50YXJnZXRDaWQKICAgICAgICAgICAgbmV3VGFyZ2V0Q2lkID0gdXBsb2FkQ29uZmlnLnRhcmdldENpZDsKCiAgICAgICAgICAgIGlmICh1cGxvYWRDb25maWcuZm9sZGVyU2V0dGluZy5yb290Rm9sZGVyLm5lZWRUb0NyZWF0ZSA9PT0gdHJ1ZSkgewogICAgICAgICAgICAgICAgbGV0IHJvb3RGb2xkZXJOYW1lID0gdXBsb2FkQ29uZmlnLmZvbGRlclNldHRpbmcucm9vdEZvbGRlci5mb2xkZXJOYW1lOwogICAgICAgICAgICAgICAgbGV0IHJvb3QgPSBhd2FpdCBjcmVhdGVSb290Rm9sZGVyKG5ld1RhcmdldENpZCwgcm9vdEZvbGRlck5hbWUsIDExLCBmb2xkZXJTbGVlcFRpbWUgKiAyLCBtc2cgPT4gewogICAgICAgICAgICAgICAgICAgIHBvc3RTaGExTWVzc2dhZShjcmVhdGVNZXNzYWdlKE1lc3NhZ2VUeXBlLlBST0NFU1NJTkcsIG1zZykpOwogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgZmlsZU5hbWUgPSByb290LmZvbGRlck5hbWU7CiAgICAgICAgICAgICAgICBuZXdUYXJnZXRDaWQgPSByb290LmNpZDsKICAgICAgICAgICAgICAgIGF3YWl0IGRlbGF5KDUwMCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY29uc29sZS5sb2coYG5ld1RhcmdldENpZDogJHtuZXdUYXJnZXRDaWR9YCk7CgogICAgICAgICAgICBpZiAobmV3VGFyZ2V0Q2lkID09ICItMSIpIHsKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCLpgInmi6nnmoTkv53lrZjlpITmlofku7blpLnlt7Lnu4\/ooqvliKDpmaTmiJbogIXnp7vliqgiKTsKICAgICAgICAgICAgICAgIHBvc3RTaGExTWVzc2dhZShjcmVhdGVNZXNzYWdlKE1lc3NhZ2VUeXBlLkVORCwgIuiHquWKqOWIm+W7uuagueebruW9leWHuumUme+8miAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxici8+6YCJ5oup55qE5L+d5a2Y5aSE5paH5Lu25aS5LOW3sue7j+iiq+WIoOmZpOaIluiAheenu+WKqO+8jOivt+mHjeaWsOmAieaLqeS\/neWtmOS9jee9ru+8gSIpKTsKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy\/lrZDnm67lvZXorr7nva4KICAgICAgICAgICAgZmlsZXMuZm9yRWFjaChmID0+IHsKICAgICAgICAgICAgICAgIGYucGFyZW50SUQgPSBuZXdUYXJnZXRDaWQ7CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgaWYgKHVwbG9hZENvbmZpZy5mb2xkZXJTZXR0aW5nLm5vdENyZWF0ZUFueUNoaWxkRm9sZGVyID09PSBmYWxzZSkgLy\/lj6\/ku6XliJvlu7rnm67lvZUKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgY29uc29sZS5sb2coIumcgOimgeWIm+W7uuWtkOebruW9lSIpOwogICAgICAgICAgICAgICAgLy\/moLnmja7phY3nva7orr7nva7mr4\/kuKrmlofku7bnmoRwYXJlbnQgaWQKICAgICAgICAgICAgICAgIC8v5pyA5aSn55qE5bGC5qyhCiAgICAgICAgICAgICAgICBsZXQgbWF4TGV2ZWwgPSBNYXRoLm1heC5hcHBseShNYXRoLCBmaWxlcy5tYXAoZSA9PiBlLmxlbmd0aCkpOwogICAgICAgICAgICAgICAgbGV0IGxldmVsID0gMDsKICAgICAgICAgICAgICAgIC8vY2lk5pu05pawCiAgICAgICAgICAgICAgICBwb3N0U2hhMU1lc3NnYWUoY3JlYXRlTWVzc2FnZShNZXNzYWdlVHlwZS5QUk9DRVNTSU5HLCBg5q2j5Zyo6YWN572u5a2Q55uu5b2V55qE55Sf5oiQLi4uYCkpOwogICAgICAgICAgICAgICAgYXdhaXQgdXBkYXRlUGFyZW50SUQobmV3VGFyZ2V0Q2lkLCAnJywKICAgICAgICAgICAgICAgICAgICBsZXZlbCwgbWF4TGV2ZWwsIGZpbGVzLCBmb2xkZXJTbGVlcFRpbWUgKiAxLjUsIHQgPT4gewogICAgICAgICAgICAgICAgICAgICAgICBsZXQgc3QgPSB0LnN0YXRlID8gIuaIkOWKny4iIDogIuWksei0pe+8ge+8ge+8gSAiICsgdC5lcnJvcjsKICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG1zZyA9IGDliJvlu7rlrZDnm67lvZUgPGI+JHt0LmZvbGRlck5hbWV9PC9iPiAke3N0fWA7CiAgICAgICAgICAgICAgICAgICAgICAgIHBvc3RTaGExTWVzc2dhZShjcmVhdGVNZXNzYWdlKE1lc3NhZ2VUeXBlLlBST0NFU1NJTkcsIG1zZykpOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXQuc3RhdGUpIHBvc3RTaGExTWVzc2dhZShjcmVhdGVNZXNzYWdlKE1lc3NhZ2VUeXBlLkVSUk9SLCBtc2cpKTsKICAgICAgICAgICAgICAgICAgICB9KTsKCgogICAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgbmV3VGFyZ2V0Q2lkID0gY29udGludWVkVGFza1NldHRpbmcudGFyZ2V0Q2lkOwogICAgICAgICAgICBmaWxlcyA9IGNvbnRpbnVlZFRhc2tTZXR0aW5nLmRhdGE7CiAgICAgICAgICAgIGZpbGVOYW1lID0gY29udGludWVkVGFza1NldHRpbmcuZmlsZU5hbWU7CiAgICAgICAgfQoKICAgICAgICB3aW5kb3cucGFyZW50LmRvY3VtZW50Lm15RGF0YSA9IGZpbGVzOwogICAgICAgIHBvc3RTaGExTWVzc2dhZShjcmVhdGVNZXNzYWdlKE1lc3NhZ2VUeXBlLlNIT1dDQU5DRWwpKTsKICAgICAgICBjb25zb2xlLmxvZyhmaWxlcy5sZW5ndGgpOwogICAgICAgIC8v5paH5Lu25LiK5LygCiAgICAgICAgYXdhaXQgcHJvY2Vzc1VwbG9hZChmaWxlcywgdXBsb2FkQ29uZmlnLnVwbG9hZC53b3JraW5nTnVtYmVyLCB1cGxvYWRDb25maWcudXBsb2FkLnNsZWVwVGltZSwgcmVzdWx0ID0+IHsKICAgICAgICAgICAgaWYgKHJlc3VsdC5zdGF0ZSA9PT0gdHJ1ZSkgewogICAgICAgICAgICAgICAgcG9zdFNoYTFNZXNzZ2FlKGNyZWF0ZU1lc3NhZ2UoTWVzc2FnZVR5cGUuUFJPQ0VTU0lORywgcmVzdWx0Lm1zZykpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgcG9zdFNoYTFNZXNzZ2FlKGNyZWF0ZU1lc3NhZ2UoTWVzc2FnZVR5cGUuRVJST1IsIHJlc3VsdC5tc2cpKTsKICAgICAgICAgICAgfQogICAgICAgIH0pOwogICAgICAgIGxldCBpc1Rhc2tDYW5jZWxlZCA9IGdldFRhc2tDYW5jZWxGbGFnKCk7CgogICAgICAgIHBvc3RTaGExTWVzc2dhZShjcmVhdGVNZXNzYWdlKE1lc3NhZ2VUeXBlLkhJREVDQU5DRUwpKTsKCiAgICAgICAgLy\/moLnmja7phY3nva7vvIzph43lkb3lkI3mlofku7YKICAgICAgICBpZiAodXBsb2FkQ29uZmlnLml0ZW1OYW1lU2VwYXJhdG9yLm5lZWRUb1NlcGFyYXRlICYmCiAgICAgICAgICAgIHVwbG9hZENvbmZpZy5pdGVtTmFtZVNlcGFyYXRvci5uZWVkVG9SZW1vdmVTZXBhcmF0b3IgJiYKICAgICAgICAgICAgdXBsb2FkQ29uZmlnLml0ZW1OYW1lU2VwYXJhdG9yLnNlcGFyYXRvciAmJgogICAgICAgICAgICAhaXNUYXNrQ2FuY2VsZWQpIHsKICAgICAgICAgICAgcG9zdFNoYTFNZXNzZ2FlKGNyZWF0ZU1lc3NhZ2UoTWVzc2FnZVR5cGUuUFJPQ0VTU0lORywgIuW8gOWni+iOt+WPluaWh+S7tu+8jOW5tuiHquWKqOmHjeWRveWQjS4uLiIpKTsKICAgICAgICAgICAgYXdhaXQgZGVsYXkoZm9sZGVyU2xlZXBUaW1lKTsKICAgICAgICAgICAgY29uc29sZS5sb2coZmlsZXMpCiAgICAgICAgICAgIGF3YWl0IHByb2Nlc3NSZW5hbWVCeVVzaW5nSGlzdG9yeShmaWxlcywgdXBsb2FkQ29uZmlnLml0ZW1OYW1lU2VwYXJhdG9yLnNlcGFyYXRvciwgZm9sZGVyU2xlZXBUaW1lLCByZXN1bHQgPT4gewogICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5zdGF0ZSA9PT0gdHJ1ZSkgewogICAgICAgICAgICAgICAgICAgIHBvc3RTaGExTWVzc2dhZShjcmVhdGVNZXNzYWdlKE1lc3NhZ2VUeXBlLlBST0NFU1NJTkcsIHJlc3VsdC5tc2cpKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgcG9zdFNoYTFNZXNzZ2FlKGNyZWF0ZU1lc3NhZ2UoTWVzc2FnZVR5cGUuRVJST1IsIHJlc3VsdC5tc2cpKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIC8vIGF3YWl0IHByb2Nlc3NSZW5hbWUobmV3VGFyZ2V0Q2lkLCB1cGxvYWRDb25maWcuaXRlbU5hbWVTZXBhcmF0b3Iuc2VwYXJhdG9yLCBmb2xkZXJTbGVlcFRpbWUsIHJlc3VsdCA9PiB7CiAgICAgICAgICAgIC8vICAgICBpZiAocmVzdWx0LnN0YXRlID09PSB0cnVlKSB7CiAgICAgICAgICAgIC8vICAgICAgICAgcG9zdFNoYTFNZXNzZ2FlKGNyZWF0ZU1lc3NhZ2UoTWVzc2FnZVR5cGUuUFJPQ0VTU0lORywgcmVzdWx0Lm1zZykpOwogICAgICAgICAgICAvLyAgICAgfSBlbHNlIHsKICAgICAgICAgICAgLy8gICAgICAgICBwb3N0U2hhMU1lc3NnYWUoY3JlYXRlTWVzc2FnZShNZXNzYWdlVHlwZS5FUlJPUiwgcmVzdWx0Lm1zZykpOwogICAgICAgICAgICAvLyAgICAgfQogICAgICAgICAgICAvLyB9KTsKCiAgICAgICAgICAgIHBvc3RTaGExTWVzc2dhZShjcmVhdGVNZXNzYWdlKE1lc3NhZ2VUeXBlLlBST0NFU1NJTkcsICLmlofku7bmibnph4\/ljrvpmaTliIbpmpTnrKbvvIjph43lkb3lkI3vvInlrozmiJDvvIEiKSk7CiAgICAgICAgICAgIGF3YWl0IGRlbGF5KGZvbGRlclNsZWVwVGltZSAqIDIpOwogICAgICAgIH0KCiAgICAgICAgdmFyIGZhaWxzID0gZmlsZXMuZmlsdGVyKHEgPT4gIXEuc3RhdGUpOwogICAgICAgIHZhciBmYWlsVGV4dCA9IGZhaWxzLm1hcChmdW5jdGlvbiAocCkgewogICAgICAgICAgICB2YXIgciA9IGNvbnZlcnRUb1NoYTFMaW5rKHAsIGZhbHNlKTsKICAgICAgICAgICAgcmV0dXJuIHIubXNnOwogICAgICAgIH0pLmpvaW4oIlxyXG4iKTsKCiAgICAgICAgaWYgKGZhaWxUZXh0KSBHTV9zZXRDbGlwYm9hcmQoZmFpbFRleHQpOwogICAgICAgIGlmIChpc1Rhc2tDYW5jZWxlZCkgewogICAgICAgICAgICAvL3RvZG865Y+W5raI6L2s5a2YCiAgICAgICAgICAgIGxldCBmaWxlX25hbWUgPSBmaWxlTmFtZSArICJf6L2s5a2YX+acquWujOaIkC43dGFzayI7CiAgICAgICAgICAgIGxldCBkYXRhID0gZmlsZXMubWFwKGYgPT4gewogICAgICAgICAgICAgICAgYGxldCB0ZW1wRmlsZT17CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnRJRDpmLnBhcmVudElELAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTpmLm5hbWUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplOmYuc2l6ZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNoYTE6Zi5zaGExLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJlaWQ6Zi5wcmVpZCwKICAgICAgICAgICAgICAgICAgICAgICAgfTtgCiAgICAgICAgICAgICAgICBsZXQgdGVtcEZpbGUgPSBbCiAgICAgICAgICAgICAgICAgICAgZi5wYXJlbnRJRCwgZi5uYW1lLCBmLmZvcm1hdGVkTmFtZSwgZi5zaXplLCBmLnNoYTEsIGYucHJlaWQsIGYuc3RhdGUKICAgICAgICAgICAgICAgIF07CiAgICAgICAgICAgICAgICByZXR1cm4gdGVtcEZpbGU7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICB1cGxvYWRDb25maWcudGV4dCA9ICcnOwogICAgICAgICAgICBsZXQgdGFza0pzb24gPSB7CiAgICAgICAgICAgICAgICB0YXNrVHlwZTogVGFza1R5cGUuVVBMT0FELAogICAgICAgICAgICAgICAgdGFyZ2V0Q2lkOiBuZXdUYXJnZXRDaWQsCiAgICAgICAgICAgICAgICBmaWxlTmFtZTogZmlsZU5hbWUsCiAgICAgICAgICAgICAgICBkYXRhOiBkYXRhLAogICAgICAgICAgICAgICAgdXBsb2FkQ29uZmlnOiB1cGxvYWRDb25maWcKICAgICAgICAgICAgfTsKICAgICAgICAgICAgbGV0IHRleHQgPSBKU09OLnN0cmluZ2lmeSh0YXNrSnNvbikKICAgICAgICAgICAgZG93bmxvYWQoZmlsZV9uYW1lLCB0ZXh0KTsKCiAgICAgICAgfQoKICAgICAgICBsZXQgbXNnID0gYOWujOaIkOS4iuS8oO+8geaIkOWKnyA8Yj4keyhmaWxlcy5sZW5ndGggLSBmYWlscy5sZW5ndGgpfTwvYj4g77yM5aSx6LSl5oiW6ICF5Y+W5raIIDxiPiR7ZmFpbHMubGVuZ3RofTwvYj5cCiAgICAgICAgICAgICAgICA8YnI+PGJyPuWmguaenOacieWksei0pe+8jOW3suWwhuWksei0pXNoYTHpk77mjqXlpI3liLbliLDliarotLTmnb\/vvIHlpoLmnpzovazlrZjlpLHotKXvvIzor7fmo4Dmn6VzaGEx6ZO+5o6l5qC85byP5oiW6ICF5ZyoIGNocm9tZSDkuIrlsJ3or5XovazlrZjjgIJcCiAgICAgICAgICAgICAgICDojrflj5bmnIDmlrDniYjvvIzmiJbogIXpgYfliLDpl67popjljrvmraTlj43ppojvvIzmhJ\/osKIgIeeCueWHuy0+IDxhIGhyZWY9IiR7VElQUy5VcGRhdGVVcmx9IiB0YXJnZXQ9Il9ibGFuayI+JHtUSVBTLlZlcnNpb25UaXBzfTwvYT5gOwogICAgICAgIHBvc3RTaGExTWVzc2dhZShjcmVhdGVNZXNzYWdlKE1lc3NhZ2VUeXBlLkVORDRVUExPQUQsIG1zZywgbmV3VGFyZ2V0Q2lkKSk7CgogICAgfQoKCgogICAgZnVuY3Rpb24gZ2V0RmlsZUl0ZW1QcmVpZFdpdGhUaW1lT3V0KHRpbWVPdXQsIGZpbGUpIHsKICAgICAgICBjb25zb2xlLmxvZygnZ2V0RmlsZUl0ZW1QcmVpZFdpdGhUaW1lT3V0JykKICAgICAgICBsZXQgdG8gPSBkZWxheSh0aW1lT3V0KS50aGVuKHQgPT4gewogICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgc3RhdGU6IGZhbHNlLAogICAgICAgICAgICAgICAgZXJyb3I6IGDnrYnlvoXmj5Dlj5bnu5PmnpzotoXml7bvvIzmraTkuYPorablkYrvvIzmiJDlip\/kuI7lkKbnnIvmnIDlkI7nu5PmnpzvvIFgLAogICAgICAgICAgICAgICAgZmlsZUl0ZW06IGZpbGUKICAgICAgICAgICAgfQogICAgICAgIH0pOwogICAgICAgIGxldCB1cCA9IGdldEZpbGVJdGVtUHJlaWQoZmlsZSk7CgogICAgICAgIHJldHVybiBQcm9taXNlLnJhY2UoW3RvLCB1cF0pOwogICAgfQoKCiAgICBmdW5jdGlvbiBHZXRGaWxlSXRlbUJ5bGlOb2RlKGxpTm9kZSkgewoKICAgICAgICB2YXIgcEl0ZW0gPSB7CiAgICAgICAgICAgIGlkOiAiIiwKICAgICAgICAgICAgcGFyZW50SUQ6ICIiLAogICAgICAgICAgICBpc0ZvbGRlcjogZmFsc2UsCiAgICAgICAgICAgIG5hbWU6ICIiLAogICAgICAgICAgICBzaXplOiAwLAogICAgICAgICAgICBwaWNrQ29kZTogIiIsCiAgICAgICAgICAgIHNoYTE6ICIiLAogICAgICAgICAgICBwYXRoczogW10sCiAgICAgICAgICAgIHByZWlkOiAiIiwKICAgICAgICAgICAgc2VsZWN0ZWQ6IGZhbHNlCgogICAgICAgIH07CgogICAgICAgIHZhciB0eXBlID0gbGlOb2RlLmdldEF0dHJpYnV0ZSgiZmlsZV90eXBlIik7CiAgICAgICAgcEl0ZW0ubmFtZSA9IGxpTm9kZS5nZXRBdHRyaWJ1dGUoJ3RpdGxlJyk7CiAgICAgICAgcEl0ZW0ucGFyZW50SUQgPSBsaU5vZGUuZ2V0QXR0cmlidXRlKCdwX2lkJyk7CgogICAgICAgIHZhciBpc1NlbGVjdGVkID0gbGlOb2RlLmdldEF0dHJpYnV0ZSgnY2xhc3MnKTsKICAgICAgICBpZiAoaXNTZWxlY3RlZCA9PSAic2VsZWN0ZWQiKSBwSXRlbS5zZWxlY3RlZCA9IHRydWU7CgogICAgICAgIGlmICh0eXBlID09ICIwIikgewogICAgICAgICAgICBwSXRlbS5pZCA9IGxpTm9kZS5nZXRBdHRyaWJ1dGUoJ2NhdGVfaWQnKTsKICAgICAgICAgICAgcEl0ZW0uaXNGb2xkZXIgPSB0cnVlOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHBJdGVtLnNpemUgPSBsaU5vZGUuZ2V0QXR0cmlidXRlKCdmaWxlX3NpemUnKTsKICAgICAgICAgICAgcEl0ZW0uc2hhMSA9IGxpTm9kZS5nZXRBdHRyaWJ1dGUoJ3NoYTEnKTsKICAgICAgICAgICAgcEl0ZW0ucGlja0NvZGUgPSBsaU5vZGUuZ2V0QXR0cmlidXRlKCdwaWNrX2NvZGUnKTsKICAgICAgICAgICAgcEl0ZW0uaWQgPSBsaU5vZGUuZ2V0QXR0cmlidXRlKCdmaWxlX2lkJyk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gcEl0ZW07CiAgICB9CgogICAgY29uc3QgRklMRVNJWkUgPSAxMjggKiAxMDI0OwogICAgYXN5bmMgZnVuY3Rpb24gSW5uZXJDcmVhdGVTaGExTGlua3MoYWxsRmlsZXMsIHR4dE5hbWUpIHsKICAgICAgICB2YXIgbXNnID0gIiI7CiAgICAgICAgdmFyIGluZGV4ID0gMTsKICAgICAgICB2YXIgY29tcGxldGVkSW5kZXggPSAxOwogICAgICAgIHZhciBwcm9taXNBcnJheSA9IG5ldyBBcnJheSgpOwoKICAgICAgICBmb3IgKGxldCBmaWxlIG9mIGFsbEZpbGVzKSB7CiAgICAgICAgICAgIGxldCBmaWxlU2l6ZSA9IHBhcnNlSW50KGZpbGUuc2l6ZSk7CiAgICAgICAgICAgIGZpbGUuc2l6ZSA9IGZpbGVTaXplOwogICAgICAgICAgICBpZiAoIWZpbGUucHJlaWQgJiYgZmlsZS5zaXplIDw9IEZJTEVTSVpFKSB7CiAgICAgICAgICAgICAgICBmaWxlLnByZWlkID0gZmlsZS5zaGExOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBsZXQgZmlsZXMgPSBhbGxGaWxlcy5maWx0ZXIoZiA9PiAhZi5wcmVpZCk7CiAgICAgICAgY29tcGxldGVkSW5kZXggPSBhbGxGaWxlcy5sZW5ndGggLSBmaWxlcy5sZW5ndGg7CiAgICAgICAgdmFyIGd0MTIwMGZpbGVzID0gZmlsZXMubGVuZ3RoID49IDEyMDA7CiAgICAgICAgY29uc29sZS5sb2coYD49MTIwMDogJHtndDEyMDBmaWxlc31gKTsKICAgICAgICAvL3Bvc3RTaGExTWVzc2dhZShjcmVhdGVNZXNzYWdlKE1lc3NhZ2VUeXBlLlBST0NFU1NJTkcsIGDmgLvorqEke2FsbEZpbGVzLmxlbmd0aH0s5bey5a6M5oiQJHtjb21wbGV0ZWRJbmRleH1gKSk7CiAgICAgICAgcG9zdFNoYTFNZXNzZ2FlKGNyZWF0ZU1lc3NhZ2UoTWVzc2FnZVR5cGUuU0hPV0NBTkNFbCkpCiAgICAgICAgZm9yICh2YXIgZmlsZSBvZiBmaWxlcykgewoKCiAgICAgICAgICAgIGxldCB0YXNrQ2FuY2VsRmxhZyA9IGdldFRhc2tDYW5jZWxGbGFnKCk7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKHRhc2tDYW5jZWxGbGFnKTsKICAgICAgICAgICAgaWYgKHRhc2tDYW5jZWxGbGFnID09PSB0cnVlKSB7CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygiSW5uZXJDcmVhdGVTaGExTGlua3MgaGFzIENhbmNlbGVkIik7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgY29uc3QgZiA9IGZpbGU7CgogICAgICAgICAgICAvLyBnZXRGaWxlSXRlbVByZWlkCiAgICAgICAgICAgIGNvbnN0IHIgPSBnZXRGaWxlSXRlbVByZWlkV2l0aFRpbWVPdXQoMjAwMDAsIGYpLnRoZW4oKHQpID0+IHsKICAgICAgICAgICAgICAgIGlmICh0LnN0YXRlKSB7CiAgICAgICAgICAgICAgICAgICAgbXNnID0gJzxkaXYgYWxpZ249InJpZ2h0Ij48Yj57MH08L2I+IHwgPGI+ezF9PC9iPjwvZGl2Pjxocj7ojrflj5bjgJAgPGI+ezJ9PC9iPiDjgJHnmoRzaGEx6ZO+5o6l5oiQ5YqfJy5mb3JtYXQoY29tcGxldGVkSW5kZXgsIGFsbEZpbGVzLmxlbmd0aCwgdC5maWxlSXRlbS5uYW1lKTsKICAgICAgICAgICAgICAgICAgICBwb3N0U2hhMU1lc3NnYWUoY3JlYXRlTWVzc2FnZShNZXNzYWdlVHlwZS5QUk9DRVNTSU5HLCBtc2cpKQogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBtc2cgPSAnPGRpdiBhbGlnbj0icmlnaHQiPjxiPnswfTwvYj4gfCA8Yj57MX08L2I+PC9kaXY+PGhyPuiOt+WPluOAkCA8Yj57Mn08L2I+IOOAkeeahHNoYTHpk77mjqXvvJp7M30nLmZvcm1hdChjb21wbGV0ZWRJbmRleCwgYWxsRmlsZXMubGVuZ3RoLCB0LmZpbGVJdGVtLm5hbWUsIHQuZXJyb3IpOwogICAgICAgICAgICAgICAgICAgIHBvc3RTaGExTWVzc2dhZShjcmVhdGVNZXNzYWdlKE1lc3NhZ2VUeXBlLlBST0NFU1NJTkcsIG1zZykpCiAgICAgICAgICAgICAgICAgICAgdmFyIGZpbGVQYXRoID0gdC5maWxlSXRlbS5wYXRocy5qb2luKCIgPiAiKTsKICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhmaWxlUGF0aCk7CiAgICAgICAgICAgICAgICAgICAgaWYgKGZpbGVQYXRoKSBtc2cgPSAiezB9LOWOn+WboO+8mnsxfSzot6\/lvoTvvJp7Mn0iLmZvcm1hdCh0LmZpbGVJdGVtLm5hbWUsIHQuZXJyb3IsIGZpbGVQYXRoKTsKICAgICAgICAgICAgICAgICAgICBlbHNlIG1zZyA9ICJ7MH0s5Y6f5Zug77yaezF9Ii5mb3JtYXQodC5maWxlSXRlbS5uYW1lLCB0LmVycm9yKTsKCiAgICAgICAgICAgICAgICAgICAgcG9zdFNoYTFNZXNzZ2FlKGNyZWF0ZU1lc3NhZ2UoTWVzc2FnZVR5cGUuRVJST1IsIG1zZykpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgY29tcGxldGVkSW5kZXggPSBjb21wbGV0ZWRJbmRleCArIDE7CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgcHJvbWlzQXJyYXkucHVzaChyKTsKCiAgICAgICAgICAgIC8v6Ieq5bex5pS55Luj56CB5ZCn77yM5oCO5LmI5byE5o+Q5Y+W6YC76L6R44CC44CC5aSq5oWi77yM6ICX5pe26ZW\/77yb5aSq5b+r77yMMTE15a655piT5rKh5Y+N5bqUCiAgICAgICAgICAgIGlmIChpbmRleCAlIFdPUktTRVRUSU5HUy5Xb3JraW5nSXRlbXNOdW1iZXIgPT0gMCkgewogICAgICAgICAgICAgICAgYXdhaXQgZGVsYXkoV09SS1NFVFRJTkdTLlNsZWVwTW9yZVRpbWUgKiAxLjUpOwogICAgICAgICAgICAgICAgaWYgKGluZGV4ICUgKFdPUktTRVRUSU5HUy5Xb3JraW5nSXRlbXNOdW1iZXIgKiA5KSA9PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgYXdhaXQgUHJvbWlzZS5hbGwocHJvbWlzQXJyYXkpOwogICAgICAgICAgICAgICAgICAgIGxldCBzZWNvbmRzID0gMjsKICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNlY29uZHM7IGkrKykgewogICAgICAgICAgICAgICAgICAgICAgICBwb3N0U2hhMU1lc3NnYWUoY3JlYXRlTWVzc2FnZShNZXNzYWdlVHlwZS5QUk9DRVNTSU5HLCBg6Ziy5q2iMTE15pyN5Yqh5Zmo6ZmQ5Yi277yM5pqC5YGc5Y+R5YyF5Lit44CCPGJyPjxicj4ke3NlY29uZHMgLSBpfeenkuWQjue7p+e7rS4uLmApKTsKICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgZGVsYXkoMTAwMCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHByb21pc0FycmF5ID0gbmV3IEFycmF5KCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vCiAgICAgICAgICAgIGluZGV4ID0gaW5kZXggKyAxOwogICAgICAgIH0KCgogICAgICAgIGF3YWl0IFByb21pc2UuYWxsKHByb21pc0FycmF5KTsKCiAgICAgICAgdmFyIHN1Y2NlZWRBcnJheSA9IGFsbEZpbGVzLmZpbHRlcihxID0+IHEucHJlaWQpOwogICAgICAgIGlmIChzdWNjZWVkQXJyYXkubGVuZ3RoID09IDEpIHsKICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGNvbnZlcnRUb1NoYTFMaW5rKHN1Y2NlZWRBcnJheVswXSwgZmFsc2UpOwogICAgICAgICAgICBwb3N0U2hhMU1lc3NnYWUoY3JlYXRlTWVzc2FnZShNZXNzYWdlVHlwZS5DTE9TRSwgIiIpKTsKCiAgICAgICAgICAgIHNldFRpbWVvdXQocyA9PiB7CiAgICAgICAgICAgICAgICBwcm9tcHQoIuWkjeWItuWIhuS6q+mTvuaOpeWIsOWJqui0tOadvyIsIHMpOwogICAgICAgICAgICB9LCAxMDAsIHJlc3VsdC5tc2cpOwoKICAgICAgICB9IGVsc2UgewoKCiAgICAgICAgICAgIGlmIChzdWNjZWVkQXJyYXkubGVuZ3RoID4gMSkgewoKICAgICAgICAgICAgICAgIGxldCBmaWxlX25hbWUgPSB0eHROYW1lICsgIl9zaGExLnR4dCI7CiAgICAgICAgICAgICAgICBsZXQgdGV4dCA9ICIiOwoKCiAgICAgICAgICAgICAgICBpZiAoZ2V0VGFza0NhbmNlbEZsYWcoKSkgewogICAgICAgICAgICAgICAgICAgIGZpbGVfbmFtZSA9IHR4dE5hbWUgKyAiX+aPkOWPll\/mnKrlrozmiJAuN3Rhc2siOwogICAgICAgICAgICAgICAgICAgIGxldCBkYXRhID0gYWxsRmlsZXMubWFwKGYgPT4gewogICAgICAgICAgICAgICAgICAgICAgICBgbGV0IHRlbXBGaWxlPXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOmYuaWQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnRJRDpmLnBhcmVudElELAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTpmLm5hbWUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplOmYuc2l6ZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdGhzOmYucGF0aHMsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwaWNrQ29kZTpmLnBpY2tDb2RlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hhMTpmLnNoYTEsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmVpZDpmLnByZWlkLAogICAgICAgICAgICAgICAgICAgICAgICB9O2AKICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRlbXBGaWxlID0gWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZi5pZCwgZi5wYXJlbnRJRCwgZi5uYW1lLCBmLnNpemUsIGYucGF0aHMsIGYucGlja0NvZGUsIGYuc2hhMSwgZi5wcmVpZCwKICAgICAgICAgICAgICAgICAgICAgICAgXTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRlbXBGaWxlOwogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIGxldCB0YXNrSnNvbiA9IHsKICAgICAgICAgICAgICAgICAgICAgICAgdGFza1R5cGU6IFRhc2tUeXBlLkRPV05MT0FELAogICAgICAgICAgICAgICAgICAgICAgICBmaWxlTmFtZTogdHh0TmFtZSwKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogZGF0YQogICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgdGV4dCA9IEpTT04uc3RyaW5naWZ5KHRhc2tKc29uKQogICAgICAgICAgICAgICAgICAgIC8vdG9kbzrlj5bmtojku7vliqEKCiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHRleHQgPSBhbGxGaWxlcy5maWx0ZXIocSA9PiBxLnByZWlkKS5tYXAoZnVuY3Rpb24gKHApIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHIgPSBjb252ZXJ0VG9TaGExTGluayhwLCBmYWxzZSk7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByLm1zZzsKICAgICAgICAgICAgICAgICAgICB9KS5qb2luKCJcclxuIik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBkb3dubG9hZChmaWxlX25hbWUsIHRleHQpOwogICAgICAgICAgICB9CgoKCiAgICAgICAgICAgIG1zZyA9IGAKICAgICAgICAgICAg5a6M5oiQ44CQIDxiPiR7dHh0TmFtZX08L2I+IOOAkeaPkOWPlu+8gTxocj48YnI+CiAgICAgICAgICAgIOaAu+WFsTxiPiR7YWxsRmlsZXMubGVuZ3RofTwvYj4g77yM5Y+W5raI5oiW6ICF5aSx6LSlIDxiPiR7YWxsRmlsZXMubGVuZ3RoLXN1Y2NlZWRBcnJheS5sZW5ndGh9PC9iPuOAgjxicj4KICAgICAgICAgICAg5Y+W5raI5ZCO77yM6Iul5pyq56e75Yqo5paH5Lu25aS577yM5Y+v5a+85YWl57un57ut5o+Q5Y+W44CCPGJyPgogICAgICAgICAgICDngrnlh7stPiA8YSBocmVmPSIke1RJUFMuVXBkYXRlVXJsfSIgdGFyZ2V0PSJfYmxhbmsiPiR7VElQUy5WZXJzaW9uVGlwc308L2E+77yM6I635Y+W5pyA5paw54mI5LiO5Y+N6aaI77yBCiAgICAgICAgICAgIGA7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKG1zZyk7CiAgICAgICAgICAgIHBvc3RTaGExTWVzc2dhZShjcmVhdGVNZXNzYWdlKE1lc3NhZ2VUeXBlLkVORCwgbXNnKSk7CiAgICAgICAgfQogICAgfQoKICAgIGFzeW5jIGZ1bmN0aW9uIENyZWF0ZVNoYTFMaW5rc0FsbChpdGVtcywgdGFza05hbWUpIHsKICAgICAgICAvL3VpOiDojrflj5bmlofku7bkuK0uLi4KICAgICAgICB2YXIgbXNnID0gIuato+WcqOiOt+WPluaWh+S7ti4uLiI7CiAgICAgICAgcG9zdFNoYTFNZXNzZ2FlKGNyZWF0ZU1lc3NhZ2UoTWVzc2FnZVR5cGUuQkVHSU4sIG1zZykpOwogICAgICAgIHZhciBmaWxlcyA9IG5ldyBBcnJheSgpOwogICAgICAgIGZvciAobGV0IGl0ZW0gb2YgaXRlbXMpIHsKICAgICAgICAgICAgaWYgKGdldFRhc2tDYW5jZWxGbGFnKCkpIGJyZWFrOwoKICAgICAgICAgICAgaWYgKCFpdGVtLmlzRm9sZGVyKSB7CiAgICAgICAgICAgICAgICBmaWxlcy5wdXNoKGl0ZW0pOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgbXNnID0gYOato+WcqOiOt+WPliAke2l0ZW0ubmFtZX0g5LiL55qE5YaF5a65Li4uYDsKICAgICAgICAgICAgICAgIHBvc3RTaGExTWVzc2dhZShjcmVhdGVNZXNzYWdlKE1lc3NhZ2VUeXBlLlBST0NFU1NJTkcsIG1zZykpOwogICAgICAgICAgICAgICAgbGV0IGNoaWxkcmVuID0gbmV3IEFycmF5KCk7CiAgICAgICAgICAgICAgICBhd2FpdCBnZXRBbGxGaWxlcyhpdGVtLmlkLCBjaGlsZHJlbiwgaXRlbS5pZCwgKGZuYW1lLCBwSW5kZXgpID0+IHsKICAgICAgICAgICAgICAgICAgICBpZiAocEluZGV4ID4gMSkgewogICAgICAgICAgICAgICAgICAgICAgICBtc2cgPSBg5q2j5Zyo6I635Y+WIOOAkCR7Zm5hbWV944CRIOS4i+esrCAke3BJbmRleH0g6aG155qE5YaF5a65Li4uYDsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICBtc2cgPSBg5q2j5Zyo6I635Y+WIOOAkCR7Zm5hbWV944CRIOS4i+eahOWGheWuuS4uLmA7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHBvc3RTaGExTWVzc2dhZShjcmVhdGVNZXNzYWdlKE1lc3NhZ2VUeXBlLlBST0NFU1NJTkcsIG1zZykpOwogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgZm9yIChsZXQgZiBvZiBjaGlsZHJlbikgewogICAgICAgICAgICAgICAgICAgIGYucGF0aHMudW5zaGlmdChpdGVtLm5hbWUpOwogICAgICAgICAgICAgICAgICAgIGZpbGVzLnB1c2goZik7CiAgICAgICAgICAgICAgICB9CgoKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgaWYgKCFmaWxlcyB8fCBmaWxlcy5sZW5ndGggPT0gMCkgewogICAgICAgICAgICBwb3N0U2hhMU1lc3NnYWUoY3JlYXRlTWVzc2FnZShNZXNzYWdlVHlwZS5FTkQsIGDmnKrpgInkuK3ku7vkvZXlhoXlrrk\/Pz9gKSk7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CgogICAgICAgIHBvc3RTaGExTWVzc2dhZShjcmVhdGVNZXNzYWdlKE1lc3NhZ2VUeXBlLlBST0NFU1NJTkcsIGDojrflj5bliLAg44CQPGI+JHt0YXNrTmFtZX08L2I+44CRIOeahOWGheWuuSAke2ZpbGVzLmxlbmd0aH0g6aG5YCkpOwogICAgICAgIGF3YWl0IGRlbGF5KDEwMCk7CiAgICAgICAgaWYgKGdldFRhc2tDYW5jZWxGbGFnKCkpIHsKICAgICAgICAgICAgcG9zdFNoYTFNZXNzZ2FlKGNyZWF0ZU1lc3NhZ2UoTWVzc2FnZVR5cGUuRU5ELCAi5bey57uP5Y+W5raI5Lu75Yqh77yBIikpOwogICAgICAgIH0gZWxzZSBJbm5lckNyZWF0ZVNoYTFMaW5rcyhmaWxlcywgdGFza05hbWUpOwogICAgfQoKCiAgICBhc3luYyBmdW5jdGlvbiBDcmVhdGVTaGExTGlua3MoaXRlbSkgewogICAgICAgIC8vdWk6IOiOt+WPluaWh+S7tuS4rS4uLgogICAgICAgIHZhciBtc2cgPSAi5q2j5Zyo6I635Y+W5paH5Lu2Li4uIjsKICAgICAgICBwb3N0U2hhMU1lc3NnYWUoY3JlYXRlTWVzc2FnZShNZXNzYWdlVHlwZS5CRUdJTiwgbXNnKSk7CiAgICAgICAgdmFyIGZpbGVzID0gbmV3IEFycmF5KCk7CgogICAgICAgIGlmICghaXRlbS5pc0ZvbGRlcikgewogICAgICAgICAgICBmaWxlcy5wdXNoKGl0ZW0pOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIG1zZyA9IGDmraPlnKjojrflj5YgJHtpdGVtLm5hbWV9IOS4i+eahOWGheWuuS4uLmA7CiAgICAgICAgICAgIHBvc3RTaGExTWVzc2dhZShjcmVhdGVNZXNzYWdlKE1lc3NhZ2VUeXBlLlBST0NFU1NJTkcsIG1zZykpOwoKICAgICAgICAgICAgYXdhaXQgZ2V0QWxsRmlsZXMoaXRlbS5pZCwgZmlsZXMsIGl0ZW0uaWQsIChmbmFtZSwgcEluZGV4KSA9PiB7CiAgICAgICAgICAgICAgICBpZiAocEluZGV4ID4gMSkgewogICAgICAgICAgICAgICAgICAgIG1zZyA9ICLmraPlnKjojrflj5Yg44CQezB944CRIOS4i+esrCB7MX0g6aG155qE5YaF5a65Li4uIi5mb3JtYXQoZm5hbWUsIHBJbmRleCk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIG1zZyA9ICLmraPlnKjojrflj5Yg44CQezB944CRIOS4i+eahOWGheWuuS4uLiIuZm9ybWF0KGZuYW1lKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHBvc3RTaGExTWVzc2dhZShjcmVhdGVNZXNzYWdlKE1lc3NhZ2VUeXBlLlBST0NFU1NJTkcsIG1zZykpOwogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIGlmICghZmlsZXMgfHwgZmlsZXMubGVuZ3RoID09IDApIHsKICAgICAgICAgICAgICAgIHBvc3RTaGExTWVzc2dhZShjcmVhdGVNZXNzYWdlKE1lc3NhZ2VUeXBlLkVORCwgIuOAkDxiPnswfTwvYj4g44CR56m655uu5b2VPz8\/Ii5mb3JtYXQoaXRlbS5uYW1lKSkpOwogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBwb3N0U2hhMU1lc3NnYWUoY3JlYXRlTWVzc2FnZShNZXNzYWdlVHlwZS5QUk9DRVNTSU5HLCAi6I635Y+W5YiwIOOAkDxiPnswfTwvYj7jgJEg55qE5YaF5a65IHsxfSDpobkiLmZvcm1hdChpdGVtLm5hbWUsIGZpbGVzLmxlbmd0aCkpKTsKICAgICAgICBhd2FpdCBkZWxheSgxMDApOwogICAgICAgIGlmIChnZXRUYXNrQ2FuY2VsRmxhZygpKSB7CiAgICAgICAgICAgIHBvc3RTaGExTWVzc2dhZShjcmVhdGVNZXNzYWdlKE1lc3NhZ2VUeXBlLkVORCwgIuW3sue7j+WPlua2iOS7u+WKoe+8gSIpKTsKICAgICAgICB9IGVsc2UgSW5uZXJDcmVhdGVTaGExTGlua3MoZmlsZXMsIGl0ZW0ubmFtZSk7CiAgICB9CgogICAgY29uc3QgYXV0b0NyZWF0ZVJvb3RGb2xkZXJUaXBzID0gewogICAgICAgIG1zZzogYHNoYTHovazlrZjml7bvvIzlvLrliLblnKjkv53lrZjlpITmlrDlu7rmoLnnm67lvZVgLAogICAgICAgIGRldGFpbHM6IGDpgInmi6nml7Y6JiMwMTM7JiMwMTA7MS7mlrDlu7rmoLnnm67lvZXlkI3mnaXoh6pzaGEx6L2s5a2Y5paH5Lu25ZCN5oiW6ICFanNvbuS4reeahOagueWFg+e0oOOAglwKICAgICAgICAmIzAxMzsmIzAxMDsyLuWmguaenOayoeaciSzliJnlvZPliY3ml7bpl7TkuLrmlofku7blkI3nlJ\/miJDjgIJgCiAgICB9OwoKICAgIGNvbnN0IGF1dG9DcmVhdGVSb290Rm9sZGVyU3RyaW5nID0KICAgICAgICBgPGRpdiBjbGFzcz0ibGlua3Rhc2stcXVvdGEiIHN0eWxlPSJoZWlnaHQ6IDQwcHg7ZGlzcGxheTogYmxvY2siPlwKICAgICAgICA8YT4ke2F1dG9DcmVhdGVSb290Rm9sZGVyVGlwcy5tc2d9PC9hPlwKICAgICAgICA8ZGl2IGNsYXNzPSJoZWxwIiB0aXRsZT0iICR7YXV0b0NyZWF0ZVJvb3RGb2xkZXJUaXBzLmRldGFpbHN9Ij48YT48L2E+PC9kaXY+XAogICAgICAgIDxzcGFuPiZuYnNwOyZuYnNwOzwvc3Bhbj48ZGl2IGNsYXNzPSJvcHRpb24tc3dpdGNoIiBzdHlsZT0idG9wOjEwcHg7bGVmdDoxMHB4Ij5cCiAgICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBjaGVja2VkPSJ0cnVlIiBpZD0ibmVBdXRvQ3JlYXRlUm9vdGZvbGRlciIgb25jbGljaz0iZnVuY3Rpb24gZigpIHtyZXR1cm4gZmFsc2V9Ij5cCiAgICAgICAgPGxhYmVsIGZvcj48aT7lvIDlkK88L2k+PHM+5YWz6ZetPC9zPjxiPuWIh+aNojwvYj48L2xhYmVsPjwvZGl2PmA7CgogICAgY29uc3Qgbm90Q3JlYXRlQW55Q2hpbGRGb2xkZXJUaXBzID0gewogICAgICAgIG1zZzogYHNoYTHovazlrZjml7bvvIzkuI3liJvlu7rku7vkvZXlrZDnm67lvZVgLAogICAgICAgIGRldGFpbHM6IGDpgInkuK3ml7bvvIzkuI3kvJroh6rliqjliJvlu7rku7vkvZXlrZDnm67lvZXjgILmraTpobnkuI7moLnnm67lvZXkuI3kvJrlvbHlk43vvIFgCiAgICB9OwoKICAgIGNvbnN0IG5vdENyZWF0ZUFueUNoaWxkRm9sZGVyU3RyaW5nID0KICAgICAgICBgPGRpdiBpZD0ibmVOb3RDcmVhdGVBbnlDaGlsZEZvbGRlclBhcmVudCIgY2xhc3M9Imxpbmt0YXNrLXF1b3RhIiBzdHlsZT0iaGVpZ2h0OiA0MHB4O2Rpc3BsYXk6IGJsb2NrIj5cCiAgICAgICAgPGE+JHtub3RDcmVhdGVBbnlDaGlsZEZvbGRlclRpcHMubXNnfTwvYT5cCiAgICAgICAgPGRpdiBjbGFzcz0iaGVscCIgdGl0bGU9IiAke25vdENyZWF0ZUFueUNoaWxkRm9sZGVyVGlwcy5kZXRhaWxzfSI+PGE+PC9hPjwvZGl2PlwKICAgICAgICA8c3Bhbj4mbmJzcDsmbmJzcDs8L3NwYW4+PGRpdiBjbGFzcz0ib3B0aW9uLXN3aXRjaCIgc3R5bGU9InRvcDoxMHB4O2xlZnQ6MTBweCI+XAogICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgY2hlY2tlZD0idHJ1ZSIgaWQ9Im5lTm90Q3JlYXRlQW55Q2hpbGRGb2xkZXIiIG9uY2xpY2s9ImZ1bmN0aW9uIGYoKSB7cmV0dXJuIGZhbHNlfSI+XAogICAgICAgIDxsYWJlbCBmb3I+PGk+5byA5ZCvPC9pPjxzPuWFs+mXrTwvcz48Yj7liIfmjaI8L2I+PC9sYWJlbD48L2Rpdj5gOwoKICAgIGNvbnN0IHNlbGVjdEZpbGVUaXBzID0gewogICAgICAgIG1zZzogYOaIluiAheWvvOWFpXNoYTHpk77mjqXmlofku7bvvIh0eHQvanNvbu+8iWAsCiAgICAgICAgZGV0YWlsczogYOWmguaenOS4jeiDveato+ehruaYvuekuumAieaLqeaWh+S7tuaMiemSru+8jOWPr+iDveaYr+S4juWFtuS7luiEmuacrOaIluiAheaPkuS7tuWGsueqge+8ge+8gWAKICAgIH07CiAgICBjb25zdCBzZWxlY3RGaWxlU3RyaW5nID0gYDxkaXYgaWQ9Im5lRmlsZSI+CiAgICA8ZGl2IGlkPSJuZUZpbGVPbmxpbmUiPgogICAgPHNwYW4gc3R5bGU9ImRpc3BsYXk6ZmxleDttYXJnaW4tdG9wOiAxMHB4OyI+5bey57uP6YCJ5oup5Zyo57q\/5paH5Lu2OjxwIHN0eWxlPSJjb2xvcjpyZWQiIGlkPSJuZU9ubGluZUZpbGVOYW1lIj48L3A+PC9zcGFuPgogICAgPC9kaXY+CiAgICA8ZGl2IGlkPSJuZUZpbGVVcGxvYWQiID4KICAgIDxkaXYgY2xhc3M9Imxpbmt0YXNrLXF1b3RhIiBzdHlsZT0ibWFyZ2luLXRvcDogMTBweDsiPlwKICAgICAgICA8YT4ke3NlbGVjdEZpbGVUaXBzLm1zZ308L2E+XAogICAgICAgIDxkaXYgY2xhc3M9ImhlbHAiIHRpdGxlPSIke3NlbGVjdEZpbGVUaXBzLmRldGFpbHN9Ij48YT48L2E+PC9kaXY+XAogICAgICAgIDxzcGFuPiZuYnNwOyZuYnNwOzwvc3Bhbj48aW5wdXQgdHlwZT0iZmlsZSIgaWQ9Im5lU2VsZWN0RmlsZSIgYWNjZXB0PSIudHh0LC5qc29uIiBzdHlsZT0iZGlzcGxheTpibG9jaztjb2xvcjojMjc3N0Y4O3Zpc2liaWxpdHk6IHZpc2libGU7Ij48L2lucHV0PjwvZGl2PgogICAgPC9kaXY+CiAgICA8L2Rpdj5gOwoKICAgIGNvbnN0IG90aGVyU2V0dGluZ1N0cmluZyA9IGA8ZGl2IGNsYXNzPSJsaW5rdGFzay1xdW90YSIgc3R5bGU9Im1hcmdpbi10b3A6IDEwcHg7ZGlzcGxheTpub25lOyI+XAogICAgICAgIOWIhumalOespuaIluiAheWFtuS7lumAiemhue+8mjxhIGlkPSJuZVNldHRpbmcxIiBocmVmPSJqYXZhc2NyaXB0OjsiIHN0eWxlPSJjb2xvcjojMjc3N0Y4Ij7ngrnmraTorr7nva48L2E+44CCXAogICAgICAgIDwvZGl2PmAKCgogICAgY29uc3QgaGVhZGVyU3RyaW5nID0gYDxkaXYgaWQ9Im5lMTE1dGlwc2ZvcmhlYWRlciI+JHtUSVBTLlZlcnNpb25UaXBzfSgke1RJUFMuTGFzdFVwZGF0ZURhdGV9KSxcCiAgICA8YSBzdHlsZT0iY29sb3I6cmVkOyIgdGFyZ2V0PSJfYmxhbmsiIGhyZWY9JHtUSVBTLlVwZGF0ZVVybH0+5pu05pawJuWPjemmiOeCueatpCE8L2E+XAogICAgPGEgaHJlZj0iamF2YXNjcmlwdDo7IiBzdHlsZT0iY29sb3I6IzI3NzdGOCIgaWQ9Im5lU2V0dGluZzIiPuWIhumalOespuetieiuvue9rueCueatpO+8gTwvYT48L2Rpdj5gOwoKICAgIGNvbnN0IGJlZ2luVXBsb2FkQnlTaGExU3RyaW5nID0gYDxkaXYgY2xhc3M9ImNvbiIgaWQ9ImRvd25zaGExIj48YSBjbGFzcz0iYnV0dG9uIiBocmVmPSJqYXZhc2NyaXB0OjsiPuW8gOWni3NoYTHovazlrZg8L2E+PC9kaXY+YDsKCiAgICAvL+W9k+WJjemhtemdouaJgOWcqOeahOebruW9leS\/oeaBrwogICAgZnVuY3Rpb24gZ2V0Q3VycmVudEZvbGRlckRpc3BsYXllZCgpIHsKICAgICAgICBsZXQgZGVmYXVsdEZvbGRlciA9IHsKICAgICAgICAgICAgaWQ6ICIwIiwKICAgICAgICAgICAgbmFtZTogIuagueebruW9lSIKICAgICAgICB9OwogICAgICAgIGxldCBpZnJhbWVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnaWZyYW1lJykKICAgICAgICBmb3IgKGxldCBpdGVtIG9mIGlmcmFtZXMpIHsKICAgICAgICAgICAgbGV0IGZpbGVQYXRoID0gaXRlbS5jb250ZW50V2luZG93LmRvY3VtZW50LmJvZHkucXVlcnlTZWxlY3RvcignW3JlbD1oZWFkZXJfcGFnZV9sb2NhbF0nKTsKICAgICAgICAgICAgaWYgKGZpbGVQYXRoKSB7CiAgICAgICAgICAgICAgICBsZXQgZm9sZGVycyA9IGZpbGVQYXRoLnF1ZXJ5U2VsZWN0b3JBbGwoJy5mb2xkZXInKTsKICAgICAgICAgICAgICAgIGxldCBsYXN0Rm9sZGVyID0gZm9sZGVyc1tmb2xkZXJzLmxlbmd0aCAtIDFdOwogICAgICAgICAgICAgICAgZGVmYXVsdEZvbGRlci5uYW1lID0gbGFzdEZvbGRlci5nZXRBdHRyaWJ1dGUoJ3RpdGxldGV4dCcpOwogICAgICAgICAgICAgICAgbGV0IHNlYXJjaCA9IG5ldyBVUkxTZWFyY2hQYXJhbXMod2luZG93LmxvY2F0aW9uLnNlYXJjaCk7CiAgICAgICAgICAgICAgICBkZWZhdWx0Rm9sZGVyLmlkID0gc2VhcmNoLmdldCgnY2lkJyk7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIGRlZmF1bHRGb2xkZXI7CiAgICB9CgogICAgLy9maXg6IHYzLjMg5L+u5aSN4oCc5re75Yqg5Lu75Yqh5by556qX5Y+v6IO95peg5rOV5YWz6Zet4oCdCiAgICBmdW5jdGlvbiBBZGREb3dubG9hZFNoYTFCdG4oak5vZGUpIHsKCiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgYVtidG49ImNsb3NlIl1gKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGUgPT4gewogICAgICAgICAgICB3aW5kb3cucGFyZW50LmRvY3VtZW50LnRyeVVwbG9hZEl0ZW0gPSBudWxsOwogICAgICAgIH0pOwoKCgogICAgICAgIGxldCBvbmxpbmVGaWxlID0gbnVsbDsKCiAgICAgICAgdmFyIGZpbGUgPSAiIjsKCiAgICAgICAgdmFyIGRpYWxvZyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoImRpYWxvZy1ib3ggZGlhbG9nLW1pbmkgb2ZmbGluZS1ib3ggd2luZG93LWN1cnJlbnQiKVswXTsKICAgICAgICBkaWFsb2cuc3R5bGUud2lkdGggPSAiNzIwcHgiOwogICAgICAgIGRpYWxvZy5zdHlsZS50b3AgPSAiMTBweCI7CiAgICAgICAgaWYgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCduZTExNXRpcHNmb3JoZWFkZXInKSA9PSBudWxsKSB7CiAgICAgICAgICAgICQoaGVhZGVyU3RyaW5nKS5hcHBlbmRUbygiLmRpYWxvZy1oZWFkZXJbcmVsJD0ndGl0bGVfYm94J10iKTsKCiAgICAgICAgICAgICQoJyNuZVNldHRpbmcyJylbMF0uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBlID0+IHsKICAgICAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYGFbYnRuPSJjbG9zZSJdYCkuY2xpY2soKTsKICAgICAgICAgICAgICAgIEdNX2NvbmZpZy5vcGVuKCk7CiAgICAgICAgICAgIH0pOwogICAgICAgIH0KCiAgICAgICAgdmFyIHRleHRBcmVhPWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIiNqc19vZmZsaW5lX25ld19hZGQiKTsKICAgICAgICBpZih0ZXh0QXJlYSl7CiAgICAgICAgICAgIHRleHRBcmVhLnN0eWxlLmhlaWdodD0iMTAwcHgiOwogICAgICAgIH0KCiAgICAgICAgaWYgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCduZVNlbGVjdEZpbGUnKSA9PSBudWxsKSB7CiAgICAgICAgICAgIHZhciBkaXYgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdkaWFsb2ctaW5wdXQgaW5wdXQtb2ZmbGluZScpOwoKICAgICAgICAgICAgY29uc29sZS5sb2coZGl2KTsKICAgICAgICAgICAgdmFyICRzZWxlY3RGaWxlID0gJChzZWxlY3RGaWxlU3RyaW5nKTsKICAgICAgICAgICAgdmFyICRhdXRvQ3JlYXRlUm9vdEZvbGRlciA9ICQoYXV0b0NyZWF0ZVJvb3RGb2xkZXJTdHJpbmcpOwogICAgICAgICAgICB2YXIgJG5vdENyZWF0ZUFueUNoaWxkRm9sZGVyID0gJChub3RDcmVhdGVBbnlDaGlsZEZvbGRlclN0cmluZyk7CiAgICAgICAgICAgIHZhciAkb3RoZXJTZXR0aW5nID0gJChvdGhlclNldHRpbmdTdHJpbmcpOwogICAgICAgICAgICBkaXZbMF0uc3R5bGUuZGlzcGxheSA9ICdncmlkJzsKICAgICAgICAgICAgZGl2WzBdLmFwcGVuZENoaWxkKCRzZWxlY3RGaWxlWzBdKTsKICAgICAgICAgICAgZGl2WzBdLmFwcGVuZENoaWxkKCRhdXRvQ3JlYXRlUm9vdEZvbGRlclswXSk7CgogICAgICAgICAgICBkaXZbMF0uYXBwZW5kQ2hpbGQoJG5vdENyZWF0ZUFueUNoaWxkRm9sZGVyWzBdKTsKICAgICAgICAgICAgZGl2WzBdLmFwcGVuZENoaWxkKCRvdGhlclNldHRpbmdbMF0pOwoKCiAgICAgICAgICAgIC8v55WM6Z2i6YCJ6aG56K6+572uCiAgICAgICAgICAgIC8v5qC555uu5b2V6Ieq5Yqo5Yib5bu66buY6K6k5YC877yaCiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCduZUF1dG9DcmVhdGVSb290Zm9sZGVyJykuY2hlY2tlZCA9IEdNX2NvbmZpZy5nZXQoY3VycmVudENvbmZpZy5jcmVhdGVSb290Rm9sZGVyRGVmYXVsdFZhbHVlKTsKICAgICAgICAgICAgLy\/mmK\/lkKbmmL7npLrkuI3liJvlu7rku7vkvZXnm67lvZXvvJoKICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ25lTm90Q3JlYXRlQW55Q2hpbGRGb2xkZXJQYXJlbnQnKS5zdHlsZS5kaXNwbGF5ID0gR01fY29uZmlnLmdldChjdXJyZW50Q29uZmlnLmNyZWF0ZUNoaWxkRm9sZGVyVmlzaWJsZSkgPT09IHRydWUgPyAnYmxvY2snIDogJ25vbmUnOwogICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbmVOb3RDcmVhdGVBbnlDaGlsZEZvbGRlcicpLmNoZWNrZWQgPSBmYWxzZTsKCiAgICAgICAgICAgICRzZWxlY3RGaWxlWzBdLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIGUgPT4gewogICAgICAgICAgICAgICAgY29uc29sZS5sb2coZS50YXJnZXQuZmlsZXMpOwogICAgICAgICAgICAgICAgaWYgKGUudGFyZ2V0LmZpbGVzKSB7CiAgICAgICAgICAgICAgICAgICAgZmlsZSA9IGUudGFyZ2V0LmZpbGVzWzBdOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBmaWxlID0gIiI7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgJCgnI25lU2V0dGluZzEnKVswXS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGUgPT4gewogICAgICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgYVtidG49ImNsb3NlIl1gKS5jbGljaygpOwogICAgICAgICAgICAgICAgR01fY29uZmlnLm9wZW4oKTsKICAgICAgICAgICAgfSk7CgoKICAgICAgICB9IGVsc2UgewoKICAgICAgICAgICAgLy\/nlYzpnaLpgInpobnorr7nva4KICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ25lU2VsZWN0RmlsZScpLnZhbHVlID0gIiI7CiAgICAgICAgICAgIGZpbGUgPSAiIjsKICAgICAgICAgICAgLy\/moLnnm67lvZXoh6rliqjliJvlu7rpu5jorqTlgLzvvJoKICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ25lQXV0b0NyZWF0ZVJvb3Rmb2xkZXInKS5jaGVja2VkID0gR01fY29uZmlnLmdldChjdXJyZW50Q29uZmlnLmNyZWF0ZVJvb3RGb2xkZXJEZWZhdWx0VmFsdWUpOwogICAgICAgICAgICAvL+aYr+WQpuaYvuekuuS4jeWIm+W7uuS7u+S9leebruW9le+8mgogICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbmVOb3RDcmVhdGVBbnlDaGlsZEZvbGRlclBhcmVudCcpLnN0eWxlLmRpc3BsYXkgPSBHTV9jb25maWcuZ2V0KGN1cnJlbnRDb25maWcuY3JlYXRlQ2hpbGRGb2xkZXJWaXNpYmxlKSA9PT0gdHJ1ZSA\/ICdibG9jaycgOiAnbm9uZSc7CiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCduZU5vdENyZWF0ZUFueUNoaWxkRm9sZGVyJykuY2hlY2tlZCA9IGZhbHNlOwogICAgICAgIH0KCgogICAgICAgIGlmIChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZG93bnNoYTEnKSA9PSBudWxsKSB7CgogICAgICAgICAgICByZXNldFRhc2tDYW5jZWxGbGFnKCk7CgogICAgICAgICAgICB2YXIgJGJ0biA9ICQoYmVnaW5VcGxvYWRCeVNoYTFTdHJpbmcpOwogICAgICAgICAgICBqTm9kZVswXS5hcHBlbmRDaGlsZCgkYnRuWzBdKTsKICAgICAgICAgICAgJGJ0blswXS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGUgPT4gewoKICAgICAgICAgICAgICAgIGxldCBjaWQgPSAkKGBsaVtyZWw9ImJ0c19zZWxlY3RfaXRlbSJdW2NsYXNzPSJzZWxlY3RlZCJdYCkuYXR0cigiZmlsZV9pZCIpOwogICAgICAgICAgICAgICAgaWYgKGNpZCA9PSAiIikgewogICAgICAgICAgICAgICAgICAgIC8v55uu5b2V5LiN5a2Y5Zyo77yM5q+U5aaC5oqKIOKAnOS6keS4i+i9veKAnSDnm67lvZXliKDpmaQKICAgICAgICAgICAgICAgICAgICBjaWQgPSAnMCc7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgbGV0IG5vdENyZWF0ZUFueUNoaWxkRm9sZGVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ25lTm90Q3JlYXRlQW55Q2hpbGRGb2xkZXInKS5jaGVja2VkOwogICAgICAgICAgICAgICAgbGV0IGF1dG9DcmVhdGVSb290Zm9sZGVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ25lQXV0b0NyZWF0ZVJvb3Rmb2xkZXInKS5jaGVja2VkOwoKICAgICAgICAgICAgICAgIGxldCBsaW5rcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdqc19vZmZsaW5lX25ld19hZGQnKS52YWx1ZTsKICAgICAgICAgICAgICAgIGxldCBjb25maWcgPSB7CiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0Q2lkOiBjaWQsCiAgICAgICAgICAgICAgICAgICAgdGV4dDogIiIsCiAgICAgICAgICAgICAgICAgICAgZm9sZGVyU2V0dGluZzogewogICAgICAgICAgICAgICAgICAgICAgICBub3RDcmVhdGVBbnlDaGlsZEZvbGRlcjogbm90Q3JlYXRlQW55Q2hpbGRGb2xkZXIsCiAgICAgICAgICAgICAgICAgICAgICAgIHNsZWVwVGltZTogR01fY29uZmlnLmdldChjdXJyZW50Q29uZmlnLmNyZWF0ZUZvbGRlclNsZWVwVGltZSksCiAgICAgICAgICAgICAgICAgICAgICAgIHJvb3RGb2xkZXI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5lZWRUb0NyZWF0ZTogYXV0b0NyZWF0ZVJvb3Rmb2xkZXIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb2xkZXJOYW1lOiAiIgogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgaXRlbU5hbWVTZXBhcmF0b3I6IHsKICAgICAgICAgICAgICAgICAgICAgICAgbmVlZFRvU2VwYXJhdGU6IEdNX2NvbmZpZy5nZXQoY3VycmVudENvbmZpZy5hdXRvVXNlU2VwYXJhdG9yKSwKICAgICAgICAgICAgICAgICAgICAgICAgbmVlZFRvUmVtb3ZlU2VwYXJhdG9yOiBHTV9jb25maWcuZ2V0KGN1cnJlbnRDb25maWcuYXV0b1VzZVNlcGFyYXRvclRvUmVuYW1lKSwKICAgICAgICAgICAgICAgICAgICAgICAgc2VwYXJhdG9yOiBHTV9jb25maWcuZ2V0KGN1cnJlbnRDb25maWcuc2VwYXJhdG9yKQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgdXBsb2FkOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIHdvcmtpbmdOdW1iZXI6IEdNX2NvbmZpZy5nZXQoY3VycmVudENvbmZpZy51cGxvYWROdW1iZXIpLAogICAgICAgICAgICAgICAgICAgICAgICBzbGVlcFRpbWU6IEdNX2NvbmZpZy5nZXQoY3VycmVudENvbmZpZy51cGxvYWRTbGVlcFRpbWUpLAogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH07CgoKICAgICAgICAgICAgICAgIG9ubGluZUZpbGUgPSB3aW5kb3cucGFyZW50LmRvY3VtZW50LnRyeVVwbG9hZEl0ZW0KICAgICAgICAgICAgICAgIGlmIChvbmxpbmVGaWxlKSB7CiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgYVtidG49ImNsb3NlIl1gKS5jbGljaygpOwogICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCLpgInmi6nkuoblnKjnur\/mlofku7bvvJoiKQogICAgICAgICAgICAgICAgICAgIGNvbmZpZy5mb2xkZXJTZXR0aW5nLnJvb3RGb2xkZXIuZm9sZGVyTmFtZSA9IG9ubGluZUZpbGUubmFtZS5zcGxpdCgiLiIpLnNsaWNlKDAsIC0xKS5qb2luKCcuJyk7CgogICAgICAgICAgICAgICAgICAgIHBvc3RTaGExTWVzc2dhZShjcmVhdGVNZXNzYWdlKE1lc3NhZ2VUeXBlLkZJTEVET1dOTE9BRCwgewogICAgICAgICAgICAgICAgICAgICAgICBvbmxpbmVGaWxlOiBvbmxpbmVGaWxlLAogICAgICAgICAgICAgICAgICAgICAgICBjb25maWc6IGNvbmZpZwogICAgICAgICAgICAgICAgICAgIH0pKTsKICAgICAgICAgICAgICAgICAgICB3aW5kb3cucGFyZW50LmRvY3VtZW50LnRyeVVwbG9hZEl0ZW0gPSBudWxsOwoKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZmlsZSkgewogICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCLpgInmi6nkuobmlofku7bvvJoiKQogICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGZpbGUpOwogICAgICAgICAgICAgICAgICAgIGxldCByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpOwogICAgICAgICAgICAgICAgICAgIHJlYWRlci5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgZnVuY3Rpb24gKHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgLy9maXg6IHYzLjMg5a+85YWl55qE5paH5Lu25ZCN5bimIi4iCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZy5mb2xkZXJTZXR0aW5nLnJvb3RGb2xkZXIuZm9sZGVyTmFtZSA9IGZpbGUubmFtZS5zcGxpdCgiLiIpLnNsaWNlKDAsIC0xKS5qb2luKCcuJyk7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZy50ZXh0ID0gdC50YXJnZXQucmVzdWx0OwogICAgICAgICAgICAgICAgICAgICAgICBmaWxlID0gIiI7CiAgICAgICAgICAgICAgICAgICAgICAgIFVwbG9hZEZpbGVzQnlTaGExTGlua3MoY29uZmlnKTsKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICByZWFkZXIucmVhZEFzVGV4dChmaWxlKTsKICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGBhW2J0bj0iY2xvc2UiXWApLmNsaWNrKCk7CiAgICAgICAgICAgICAgICAgICAgLy8oZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnY2xvc2UnKVsyXS5jbGljaygpKTsKCiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGxpbmtzKSB7CgogICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCLpgInmi6nkuobmlofmnKzmoYbkuK3ovpPlhaXvvJoiKQogICAgICAgICAgICAgICAgICAgIC8vIHZhciB0ZXh0ID0geyBGaWxlTmFtZTogIiIsIENvbnRlbnQ6IGxpbmtzIH07CiAgICAgICAgICAgICAgICAgICAgY29uZmlnLmZvbGRlclNldHRpbmcucm9vdEZvbGRlci5mb2xkZXJOYW1lID0gIiI7CiAgICAgICAgICAgICAgICAgICAgY29uZmlnLnRleHQgPSBsaW5rczsKCiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgYVtidG49ImNsb3NlIl1gKS5jbGljaygpOwogICAgICAgICAgICAgICAgICAgIC8vY2xvc2VCdXR0b24uY2xpY2soKTsKICAgICAgICAgICAgICAgICAgICBVcGxvYWRGaWxlc0J5U2hhMUxpbmtzKGNvbmZpZyk7CgoKCiAgICAgICAgICAgICAgICB9CgoKCiAgICAgICAgICAgIH0pOwogICAgICAgIH0KCiAgICAgICAgbGV0IHNhdmUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYnQtdGFzay1zYWZlJykKICAgICAgICBpZiAoc2F2ZSAhPSBudWxsICYmIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNzYXZlVGlwJykgPT0gbnVsbCkgewogICAgICAgICAgICBzYXZlLmluc2VydEFkamFjZW50SFRNTCgnYWZ0ZXJlbmQnLCBgPGRpdiBpZD0ic2F2ZVRpcCI+PHAgc3R5bGU9Im1hcmdpbi1sZWZ0OjIwcHg7bWFyZ2luLXRvcDotMjBweDsiPui9rOWtmOS5n+WcqOatpOWkhOmAieaLqeS9jee9ruOAgjxzcGFuIHN0eWxlPSJjb2xvcjpyZWQ7Ij7lm6AxMTXpobXpnaLnu5PmnoTku6Xlj4rmjqXlj6PosIPmlbTvvIzmmoLml7bkuIvnur\/jgJDpu5jorqTkv53lrZjoh7PlvZPliY3kvY3nva7jgJE8L3NwYW4+PC9wPjwvZGl2PmApCiAgICAgICAgfQoKCiAgICAgICAgaWYgKHdpbmRvdy5wYXJlbnQuZG9jdW1lbnQudHJ5VXBsb2FkSXRlbSkgewogICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbmVGaWxlT25saW5lJykuc3R5bGUuZGlzcGxheSA9ICJibG9jayI7CiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCduZUZpbGVVcGxvYWQnKS5zdHlsZS5kaXNwbGF5ID0gIm5vbmUiOwogICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbmVPbmxpbmVGaWxlTmFtZScpLmlubmVyVGV4dCA9IHdpbmRvdy5wYXJlbnQuZG9jdW1lbnQudHJ5VXBsb2FkSXRlbS5uYW1lOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCduZUZpbGVPbmxpbmUnKS5zdHlsZS5kaXNwbGF5ID0gIm5vbmUiOwogICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbmVGaWxlVXBsb2FkJykuc3R5bGUuZGlzcGxheSA9ICJibG9jayI7CiAgICAgICAgfQoKICAgICAgICBsZXQgY3VycmVudEZvbGRlciA9IGdldEN1cnJlbnRGb2xkZXJEaXNwbGF5ZWQoKTsKICAgICAgICBjb25zb2xlLmxvZyhjdXJyZW50Rm9sZGVyKTsKCiAgICAgICAgLyoKICAgICAgICAgICAgICAgIGxldCB1bCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ3VsW3JlbD0ic2VsZWN0X2l0ZW1fdWwiXScpOwogICAgICAgIGlmICh1bCkgewogICAgICAgICAgICAvL+W8ueeql+aXtuWPr+iDveaVsOaNrui\/mOWcqOiOt+WPlu+8jOW7tui\/n+S\/ruaUuQogICAgICAgICAgICAvL2ZpeDogdjMuMy4xIOS8mOWMluKAneiEmuacrOS\/ruaUueavlOiHquW4pueahOW\/q+KAnAogICAgICAgICAgICAvL2ZpeDogdjMuNCDlho3mrKHlu7bplb\/vvIzkvJjljJbigJ3ohJrmnKzkv67mlLnmr5Toh6rluKbnmoTlv6vigJwKICAgICAgICAgICAgZGVsYXkoMTAwMCkudGhlbih0ID0+IHsKICAgICAgICAgICAgICAgIGNvbnN0IGxpcyA9IHVsLnF1ZXJ5U2VsZWN0b3JBbGwoImxpIik7CiAgICAgICAgICAgICAgICBsZXQgZm9sZGVySW5jbHVkZWQgPSBudWxsOwoKICAgICAgICAgICAgICAgIGZvciAoY29uc3QgbGkgb2YgbGlzKSB7CgogICAgICAgICAgICAgICAgICAgIGlmKGxpLmNsYXNzTmFtZSYmbGkuY2xhc3NOYW1lLmluY2x1ZGVzKCJzZWxlY3RlZCIpKQogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgbGkuY2xhc3NMaXN0LnJlbW92ZSgic2VsZWN0ZWQiKQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2cobGkuYXR0cmlidXRlc1snZmlsZV9pZCddKQogICAgICAgICAgICAgICAgICAgIGlmIChsaS5hdHRyaWJ1dGVzWydmaWxlX2lkJ10udmFsdWUgPT0gY3VycmVudEZvbGRlci5pZCkgewogICAgICAgICAgICAgICAgICAgICAgICBmb2xkZXJJbmNsdWRlZCA9IGxpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgY29uc29sZS5sb2coZm9sZGVySW5jbHVkZWQpCiAgICAgICAgICAgICAgICBpZihmb2xkZXJJbmNsdWRlZCl7CiAgICAgICAgICAgICAgICAgICAgZm9sZGVySW5jbHVkZWQuY2xhc3NMaXN0LmFkZCgic2VsZWN0ZWQiKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2V7CiAgICAgICAgICAgICAgICAgICAgY29uc3QgbGkgPSBgPGxpIHJlbD0iYnRzX3NlbGVjdF9pdGVtIiBjbGFzcz0ic2VsZWN0ZWQiIGZpbGVfaWQ9IiR7Y3VycmVudEZvbGRlci5pZH0iPjxhIGhyZWY9ImphdmFzY3JpcHQ6OyI+PHNwYW4+JHtjdXJyZW50Rm9sZGVyLm5hbWV9PC9zcGFuPjwvYT48L2xpPmA7CiAgICAgICAgICAgICAgICAgICAgdWwuaW5zZXJ0QWRqYWNlbnRIVE1MKCJhZnRlcmJlZ2luIiwgbGkpOwogICAgICAgICAgICAgICAgfQoKCgogICAgICAgICAgICAgICAgY29uc3QgZW09IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2VtW3JlbD0iZG93bkZpbGVSZXN1bHQiXScpOwogICAgICAgICAgICAgICAgaWYoZW0pewogICAgICAgICAgICAgICAgICAgIGVtLnRleHRDb250ZW50PWN1cnJlbnRGb2xkZXIubmFtZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CgogICAgICAgIH0KICAgICAgICAqLwoKCgoKCgogICAgfQoKCiAgICAvLyBmdW5jdGlvbiBmb3JtYXRDb21tb25Ub0pzb24oY2hpbGRyZW4sIHJvb3QpIHsKICAgIC8vICAgICBsZXQgY2hpbGRGaWxlcyA9IGNoaWxkcmVuLmZpbHRlcihmID0+IGYuUGF0aHMubGVuZ3RoID09IDApOwogICAgLy8gICAgIHJvb3QuZmlsZXMgPSBBcnJheSgpOwogICAgLy8gICAgIHJvb3QuZGlycyA9IEFycmF5KCk7CiAgICAvLyAgICAgY2hpbGRGaWxlcy5mb3JFYWNoKGMgPT4gcm9vdC5maWxlcy5wdXNoKHsgTmFtZTogYy5OYW1lIH0pKTsKCiAgICAvLyAgICAgbGV0IHNlbGVjdGVkQ2hpbGRyZW4gPSBjaGlsZHJlbi5maWx0ZXIoZiA9PiBmLlBhdGhzLmxlbmd0aCA+IDApOwoKICAgIC8vICAgICBsZXQgY2hpbGRGb2xkZXJzID0gc2VsZWN0ZWRDaGlsZHJlbi5tYXAocSA9PiBxLlBhdGhzWzBdKS5maWx0ZXIoKHYsIGksIGEpID0+IGEuaW5kZXhPZih2KSA9PT0gaSk7CiAgICAvLyAgICAgY2hpbGRGb2xkZXJzLmZvckVhY2goZiA9PiByb290LmRpcnMucHVzaCh7IGRpcl9uYW1lOiBmIH0pKTsKCiAgICAvLyAgICAgcm9vdC5kaXJzLmZvckVhY2goZCA9PiB7CiAgICAvLyAgICAgICAgIGxldCBuZXdDaGlsZHJlbiA9IHNlbGVjdGVkQ2hpbGRyZW4uZmlsdGVyKGYgPT4gZi5QYXRoc1swXSA9PSBkLmRpcl9uYW1lKQogICAgLy8gICAgICAgICAgICAgLm1hcChjID0+IHsKICAgIC8vICAgICAgICAgICAgICAgICBsZXQgYSA9IHsgTmFtZTogYy5OYW1lLCBQYXRoczogYy5QYXRocy5zbGljZSgxKSB9OwogICAgLy8gICAgICAgICAgICAgICAgIHJldHVybiBhOwogICAgLy8gICAgICAgICAgICAgfSkKICAgIC8vICAgICAgICAgQ29udmVydGVyQWR2YW5jZWQobmV3Q2hpbGRyZW4sIGQpOwogICAgLy8gICAgIH0pOwogICAgLy8gfQoKCgogICAgZnVuY3Rpb24gQWRkQ2VhdGVTaGExQnV0dG9uSW5HcmlkKGpOb2RlKSB7CiAgICAgICAgLy9hZGQ6IHYzLjQg5aKe5Yqg6K6+572u5piv5ZCm5pi+56S6IOe8qeeVpeWbvuaooeW8j+S4i+iOt+WPlnNoYTEKICAgICAgICBpZiAoIUdNX2NvbmZpZy5nZXQoY3VycmVudENvbmZpZy5jcmVhdGVJdGVtU2hhMUluVGh1bWIpKSByZXR1cm47CiAgICAgICAgbGV0ICRsaSA9IGpOb2RlLmZpbmQoJ1tjbGFzc349ImZpbGUtdGh1bWIiXScpOwogICAgICAgIC8vZml4OiB2My4zLjEg5L+u5q2j5paH5Lu25aS55aaC5p6c6K6+572u5bCB6Z2i77yM6I635Y+Wc2hhMemTvuaOpeaMiemSruS8muimhueblueahGJ1ZwogICAgICAgIGxldCAkYnV0dG9uID0gJCgnPGJ1dHRvbiBjbGFzcz0iYnRuSW5HcmlkIiB0aXRsZT0i6I635Y+Wc2hhMemTvuaOpSI+PGkgY2xhc3M9Imljb24tb3BlcmF0ZS1saWdodCBpZm9sLWRvd25sb2FkIiBzdHlsZT0iaGVpZ2h0OjE0cHg7d2lkdGg6MTRweDtwb3NpdGlvbjppbmhlcml0Ij48L2k+PC9idXR0b24+Jyk7CiAgICAgICAgJGJ1dHRvbi5hcHBlbmRUbygkbGkpOwogICAgICAgICRidXR0b24uY2xpY2soZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTsKICAgICAgICAgICAgbGV0IHBJdGVtID0gR2V0RmlsZUl0ZW1CeWxpTm9kZShqTm9kZVswXSk7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKCLnlJ\/miJBzaGExIik7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKHBJdGVtKTsKICAgICAgICAgICAgLy\/nlJ\/miJBzaGExCiAgICAgICAgICAgIHJlc2V0VGFza0NhbmNlbEZsYWcoKTsKICAgICAgICAgICAgQ3JlYXRlU2hhMUxpbmtzKHBJdGVtKTsKICAgICAgICB9KTsKCiAgICB9CgoKICAgIGZ1bmN0aW9uIHJlbmFtZUluVG9vbFRpcChlbGVtZW50LCBwSXRlbSkgewogICAgICAgIHZhciAkYnRuMSA9ICQoJzxhPjxpPjwvaT48c3Bhbj7ljrvpmaTliIbpmpTnrKY8L3NwYW4+PC9hPicpOwogICAgICAgICRidG4xLnByZXBlbmRUbyhlbGVtZW50KTsKICAgICAgICAkYnRuMVswXS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGFzeW5jIGUgPT4gewogICAgICAgICAgICBsZXQgc2VwYXJhdG9yID0gR01fY29uZmlnLmdldChjdXJyZW50Q29uZmlnLnNlcGFyYXRvcik7CiAgICAgICAgICAgIGxldCBzbGVlcFRpbWUgPSBHTV9jb25maWcuZ2V0KGN1cnJlbnRDb25maWcuY3JlYXRlRm9sZGVyU2xlZXBUaW1lKTsKICAgICAgICAgICAgcG9zdFNoYTFNZXNzZ2FlKGNyZWF0ZU1lc3NhZ2UoTWVzc2FnZVR5cGUuQkVHSU40VVBMT0FELCAiIikpOwogICAgICAgICAgICBwb3N0U2hhMU1lc3NnYWUoY3JlYXRlTWVzc2FnZShNZXNzYWdlVHlwZS5QUk9DRVNTSU5HLCBg5Y2z5bCG5byA5aeL6YeN5ZG95ZCNIOOAkCR7cEl0ZW0ubmFtZX3jgJEg5LiL5omA5pyJ5paH5Lu277yaPGJyPjxicj7ljrvpmaTliIbpmpTnrKbvvJoke3NlcGFyYXRvcn1gKSk7CiAgICAgICAgICAgIGF3YWl0IGRlbGF5KDEwMDApOwogICAgICAgICAgICBhd2FpdCBwcm9jZXNzUmVuYW1lKHBJdGVtLmlkLCBzZXBhcmF0b3IsIHNsZWVwVGltZSwgcmVzdWx0ID0+IHsKICAgICAgICAgICAgICAgIGlmIChyZXN1bHQuc3RhdGUgPT09IHRydWUpIHsKICAgICAgICAgICAgICAgICAgICBwb3N0U2hhMU1lc3NnYWUoY3JlYXRlTWVzc2FnZShNZXNzYWdlVHlwZS5QUk9DRVNTSU5HLCByZXN1bHQubXNnKSk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHBvc3RTaGExTWVzc2dhZShjcmVhdGVNZXNzYWdlKE1lc3NhZ2VUeXBlLkVSUk9SLCByZXN1bHQubXNnKSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgcG9zdFNoYTFNZXNzZ2FlKGNyZWF0ZU1lc3NhZ2UoTWVzc2FnZVR5cGUuRU5ENFVQTE9BRCwgYOWvueebruW9lSDjgJAke3BJdGVtLm5hbWV944CR5LiL55qE5paH5Lu26YeN5ZG95ZCN5a6M5oiQ77yBXAogICAgICAgICAgICAgICAgPGJyPjxicj7ojrflj5bmnIDmlrDniYjvvIzmiJbogIXpgYfliLDpl67popjljrvmraTlj43ppojvvIzmhJ\/osKIgIeeCueWHuy0+XAogICAgICAgICAgICAgICAgPGEgaHJlZj0iJHtUSVBTLlVwZGF0ZVVybH0iIHRhcmdldD0iX2JsYW5rIj4ke1RJUFMuVmVyc2lvblRpcHN9PC9hPmAsIHBJdGVtLmlkKSk7CiAgICAgICAgfSkKICAgIH0KCiAgICBmdW5jdGlvbiBjcmVhdGVTaGExSW5Ub29sVGlwKHRvb3BUaXAsIHBJdGVtKSB7CiAgICAgICAgdmFyICRidG4gPSAkKCc8YSA+PGk+PC9pPjxkaXYgc3R5bGU9ImJhY2tncm91bmQ6d2hpdGUiPjxzcGFuPuiOt+WPllNIQTHpk77mjqU8L3NwYW4+PC9kaXY+PC9hPicpOwoKICAgICAgICAkYnRuLnByZXBlbmRUbyh0b29wVGlwKTsKICAgICAgICAkYnRuWzBdLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZSA9PiB7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKCLnlJ\/miJBzaGExIik7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKHBJdGVtKTsKICAgICAgICAgICAgLy\/nlJ\/miJBzaGExCiAgICAgICAgICAgIHJlc2V0VGFza0NhbmNlbEZsYWcoKTsKICAgICAgICAgICAgQ3JlYXRlU2hhMUxpbmtzKHBJdGVtKTsKICAgICAgICB9KQogICAgfQoKICAgIGZ1bmN0aW9uIHVzaW5nT25saW5lRmlsZVRvVXBsb2FkSW5Ub29sVGlwKHRvb3BUaXAsIHBJdGVtKSB7CgogICAgICAgIGxldCB0ZW1wcyA9IHBJdGVtLm5hbWUuc3BsaXQoJy4nKTsKICAgICAgICBsZXQgZXh0ZW5zaW9uID0gdGVtcHNbdGVtcHMubGVuZ3RoIC0gMV0udG9Mb3dlckNhc2UoKTsKICAgICAgICBpZiAoZXh0ZW5zaW9uID09ICJqc29uIiB8fCBleHRlbnNpb24gPT0gInR4dCIpIHsKICAgICAgICAgICAgbGV0ICRidG4xID0gJCgnPGEgbWVudT0ib2ZmbGluZV90YXNrIiB0aXRsZT0i5pqC5LiN5pSv5oyB5aSn5LqOMk1C55qE5paH5pys5paH5Lu25pON5L2cIj48aT48L2k+PGRpdiBzdHlsZT0iYmFja2dyb3VuZDp3aGl0ZSI+PHNwYW4+5bCd6K+V6L2s5a2YPC9zcGFuPjwvZGl2PjwvYT4nKTsKICAgICAgICAgICAgJGJ0bjEucHJlcGVuZFRvKHRvb3BUaXApOwogICAgICAgICAgICAvL+Wwneivlei9rOWtmAogICAgICAgICAgICAkYnRuMVswXS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGUgPT4gewogICAgICAgICAgICAgICAgd2luZG93LnBhcmVudC5kb2N1bWVudC50cnlVcGxvYWRJdGVtID0gcEl0ZW07CiAgICAgICAgICAgIH0pCiAgICAgICAgfQogICAgfQoKICAgIC8vZml4OnYzLjMg5L+u5aSN5Zyo5Zue5pS256uZ5pi+56S65o+Q5Y+W55qEYnVnCiAgICBmdW5jdGlvbiBBZGRTaGFyZVNIQTFCdG4oak5vZGUpIHsKCiAgICAgICAgdmFyIHBhcmVudE5vZGUgPSBqTm9kZVswXS5wYXJlbnROb2RlOwogICAgICAgIHZhciBwSXRlbSA9IEdldEZpbGVJdGVtQnlsaU5vZGUocGFyZW50Tm9kZSk7CiAgICAgICAgaWYgKCFwSXRlbS5uYW1lKSByZXR1cm47CgoKICAgICAgICBqTm9kZVswXS5zdHlsZS5sZWZ0ID0gIjE4MHB4IjsKICAgICAgICAvL+ebruW9le+8jOWOu+mZpOWIhumalOespgogICAgICAgIGlmIChwSXRlbS5pc0ZvbGRlciAmJiBHTV9jb25maWcuZ2V0KGN1cnJlbnRDb25maWcuYWR2YW5jZWRSZW5hbWUpKSB7CiAgICAgICAgICAgIHJlbmFtZUluVG9vbFRpcChqTm9kZVswXSwgcEl0ZW0pOwogICAgICAgIH0KCiAgICAgICAgLy9hZGQ6IHYzLjQg5aKe5Yqg6K6+572u5piv5ZCm5pi+56S6IOWIl+ihqOaooeW8j+S4i+iOt+WPlnNoYTEKICAgICAgICBpZiAoR01fY29uZmlnLmdldChjdXJyZW50Q29uZmlnLmNyZWF0ZUl0ZW1TaGExKSkgewogICAgICAgICAgICBjcmVhdGVTaGExSW5Ub29sVGlwKGpOb2RlWzBdLCBwSXRlbSk7CiAgICAgICAgfQoKCiAgICAgICAgaWYgKCFwSXRlbS5pc0ZvbGRlcikgewogICAgICAgICAgICB1c2luZ09ubGluZUZpbGVUb1VwbG9hZEluVG9vbFRpcChqTm9kZVswXSwgcEl0ZW0pOwogICAgICAgIH0KCgoKICAgICAgICAvL+eUn+aIkGpzb27moLzlvI8KICAgICAgICAvLyBpZihwSXRlbS5pc0ZvbGRlcikKICAgICAgICAvLyB7CiAgICAgICAgLy8gICAgIHZhciAkYnRuMSA9ICQoJzxhPjxpPjwvaT48c3Bhbj7ojrflj5ZTSEExKGpzb24pPC9zcGFuPjwvYT4nKTsKICAgICAgICAvLyAgICAgJGJ0bjEucHJlcGVuZFRvKGpOb2RlWzBdKTsKICAgICAgICAvLyAgICAgJGJ0bjFbMF0uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBlID0+IHsKICAgICAgICAvLyAgICAgICAgIGNvbnNvbGUubG9nKHBJdGVtKTsKICAgICAgICAvLyAgICAgLy\/nlJ\/miJBzaGExCiAgICAgICAgLy8gICAgICAgICByZXNldFRhc2tDYW5jZWxGbGFnKCk7CiAgICAgICAgLy8gICAgICAgICBDcmVhdGVTaGExTGlua3MocEl0ZW0pOwogICAgICAgIC8vICAgICB9KQogICAgICAgIC8vIH0KCgogICAgfQoKICAgIGFzeW5jIGZ1bmN0aW9uIEdldFNlYXJjaExpc3QoaXNPbmx5U2VsZWN0ZWQpIHsKICAgICAgICByZXNldFRhc2tDYW5jZWxGbGFnKCk7CgogICAgICAgIHZhciBtc2cgPSAi5q2j5Zyo6I635Y+W5paH5Lu2Li4uIjsKICAgICAgICBwb3N0U2hhMU1lc3NnYWUoY3JlYXRlTWVzc2FnZShNZXNzYWdlVHlwZS5CRUdJTiwgbXNnKSk7CgogICAgICAgIHZhciBkb2MgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdzZWFyY2gtaWZyYW1lJylbMF07CiAgICAgICAgaWYgKCFkb2MpIGRvYyA9IGRvY3VtZW50OwogICAgICAgIHZhciBsaXMgPSBkb2MucXVlcnlTZWxlY3RvckFsbCgnLmxpc3QtY2VsbC5sc3RjLXNlYXJjaCA+IC5saXN0LWNvbnRlbnRzID4gdWwgPiBsaScpOwogICAgICAgIGlmICghbGlzKSByZXR1cm47CiAgICAgICAgY29uc29sZS5sb2cobGlzKTsKICAgICAgICB2YXIgZmlsZXMgPSBuZXcgQXJyYXkoKTsKICAgICAgICBmb3IgKHZhciBsaSBvZiBsaXMpIHsKICAgICAgICAgICAgdmFyIGZpbGVJdGVtID0gR2V0RmlsZUl0ZW1CeWxpTm9kZShsaSk7CiAgICAgICAgICAgIGZpbGVzLnB1c2goZmlsZUl0ZW0pOwogICAgICAgIH0KICAgICAgICBjb25zb2xlLmxvZygiMDogc2VhcmNoIGl0ZW1zezB9Ii5mb3JtYXQoZmlsZXMubGVuZ3RoKSk7CiAgICAgICAgaWYgKGlzT25seVNlbGVjdGVkKSB7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKCJzZWFyY2ggaXRlbXMgb25seVNlbGVjdGVkIikKICAgICAgICAgICAgZmlsZXMgPSBmaWxlcy5maWx0ZXIocSA9PiBxLnNlbGVjdGVkKTsKICAgICAgICB9CgogICAgICAgIGNvbnNvbGUubG9nKCIxOiBzZWFyY2ggaXRlbXN7MH0iLmZvcm1hdChmaWxlcy5sZW5ndGgpKTsKCiAgICAgICAgY29uc29sZS5sb2coZG9jdW1lbnQuVVJMKTsKICAgICAgICB2YXIgdXJsID0gbmV3IFVSTChkb2N1bWVudC5VUkwpOwogICAgICAgIHZhciBrZXkgPSB1cmwuc2VhcmNoUGFyYW1zLmdldCgic2VhcmNoX3ZhbHVlIik7CiAgICAgICAga2V5ID0ga2V5ID8ga2V5IDogIuaQnOe0oue7k+aenCI7CiAgICAgICAgZmlsZXMgPSBmaWxlcy5maWx0ZXIocSA9PiAhcS5pc0ZvbGRlcik7CiAgICAgICAgbXNnID0gIuiOt+WPluWIsOespuWQiOaQnOe0oueahOaWh+S7tuaVsO+8mnswfSIuZm9ybWF0KGZpbGVzLmxlbmd0aCk7CiAgICAgICAgcG9zdFNoYTFNZXNzZ2FlKGNyZWF0ZU1lc3NhZ2UoTWVzc2FnZVR5cGUuUFJPQ0VTU0lORywgbXNnKSk7CiAgICAgICAgYXdhaXQgZGVsYXkoMjAwKTsKICAgICAgICBhd2FpdCBJbm5lckNyZWF0ZVNoYTFMaW5rcyhmaWxlcywga2V5KQoKICAgIH0KCiAgICBmdW5jdGlvbiBDcmVhdGVTaGExQnV0dG9uRm9yU2VsZWN0ZWRJdGVtcyhlbGVtZW50KSB7CiAgICAgICAgaWYgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdteTExNUNyZWF0ZVNoYTFGb3JTZWxlY3RlZCcpKSByZXR1cm47CgogICAgICAgIGxldCBkaXYgPSBgPGRpdiBpZD0ibXkxMTVDcmVhdGVTaGExRm9yU2VsZWN0ZWQiIHN0eWxlPSJtYXJnaW4tbGVmdDoyMHB4O2N1cnNvcjpwb2ludGVyIj4KICAgICAgICA8YSBoZWY9ImphdmFzY3JpcHQ9OjsiIGNsYXNzPSJidXR0b24gYnRuLWxpbmUiPgogICAgICAgIDxpIGNsYXNzPSJpY29uLW9wZXJhdGUgaWZvLXNoYXJlIj48L2k+CiAgICAgICAgPHNwYW4+6I635Y+W6YCJ5Lit6aG555qEU0hBMemTvuaOpTwvc3Bhbj4KICAgICAgICA8L2E+CiAgICAgIDwvZGl2PmAKICAgICAgICBlbGVtZW50WzBdLmluc2VydEFkamFjZW50SFRNTCgnYmVmb3JlZW5kJywgZGl2KTsKICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbXkxMTVDcmVhdGVTaGExRm9yU2VsZWN0ZWQnKS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBhc3luYyBlID0+IHsKICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTsKICAgICAgICAgICAgbGV0IHNlbGV0ZWRFbGVtZW50cyA9IG5ldyBBcnJheSgpOwogICAgICAgICAgICAvL+WIl+ihqOaooeW8j+S4i++8mgogICAgICAgICAgICBsZXQgc2VsZWN0ZWRJdGVtc0luTGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5saXN0LWNvbnRlbnRzID4gdWwgPiBsaScpCiAgICAgICAgICAgIGNvbnNvbGUubG9nKGDliJfooajmqKHlvI\/kuIss6YCJ5LitOiR7c2VsZWN0ZWRJdGVtc0luTGlzdC5sZW5ndGh9YCk7CiAgICAgICAgICAgIHNlbGVjdGVkSXRlbXNJbkxpc3QuZm9yRWFjaChlbGUgPT4gc2VsZXRlZEVsZW1lbnRzLnB1c2goZWxlKSk7CiAgICAgICAgICAgIC8v57yp55Wl5Zu+5qih5byP5LiL77yaCiAgICAgICAgICAgIHNlbGVjdGVkSXRlbXNJbkxpc3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcubGlzdC10aHVtYiA+IHVsID4gbGknKQogICAgICAgICAgICBjb25zb2xlLmxvZyhg57yp55Wl5Zu+5qih5byP5LiLLOmAieS4rToke3NlbGVjdGVkSXRlbXNJbkxpc3QubGVuZ3RofWApOwogICAgICAgICAgICBzZWxlY3RlZEl0ZW1zSW5MaXN0LmZvckVhY2goZWxlID0+IHNlbGV0ZWRFbGVtZW50cy5wdXNoKGVsZSkpOwoKICAgICAgICAgICAgY29uc29sZS5sb2coYOmAieS4rToke3NlbGV0ZWRFbGVtZW50cy5sZW5ndGh9YCk7CiAgICAgICAgICAgIGxldCBpdGVtcyA9IG5ldyBBcnJheSgpOwogICAgICAgICAgICBmb3IgKGxldCBpdGVtIG9mIHNlbGV0ZWRFbGVtZW50cykgewogICAgICAgICAgICAgICAgbGV0IHNJdGVtID0gR2V0RmlsZUl0ZW1CeWxpTm9kZShpdGVtKTsKICAgICAgICAgICAgICAgIGlmIChzSXRlbS5zZWxlY3RlZCkgaXRlbXMucHVzaChzSXRlbSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmIChpdGVtcy5sZW5ndGggPT0gMCkgcmV0dXJuOwogICAgICAgICAgICBpZiAoaXRlbXMubGVuZ3RoID09IDEpIHsKICAgICAgICAgICAgICAgIGF3YWl0IENyZWF0ZVNoYTFMaW5rcyhpdGVtc1swXSkKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGF3YWl0IENyZWF0ZVNoYTFMaW5rc0FsbChpdGVtcywgYCR7aXRlbXNbMF0ubmFtZX3nrYkke2l0ZW1zLmxlbmd0aH3kuKpgKQogICAgICAgICAgICB9CgogICAgICAgIH0pOwoKCiAgICB9CgoKCiAgICBmdW5jdGlvbiBBZGRTaGFyZUJ1dHRvbkZvclNlYXJjaEl0ZW0obm9kZSkgewoKICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbXkxMTVEcm9wZG93bicpLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7CgogICAgICAgIC8v5q+P5LiA6aG5CiAgICAgICAgdmFyIGxpcyA9IG5vZGVbMF0uZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2xpJyk7CiAgICAgICAgZm9yICh2YXIgbGkgb2YgbGlzKSB7CiAgICAgICAgICAgIHZhciBwSXRlbSA9IEdldEZpbGVJdGVtQnlsaU5vZGUobGkpOwogICAgICAgICAgICB2YXIgJGJ0biA9ICQoJzxkaXYgY2xhc3M9ImZpbGUtb3ByIiBzdHlsZT0ibGVmdDoyMDBweCI+PC9kaXY+Jyk7CiAgICAgICAgICAgICRidG4uYXBwZW5kVG8obGkpOwogICAgICAgIH0KCiAgICAgICAgLy\/pkojlr7nlvZPliY3pobXpnaIKICAgICAgICAkKCIubGVmdC10dmYgPiBhLmJ0bi11cGxvYWQiKS5jc3MoInRvcCIsICIxMHB4Iik7CiAgICAgICAgaWYgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdidG5fc2VsZWN0ZWRfc2hhMScpID09IG51bGwpIHsKICAgICAgICAgICAgdmFyICRidG5fc2VsZWN0ZWQgPSAkKGA8YSBocmVmPSJqYXZhc2NyaXB0OjsiIGlkPSJidG5fc2VsZWN0ZWRfc2hhMSIgY2xhc3M9ImJ1dHRvbiBidG4tbGluZSIgc3R5bGU9InRvcDoxMHB4Ij4KICAgICAgICAgICAgPGkgY2xhc3M9Imljb24tb3BlcmF0ZSBpZm8tc2hhcmUiPjwvaT4KICAgICAgICAgICAgPHNwYW4+5o+Q5Y+W5pys6aG16YCJ5Lit5paH5Lu277yI5LiN5YyF5ous5paH5Lu25aS577yJPC9zcGFuPgogICAgICAgICAgICA8ZW0gc3R5bGU9ImRpc3BsYXk6bm9uZTsiIGNsYXNzPSJudW0tZG90Ij48L2VtPgogICAgICAgICAgICA8L2E+YCk7CiAgICAgICAgICAgICQoIi5sZWZ0LXR2ZiIpLmVxKDApLmFwcGVuZCgkYnRuX3NlbGVjdGVkKTsKCiAgICAgICAgICAgICRidG5fc2VsZWN0ZWRbMF0uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBlID0+IHsKICAgICAgICAgICAgICAgIEdldFNlYXJjaExpc3QodHJ1ZSk7CiAgICAgICAgICAgIH0pOwogICAgICAgIH0KCiAgICAgICAgaWYgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdidG5fYWxsX3NoYTEnKSA9PSBudWxsKSB7CiAgICAgICAgICAgIHZhciAkYnRuX2FsbCA9ICQoYDxhIGhyZWY9ImphdmFzY3JpcHQ6OyIgaWQ9ImJ0bl9hbGxfc2hhMSIgY2xhc3M9ImJ1dHRvbiBidG4tbGluZSIgc3R5bGU9InRvcDoxMHB4Ij4KICAgICAgICAgICAgPGkgY2xhc3M9Imljb24tb3BlcmF0ZSBpZm8tc2hhcmUiPjwvaT4KICAgICAgICAgICAgPHNwYW4+5o+Q5Y+W5pys6aG15omA5pyJ5paH5Lu277yI5LiN5YyF5ous5paH5Lu25aS577yJPC9zcGFuPgogICAgICAgICAgICA8ZW0gc3R5bGU9ImRpc3BsYXk6bm9uZTsiIGNsYXNzPSJudW0tZG90Ij48L2VtPgogICAgICAgICAgICA8L2E+YCk7CiAgICAgICAgICAgICQoIi5sZWZ0LXR2ZiIpLmVxKDApLmFwcGVuZCgkYnRuX2FsbCk7CgogICAgICAgICAgICAkYnRuX2FsbFswXS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGUgPT4gewogICAgICAgICAgICAgICAgR2V0U2VhcmNoTGlzdChmYWxzZSk7CiAgICAgICAgICAgIH0pOwogICAgICAgIH0KCgogICAgfQoKCgogICAgZnVuY3Rpb24gQ29udGludWVkVGFzayh0YXNrSnNvbkZpbGVOYW1lKSB7CiAgICAgICAgY29uc29sZS5sb2coIkNvbnRpbnVlZFRhc2siKTsKICAgICAgICBwb3N0U2hhMU1lc3NnYWUoY3JlYXRlTWVzc2FnZShNZXNzYWdlVHlwZS5CRUdJTiwgIuato+WcqOe7p+e7reS7u+WKoS4uLiIpKTsKICAgICAgICByZXNldFRhc2tDYW5jZWxGbGFnKCk7CiAgICAgICAgbGV0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7CiAgICAgICAgcmVhZGVyLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBmdW5jdGlvbiAodCkgewogICAgICAgICAgICB0cnkgewoKICAgICAgICAgICAgICAgIHBvc3RTaGExTWVzc2dhZShjcmVhdGVNZXNzYWdlKE1lc3NhZ2VUeXBlLlBST0NFU1NJTkcsICLmraPlnKjop6PmnpDnu6fnu63ku7vliqHphY3nva4uLi4iKSk7CiAgICAgICAgICAgICAgICBsZXQgdGFza0pzb24gPSBKU09OLnBhcnNlKHQudGFyZ2V0LnJlc3VsdCk7CgogICAgICAgICAgICAgICAgY29uc29sZS5sb2coYCR7dGFza0pzb24udGFza1R5cGV9LCAke3Rhc2tKc29uLmZpbGVOYW1lfSwgJHt0YXNrSnNvbi5kYXRhLmxlbmd0aH1gKTsKICAgICAgICAgICAgICAgIGxldCBjYW5Db250aW51ZWQgPSB0cnVlOwogICAgICAgICAgICAgICAgaWYgKHRhc2tKc29uLmRhdGEubGVuZ3RoID4gMCkgewoKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgY2FuQ29udGludWVkID0gZmFsc2U7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoY2FuQ29udGludWVkKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKHRhc2tKc29uLnRhc2tUeXBlID09IFRhc2tUeXBlLkRPV05MT0FEKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHBvc3RTaGExTWVzc2dhZShjcmVhdGVNZXNzYWdlKE1lc3NhZ2VUeXBlLlBST0NFU1NJTkcsIGDmraPlnKjlvIDlp4vlr7njgJAke3Rhc2tKc29uLmZpbGVOYW1lfeOAkee7p+e7reaPkOWPli4uLuivt+eojeetie+8gWApKTsKICAgICAgICAgICAgICAgICAgICAgICAgYAogICAgICAgICAgICAgICAgICAgICAgICDmj5Dlj5bvvJoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0ZW1wRmlsZT1bCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmLmlkLGYucGFyZW50SUQsZi5uYW1lLGYuc2l6ZSxmLnBhdGhzLGYucGlja0NvZGUsZi5zaGExLGYucHJlaWQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdOwogICAgICAgICAgICAgICAgICAgICAgICBgCiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBhbGxGaWxlcyA9IHRhc2tKc29uLmRhdGEubWFwKGYgPT4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogZlswXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnRJRDogZlsxXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBmWzJdLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6IGZbM10sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0aHM6IGZbNF0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGlja0NvZGU6IGZbNV0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hhMTogZls2XSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmVpZDogZls3XSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgIElubmVyQ3JlYXRlU2hhMUxpbmtzKGFsbEZpbGVzLCB0YXNrSnNvbi5maWxlTmFtZSk7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0YXNrSnNvbi50YXNrVHlwZSA9PSBUYXNrVHlwZS5VUExPQUQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcG9zdFNoYTFNZXNzZ2FlKGNyZWF0ZU1lc3NhZ2UoTWVzc2FnZVR5cGUuQkVHSU40VVBMT0FELCAi5q2j5Zyo6Kej5p6Qc2hhMemTvuaOpS4uLiIpKTsKICAgICAgICAgICAgICAgICAgICAgICAgYOi9rOWMluagvOW8jwogICAgICAgICAgICAgICAgICAgICAgICDovazlrZjvvJoKICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRlbXBGaWxlID0gWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZi5wYXJlbnRJRCxmLm5hbWUsIGYuZm9ybWF0ZWROYW1lLCBmLnNpemUsIGYuc2hhMSwgZi5wcmVpZCxmLnN0YXRlCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgYAogICAgICAgICAgICAgICAgICAgICAgICBsZXQgYWxsRmlsZXMgPSB0YXNrSnNvbi5kYXRhLm1hcChmID0+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6ICcnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudElEOiBmWzBdLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IGZbMV0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0ZWROYW1lOiBmWzJdLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6IGZbM10sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGlja0NvZGU6ICcnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNoYTE6IGZbNF0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJlaWQ6IGZbNV0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGU6IGZbNl0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgICAgICAgICB0YXNrSnNvbi5kYXRhID0gYWxsRmlsZXM7CgogICAgICAgICAgICAgICAgICAgICAgICBVcGxvYWRGaWxlc0J5U2hhMUxpbmtzKG51bGwsIHRhc2tKc29uKTsKCgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgbGV0IG1zZyA9IGAKICAgICAgICAgICAgICAgICAgICDojrflj5bnmoTnu6fnu63ku7vliqHvvJrjgJAgPGI+JHt0YXNrSnNvbi5maWxlTmFtZX08L2I+IOOAkSzphY3nva7mnInor6\/vvIE8YnI+CiAgICAgICAgICAgICAgICAgICAg5Y+v6IO95LiN5piv5q2j56Gu55qE6YWN572u5paH5Lu2LCDmiJbogIXkuI3pgILnlKjkuo7mraTniYjmnKznmoTphY3nva7vvIEKICAgICAgICAgICAgICAgICAgICBgOwogICAgICAgICAgICAgICAgICAgIHBvc3RTaGExTWVzc2dhZShjcmVhdGVNZXNzYWdlKE1lc3NhZ2VUeXBlLkVORCwgbXNnKSk7CiAgICAgICAgICAgICAgICB9CgoKICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHsKICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpOwogICAgICAgICAgICB9CgogICAgICAgIH0pOwogICAgICAgIHJlYWRlci5yZWFkQXNUZXh0KHRhc2tKc29uRmlsZU5hbWUpOwoKCgogICAgfQoKCgoKfSkoKTsK",
  "name" : "115转存助手ui优化版3.5改-Foxok兼容版",
  "injectTime" : 1,
  "noFrames" : true,
  "type" : 1
}